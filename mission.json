[
{
  "pk": 3, 
  "model": "mission.mission", 
  "fields": {
    "name": "Casus belli", 
    "target_list": null, 
    "text": "Trouver un pr\u00e9texte pour l\u00e9galiser le pillage de la cible. Le Casus Belli ne sera effectif que 24 heures plus tard, ce qui donnera \u00e0 votre adversaire la possibilit\u00e9 de n\u00e9gocier sa reddition avant que vous ne puissiez l'attaquer.\r\n\r\n    cout : prestige cible/10 +5/personnages mis dans la mission\r\n    courtisans max en mission : prestige*0.03\r\n    d\u00e9fense = 0.4 * A * B, o\u00f9 B est le nombre de personnes dans votre cour pas en mission et A vaut :\r\n    -6% : diplomatie du ch\u00e2telain\r\n    -24% : diplomatie de l'ambassadeur\r\n    -70% : moyenne des diplomatie des courtisans qui ne sont pas dans des missions\r\n    attaque = somme des diplomatie des gens dans la mission\r\n    Les missionn\u00e9s sont indisponibles 6 mois (12heures de temps r\u00e9el)\r\n\r\n  ", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "Valeur :", 
    "on_start": "affected = grids['chercheurs_noises']\n\nprix = kingdom.prestige / 10 + 5 * len(affected)\nif kingdom.money > prix:\n  kingdom.money -= prix\n  kingdom.save()\nelse:\n  stop(u\"Vous n'avez pas assez d'\u00e9cus pour lancer cette mission, %s \u00e9cus demand\u00e9s.\" % prix)\n\n\na = 0\nambassadeur = kingdom.get_folk_in_title(\"ambassadeur\")\nfor folk in affected:\n  a += folk.diplomacy\n  if folk == ambassadeur:\n    a += 4  # bonus ambassadeur dans la mission\n\nd = 0\ntry:\n  d += target.get_folk_in_title(\"ambassadeur\").diplomacy * 4\nexcept:\n  pass\ntry:\n  d += target.get_folk_in_title(\"chatelain\").diplomacy\nexcept:\n  pass\n\nfolks_dispo=folks.filter(mission=None, birth__gte=datetime.now() - timedelta(days=C.MAJORITE))\nd *= 0.2 * 0.3 * folks_dispo.count()\nd += sum_stats(folks_dispo, \"diplomacy\") * 0.7\nd *= 0.4\n\n\nif a > d:\n\n  # event \u00e0 moi pour annoncer que la claim est obtenue\n  pe = kingdom.create_pending_event(\"getaffront_diplomatie_kingdomsuccess\")\n  pe.set_value(\"target\", target)\n  pe.start()\n  # event \u00e0 la cible pour annoncer que la claim est obtenue\n  pe = target.create_pending_event(\"getaffront_diplomatie_targetsuccess\")\n  pe.set_value(\"target\", kingdom)\n  pe.start()\n  # event \u00e0 moi dans 24 heures pour annoncer que la claim est devenue valide+existence de la claim\n  pe = kingdom.create_pending_event(\"getaffront_diplomatie_kingdom_claim_effective\")\n  pe.set_value(\"target\", target)\n  pe.started = datetime.now() + timedelta(days=1)\n  pe.save()\n  # event \u00e0 la cible dans 24 heures pour annoncer que la claim est devenue valide\n  pe = target.create_pending_event(\"getaffront_diplomatie_target_claim_effective\")\n  pe.set_value(\"target\", kingdom)\n  pe.started = datetime.now() + timedelta(days=1)\n  pe.save()\n\nelse:\n  pe = kingdom.create_pending_event(\"getaffront_diplomatie_kingdomfailure\")\n  pe.set_value(\"attaquant\", kingdom)\n  pe.start()\n\n  pe = target.create_pending_event(\"getaffront_diplomatie_targetfailure\")\n  pe.set_value(\"attaquant\", kingdom)\n  pe.start()\n", 
    "has_target": true, 
    "is_team": false, 
    "title": 6, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 720, 
    "on_cancel": "\n", 
    "slug": "getaffront_diplomatie", 
    "on_init": "\n"
  }
},
{
  "pk": 4, 
  "model": "mission.mission", 
  "fields": {
    "name": "Recruter des hommes d'arme", 
    "target_list": "   ", 
    "text": "Il faut recruter une arm\u00e9e", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "Valeur :", 
    "on_start": "kingdom.start_pending_event(\"tuto_recrutement\")\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 2, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "stop(\"gofuck\")\n", 
    "slug": "tuto_recrutement", 
    "on_init": "  "
  }
},
{
  "pk": 6, 
  "model": "mission.mission", 
  "fields": {
    "name": "Soudoyer les notables", 
    "target_list": " ", 
    "text": "Il faut acheter sa confiance aupr\u00e8s du peuple", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "Valeur :", 
    "on_start": "kingdom.start_pending_event(\"tuto_potsdevin\")", 
    "has_target": false, 
    "is_team": false, 
    "title": 5, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "tuto_potsdevin", 
    "on_init": " "
  }
},
{
  "pk": 8, 
  "model": "mission.mission", 
  "fields": {
    "name": "Lever un imp\u00f4t sp\u00e9cial", 
    "target_list": null, 
    "text": "Une taxe sur l'ensemble de mes serfs. ", 
    "has_value": true, 
    "on_resolution": "\n", 
    "value_description": "Somme totale \u00e0 taxer", 
    "on_start": "pe = kingdom.create_pending_event(\"taxepaysanne\")\npe.set_value(\"somme_taxe\", value)\npe.start()\n\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 7, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "taxepaysanne", 
    "on_init": "\n"
  }
},
{
  "pk": 9, 
  "model": "mission.mission", 
  "fields": {
    "name": "Rationnement", 
    "target_list": null, 
    "text": "Forcer les courtisans \u00e0 payer une partie des d\u00e9penses du ch\u00e2teau.", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "Valeur :", 
    "on_start": "kingdom.start_pending_event(\"taxecour\")", 
    "has_target": false, 
    "is_team": false, 
    "title": 7, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "taxecour", 
    "on_init": "\n"
  }
},
{
  "pk": 10, 
  "model": "mission.mission", 
  "fields": {
    "name": "Banquet", 
    "target_list": " ", 
    "text": " ", 
    "has_value": false, 
    "on_resolution": "  \n", 
    "value_description": "Valeur :", 
    "on_start": "kingdom.start_pending_event(\"tuto_banquet\")", 
    "has_target": false, 
    "is_team": false, 
    "title": 4, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "tuto_banquet", 
    "on_init": "\n"
  }
},
{
  "pk": 11, 
  "model": "mission.mission", 
  "fields": {
    "name": "R\u00e9parer l'\u00e9glise", 
    "target_list": " ", 
    "text": "  ", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "Valeur :", 
    "on_start": "kingdom.money -= 15\nkingdom.save()\n\npe = kingdom.start_pending_event(\"tuto_eglise\")                \n", 
    "has_target": false, 
    "is_team": false, 
    "title": 3, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 1, 
    "on_cancel": "\n", 
    "slug": "tuto_eglise", 
    "on_init": " "
  }
},
{
  "pk": 14, 
  "model": "mission.mission", 
  "fields": {
    "name": "Bannir", 
    "target_list": null, 
    "text": "Bannir d\u00e9finitivement un membre de ma cour\r\n\r\n    Pas de seuil\r\n    vous r\u00e9cup\u00e9rez les biens de la personne bannie\r\n    vous perdez de la loyaut\u00e9 g\u00e9n\u00e9rale", 
    "has_value": false, 
    "on_resolution": "def perte(facteur, kingdom=kingdom):\n  call_function(\"perte_loyaute_general\", kingdom=kingdom, perte_min=C.PERTE_LOYAUTE_BANNISSEMENT * facteur, perte_max=C.PERTE_LOYAUTE_BANNISSEMENT * facteur)\n  return C.PERTE_LOYAUTE_BANNISSEMENT * facteur\n\nbanni = grids['banni'][0]\nperte_loyaute = 0\n\nif banni.has_quality(\"admire\"):\n  perte_loyaute -= perte(2)\nelif banni.has_quality(\"respecte\"):\n  perte_loyaute -= perte(1.5)\nelif banni.has_quality(\"meprise\"):\n  perte_loyaute -= perte(0.5)\nelif banni.has_quality(\"deteste\"):\n  perte_loyaute -= perte(0)\nelse:\n  perte_loyaute -= perte(1)\n\nbiens = random_value(2, 30)\nkingdom.money += biens\nkingdom.save()\n\nf(\"tuer_folk\", condamne=banni)\n\npe = kingdom.create_pending_event(\"bannissement\")\npe.set_value(\"banni\", banni)\npe.set_value(\"biens\", biens)\npe.set_value(\"perte\", perte_loyaute)\npe.start()\n", 
    "value_description": "Valeur :", 
    "on_start": "\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 4, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 0, 
    "on_cancel": "\n", 
    "slug": "bannir_folk", 
    "on_init": "\n"
  }
},
{
  "pk": 17, 
  "model": "mission.mission", 
  "fields": {
    "name": "Mariage", 
    "target_list": null, 
    "text": "Si une personne de votre dynastie est mari\u00e9e, le banquet qui s'ensuit est \u00e0 votre charge et coute 5 \u00e9cus par personne pr\u00e9sente dans votre cour au moment o\u00f9 le mariage est c\u00e9l\u00e9br\u00e9.", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "Valeur :", 
    "on_start": "prix = 5 * folks.filter(mission__isnull=True).count()\nif kingdom.money < prix:\n  stop(\"Vous n'avez pas assez d'argent pour payer le banquet\")\n\nkingdom.money -= prix\nkingdom.save()\n\ngrids['mari'][0].spouse = grids['femme'][0]\ngrids['femme'][0].spouse = grids['mari'][0]\ngrids['mari'][0].save()\ngrids['femme'][0].save()\nif grids['mari'][0] == folks[3] and grids['femme'][0] == folks[2]:\n  kingdom.set_value(\"tuto_mariage_fait\", True)\n  pe = kingdom.create_pending_event(\"mariagefille\")\n  pe.set_value(\"banquet_mariage_tuto\", True)\n  pe.set_value(\"mari\", grids['mari'][0])\n  pe.set_value(\"femme\", grids['femme'][0])\n  pe.start()\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 3, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 0, 
    "on_cancel": "\n", 
    "slug": "marier", 
    "on_init": "\n"
  }
},
{
  "pk": 18, 
  "model": "mission.mission", 
  "fields": {
    "name": "Charit\u00e9", 
    "target_list": null, 
    "text": "Une aum\u00f4ne pour convaincre le bas peuple de votre bont\u00e9.\r\n\r\n    cout mission : (nombre de paysans + nombre de soldats)/10\r\n    Un nombre de paysans d\u00e9pendant de l'\u00e9rudition des courtisans envoy\u00e9s viens dans votre royaume. ", 
    "has_value": false, 
    "on_resolution": "pe = kingdom.create_pending_event(\"charite\")\npe.set_value(\"perte_ecus\", param.get_value(\"perte_ecus\"))\npe.set_value(\"gain_paysans\", param.get_value(\"gain_paysans\"))\npe.start()\n\nkingdom.population += param.get_value(\"gain_paysans\")\nkingdom.save()\n", 
    "value_description": "Valeur :", 
    "on_start": "cout_mission = int((kingdom.population + kingdom.get_value(\"total_soldats\")) / 10)\nif kingdom.money < cout_mission:\n  stop(\"Vous n'avez pas assez d'argent pour lancer cette mission, cette mission coute \" + unicode(cout_mission))\nelse:\n  kingdom.money -= cout_mission\n  kingdom.save()\n  param.set_value(\"perte_ecus\", cout_mission)\n  pop_max = f(\"get_max_population\", kingdom=kingdom)\n  pop_actuelle = kingdom.population + kingdom.get_value(\"total_soldats\")\n  gain_pop = int(min((9 + (4 * (sum_stats(folks, \"scholarship\") / 60) ** 0.5) - 9 * pop_actuelle / pop_max) / 100 * pop_max, pop_max - pop_actuelle))\n  param.set_value(\"gain_paysans\", gain_pop)\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 3, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "charite", 
    "on_init": "\n"
  }
},
{
  "pk": 20, 
  "model": "mission.mission", 
  "fields": {
    "name": "Emprisonnement", 
    "target_list": null, 
    "text": "Un membre de ma cour m'a fortement d\u00e9plu. Et comme je suis la loi et qu'il me sied de le faire dispara\u00eetre de ma vue, j'ai pris la d\u00e9cision de le jeter en prison.\r\n\r\n    Pas de seuil minimum\r\n    les prisonniers vous coutent un entretien par mois\r\n    vous perdez de la loyaut\u00e9 g\u00e9n\u00e9rale. Beaucoup si la cible est admir\u00e9e ou respect\u00e9e, moins si elle est m\u00e9pris\u00e9e et peu si elle est d\u00e9test\u00e9e.", 
    "has_value": false, 
    "on_resolution": "def perte(facteur, kingdom=kingdom):\n  call_function(\"perte_loyaute_general\", kingdom=kingdom, perte_min=C.PERTE_LOYAUTE_EMPRISONNEMENT * facteur, perte_max=C.PERTE_LOYAUTE_EMPRISONNEMENT * facteur)\n  return C.PERTE_LOYAUTE_EMPRISONNEMENT * facteur\n\nprisonnier = grids['prisonnier'][0]\nprisonnier.add_quality(\"prisonnier\")\nperte_loyaute = 0\n\nif prisonnier.has_quality(\"admire\"):\n  perte_loyaute -= perte(2)\nelif prisonnier.has_quality(\"respecte\"):\n  perte_loyaute -= perte(1.5)\nelif prisonnier.has_quality(\"meprise\"):\n  perte_loyaute -= perte(0.5)\nelif prisonnier.has_quality(\"deteste\"):\n  perte_loyaute -= perte(0)\nelse:\n  perte_loyaute -= perte(1)\n\n\npe = kingdom.create_pending_event(\"execution\")\npe.set_value(\"prisonnier\", prisonnier)\npe.set_value(\"perte\", perte_loyaute)\npe.start()\n", 
    "value_description": "Valeur :", 
    "on_start": "\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 4, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 0, 
    "on_cancel": "\n", 
    "slug": "emprisonner", 
    "on_init": "\n"
  }
},
{
  "pk": 21, 
  "model": "mission.mission", 
  "fields": {
    "name": "Lib\u00e9rer un prisonnier", 
    "target_list": null, 
    "text": "Le prisonnier a plus que payer pour son tord. Il est temps de le lib\u00e9rer.\r\n\r\n    Cette mission est instantan\u00e9e et n'a qu'un co\u00fbt, celui de devoir subir \u00e0 nouveau la pr\u00e9sence entre vos murs de cet individu horripilant. L'odeur en plus.\r\n    Pour compenser, les courtisans de votre ch\u00e2teaux sont agr\u00e9ablement soulag\u00e9s \u00e0 l'id\u00e9e que l'on puisse sortir vivant de vos cellules. Ils regagnent un peu de loyaut\u00e9 envers vous. Beaucoup si la cible est admir\u00e9e ou respect\u00e9e, moins si elle est m\u00e9pris\u00e9e et peu si elle est d\u00e9test\u00e9e. ", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "Valeur :", 
    "on_start": "def gain(facteur, kingdom=kingdom):\n  call_function(\"gain_loyaute_general\", kingdom=kingdom, gain_min=C.PERTE_LOYAUTE_EMPRISONNEMENT * facteur, gain_max=C.PERTE_LOYAUTE_EMPRISONNEMENT * facteur)\n  return C.PERTE_LOYAUTE_EMPRISONNEMENT * facteur\n\nprisonnier = grids['libere'][0]\nprisonnier.remove_quality(\"prisonnier\")\ngain_loyaute = 0\n\nif prisonnier.has_quality(\"legende_locale\"):\n  gain_loyaute = gain(2)\nelif prisonnier.has_quality(\"intrepide\"):\n  gain_loyaute = gain(1.5)\nelif prisonnier.has_quality(\"scelerat\"):\n  gain_loyaute = gain(0)\nelif prisonnier.has_quality(\"traitre\"):\n  call_function(\"gain_loyaute_general\", kingdom=kingdom, gain_min=4, gain_max=6)\n  gain_loyaute -= C.PERTE_LOYAUTE_EMPRISONNEMENT\nelse:\n  gain_loyaute = gain(1)\n\nkingdom.message(\"\")\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 4, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 0, 
    "on_cancel": "\n", 
    "slug": "liberer", 
    "on_init": "\n"
  }
},
{
  "pk": 22, 
  "model": "mission.mission", 
  "fields": {
    "name": "Ex\u00e9cution", 
    "target_list": null, 
    "text": "Ex\u00e9cuter froidement un membre de votre cour.\r\n\r\n    Pas de seuil minimum\r\n    Pas de cout, vous vous abrogez m\u00eame sans vergogne les biens du d\u00e9funt\r\n    vous perdez de la loyaut\u00e9 g\u00e9n\u00e9rale. Beaucoup si la cible est admir\u00e9e ou respect\u00e9e, moins si elle est m\u00e9pris\u00e9e et peu si elle est d\u00e9test\u00e9e. \r\n\r\n    *La perte de loyaut\u00e9 est pire que celle d'un bannissement qui est elle m\u00eame pire qu'un emprisonnement, parlez-en avec votre maitre-espion.", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "Valeur :", 
    "on_start": "def perte(facteur, kingdom=kingdom):\n  call_function(\"perte_loyaute_general\", kingdom=kingdom, perte_min=C.PERTE_LOYAUTE_EXECUTION * facteur, perte_max=C.PERTE_LOYAUTE_EXECUTION * facteur)\n  return C.PERTE_LOYAUTE_EXECUTION * facteur\n\ncondamne = grids['condamne'][0]\nperte_loyaute = 0\n\nif condamne.has_quality(\"admire\"):\n  perte_loyaute -= perte(2)\nelif condamne.has_quality(\"respecte\"):\n  perte_loyaute -= perte(1.5)\nelif condamne.has_quality(\"meprise\"):\n  perte_loyaute -= perte(0.5)\nelif condamne.has_quality(\"deteste\"):\n  perte_loyaute -= perte(0)\nelse:\n  perte_loyaute -= perte(1)\n\nbiens = random_value(2, 30)\nkingdom.money += biens\nkingdom.save()\n\npe = kingdom.create_pending_event(\"execution\")\npe.set_value(\"condamne\", condamne)\npe.set_value(\"biens\", biens)\npe.set_value(\"perte\", perte_loyaute)\npe.start()\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 4, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 0, 
    "on_cancel": "\n", 
    "slug": "executer", 
    "on_init": "\n"
  }
},
{
  "pk": 23, 
  "model": "mission.mission", 
  "fields": {
    "name": "D\u00e9signer un mentor", 
    "target_list": null, 
    "text": "Un enfant ayant un mentor aura tendance \u00e0 aligner ses caract\u00e9ristiques sur celui-ci lors de sa croissance.\r\n\r\n    Cette mission instantan\u00e9e sans co\u00fbt ne rend pas le mentor indisponible. Il fait \u00e7a sur son temps libre.", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "Valeur :", 
    "on_start": "grids['enfant'][0].mentor = grids['mentor'][0]\ngrids['enfant'][0].save()\n\npe = kingdom.create_pending_event(\"education\")\npe.set_value('pupil', grids['enfant'][0])\npe.set_value('mentor', grids['mentor'][0])\npe.start()\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 4, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 0, 
    "on_cancel": "\n", 
    "slug": "nommer_mentor", 
    "on_init": "\n"
  }
},
{
  "pk": 26, 
  "model": "mission.mission", 
  "fields": {
    "name": "Raid", 
    "target_list": null, 
    "text": "Raider un autre joueur permet de voler quelques ressources aux limites de ses terres. Mais gare aux cons\u00e9quences.\r\n\r\n    L'adversaire gagne un Casus Belli \u00e0 votre encontre actif imm\u00e9diatement\r\n    Vous remportez quelques \u00e9cus.\r\n    Si vous attaquez un joueur qui a d\u00e9j\u00e0 un Casus Belli \u00e0 votre encontre ou qui est plus faible que vous, vous perdez du prestige.\r\n    ", 
    "has_value": false, 
    "on_resolution": "try:\n  if len(param.get_value(\"morts_attaquant\")) > 0:\n    for perso in param.get_value(\"morts_attaquant\"):\n      f(\"tuer_folk\", condamne=perso)\nexcept:\n  stop()\n", 
    "value_description": "Valeur :", 
    "on_start": "# tester la possibilit\u00e9 pour l'attaquant d'attaquer (assez d'argent)\nif kingdom.money < 10:\n  stop(\"Vous n'avez pas suffisamment d'argent pour lancer cette mission.\")\n\nelse:\n  kingdom.money -= 10\n\n  retour_fonction = call_function('determiner_raid',\n                  liste_attaquant=grids['attaquants'],\n                  argent_defenseur=target.money,\n                  population_defenseur=target.population,\n                  population_max_defenseur=f('get_max_population', kingdom=target)\n                  )\n\n  # le raid entraine un casus belli\n  retour_fonction2 = f(\"creer_claim\", offender=kingdom, offended=target, level=1)\n\n  target.population -= retour_fonction['population_perdue']\n\n  perte_prestige = 0\n\n  if kingdom.prestige >= 2 * target.prestige:\n    perte_prestige = 30\n  elif kingdom.prestige >= target.prestige:\n    perte_prestige = 15\n\n  kingdom.prestige -= perte_prestige\n  kingdom.money += retour_fonction['argent_vole']\n\n  param.set_value('morts_attaquant', [])\n\n  # gestion des evenements de retour du raid pour l'attaquant et d'avertissement de raid pour la cible\n  # cas d'un raid qui tourne tr\u00e8s mal (des morts ...)\n  if len(retour_fonction['morts_attaquant']) > 0:\n    # evenement pour l'attaquant\n    # liste des noms des morts\n    morts_nom = []\n    for perso in retour_fonction['morts_attaquant']:\n      morts_nom.append(perso.first_name + \" \" + perso.last_name)\n      grids['attaquants'] = grids['attaquants'].remove(perso)\n    pa = kingdom.create_pending_event(\"retour_raid_morts\")\n    pa.set_value(\"argent_gagne\", retour_fonction['argent_vole'])\n    pa.set_value(\"attaque\", target)\n    pa.set_value(\"liste_attaquant\", grids['attaquants'])\n    pa.set_value(\"blesses_attaquant\", retour_fonction['blesses_attaquant'])\n    pa.set_value(\"morts_nom\", morts_nom)\n    pa.set_value(\"perte_prestige\", perte_prestige)\n    pa.start()\n    # evenement pour la cible\n    pc = target.create_pending_event(\"cible_raid_morts\")\n    pc.set_value(\"mort1_name\", retour_fonction['morts_attaquant'][0].first_name + \" \" + retour_fonction['morts_attaquant'][0].last_name)\n    pc.set_value(\"population_perdue\", retour_fonction['population_perdue'])\n    pc.set_value(\"kingdom_attaquant\", kingdom)\n    pc.set_value(\"kingdom_attaque\", target)\n    pc.set_value(\"deja_ennemi\", retour_fonction2['deja_ennemi'])\n    pc.start()\n    # et on les tuera \u00e0 la fin\n    param.set_value(\"morts_attaquant\", retour_fonction['morts_attaquant'])\n  #\n  # cas d'un raid sans encombre\n  else:\n     # evenement du retour pour l'attaquant\n    pa = kingdom.create_pending_event(\"retour_raid_ok\")\n    pa.set_value(\"argent_gagne\", retour_fonction['argent_vole'])\n    pa.set_value(\"attaque\", target)\n    pa.set_value(\"liste_attaquant\", grids['attaquants'])\n    pa.set_value(\"blesses_attaquant\", retour_fonction['blesses_attaquant'])\n    pa.set_value(\"perte_prestige\", perte_prestige)\n    pa.start()\n    # evenement pour la cible\n    pc = target.create_pending_event(\"cible_raid_ok\")\n    pc.set_value(\"population_perdue\", int(retour_fonction['population_perdue']))\n    pc.set_value(\"kingdom_attaquant\", kingdom)\n    pc.set_value(\"kingdom_attaque\", target)\n    pc.set_value(\"deja_ennemi\", retour_fonction2['deja_ennemi'])\n    pc.start()\n\n  target.save()\n  kingdom.save()\n", 
    "has_target": true, 
    "is_team": false, 
    "title": 2, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 1, 
    "on_cancel": "\n", 
    "slug": "organiser_raid", 
    "on_init": "\n"
  }
},
{
  "pk": 27, 
  "model": "mission.mission", 
  "fields": {
    "name": "Espionner une seigneurerie", 
    "target_list": "param = Kingdom.objects.filter(offended_set__offender=kingdom)", 
    "text": "OLD : A SUPPRIMER\r\n\r\n\r\nRechercher combien cet adversaire potentiel a d'archers, de piquiers, de cavaliers, d'\u00e9cus et de population. Plus l'attaque est \u00e9lev\u00e9e par rapport \u00e0 la d\u00e9fense, plus les informations sont pr\u00e9cises et justes.\r\n\r\n    cout 10,\r\n    la d\u00e9fense de l'espionnage d\u00e9pend de l'intrigue du royaume que vous visez.\r\n    La d\u00e9fense est compos\u00e9e \u00e0 :\r\n    -6% : diplomatie du ch\u00e2telain\r\n    -24% : diplomatie de l'ambassadeur\r\n    -70% : moyenne des diplomatie des courtisans qui ne sont pas dans des missions\r\n    attaque = moyenne des diplomatie des courtisans dans la mission\r\n    dur\u00e9e de la mission : 1 mois (2heures de temps r\u00e9el)", 
    "has_value": false, 
    "on_resolution": "cout = 10\nif kingdom.money < cout:\n  stop(\"Vous n'avez pas assez d'argent pour lancer cette mission, elle coute \" + unicode(cout))\nkingdom.money -= cout\nkingdom.save()\n\na = avg_stat(grids['espion'])\nif kingdom.get_folk_in_title(\"maitre_espion\") in grids['espion']:\n  a += 2  # bonus maitre_espion\n\n\nd = 0\ntry:\n  d += target.get_folk_in_title(\"maitre_espion\").diplomacy * 4\nexcept:\n  pass\ntry:\n  d += target.get_folk_in_title(\"chatelain\").diplomacy\nexcept:\n  pass\nd *= 0.2 * 0.3\nd += 0.7 * avg_stats(target.folk_set.filter(mission=None, birth__gte=datetime.now() - timedelta(days=C.MAJORITE)) , 'plot')\n\nmarge = min(100, 100 * 4 / float(3) * 1 / float(2) * (1 + ((a - d) / float((a + d)))))\n\nmoney = target.money + max(-target.money, target.money * random_value(-(100 - marge) * (100 - marge) / float(100), (100 - marge) * (100 - marge) / float(100)))\n\nincertitude = (100 + random_value(-(100 - marge) * (100 - marge) / float(100), (100 - marge) * (100 - marge) / float(100))) / float(100)\nfolk = max(5, min(target.folk_set.count() * incertitude, target.prestige / 10))\n\nincertitude = (100 + random_value(-(100 - marge) * (100 - marge) / float(100), (100 - marge) * (100 - marge) / float(100))) / float(100)\npopulation = max(5, min(target.population * incertitude, call_function(\"population_max\", kingdom=target)))\n\nincertitude = (100 + random_value(-(100 - marge) * (100 - marge) / float(100), (100 - marge) * (100 - marge) / float(100))) / float(100)\narchers = max(0, min(Folk.objects.filter(kingdom=target, quality_set__name=\"archer\").count() * incertitude, folk * 2 / 3))\n\nincertitude = (100 + random_value(-(100 - marge) * (100 - marge) / float(100), (100 - marge) * (100 - marge) / float(100))) / float(100)\npiquiers = max(0, min(Folk.objects.filter(kingdom=target, quality_set__name=\"piquier\").count() * incertitude, folk * 2 / 3))\n\nincertitude = (100 + random_value(-(100 - marge) * (100 - marge) / float(100), (100 - marge) * (100 - marge) / float(100))) / float(100)\ncavaliers = max(0, min(Folk.objects.filter(kingdom=target, quality_set__name=\"cavalier\").count() * incertitude, folk * 2 / 3))\n\npe = kingdom.create_pending_event(\"rapport_espionnage\")\npe.set_value(\"money\", money)\npe.set_value(\"folk\", folk)\npe.set_value(\"population\", population)\npe.set_value(\"piquiers\", piquiers)\npe.set_value(\"cavaliers\", cavaliers)\npe.set_value(\"archers\", archers)\npe.set_value(\"target\", target)\npe.start()\n", 
    "value_description": " ", 
    "on_start": "\n", 
    "has_target": true, 
    "is_team": false, 
    "title": 5, 
    "target_description": "Chateau \u00e0 observer", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 60, 
    "on_cancel": "\n", 
    "slug": "espionner", 
    "on_init": "\n"
  }
},
{
  "pk": 31, 
  "model": "mission.mission", 
  "fields": {
    "name": "Banquet", 
    "target_list": null, 
    "text": "Un banquet permet de raffermir l'esprit de famille du ch\u00e2teau. C'est une occasion de passer un petit moment avec les autres sans qu'ils vous parlent de probl\u00e8mes.\r\n\r\n    Il est fort \u00e0 parier que vos convives vous seront plus loyaux apr\u00e8s cela.\r\n    L'organisation d'un tel \u00e9v\u00e8nement rend indisponible les organisateurs pendant un mois (2heures)\r\n    Le banquet coute 5 \u00e9cus par convive (courtisans pas en mission)", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "Valeur :", 
    "on_start": "cout = folks.filter(mission=None).count() * 5\nif kingdom.money < cout:\n  stop(\"Vous n'avez pas les moyens d'organiser un banquet de cette envergure, il vous couterait :\"+unicode(cout))\nif sum_stats(grids[\"organisateurs\"], \"diplomacy\") < 19:\n  stop(\"Il vous faudra davantages de personnes pour organiser un banquet de cette envergure.\")\nkingdom.money -= cout\nkingdom.save()\n\npe = kingdom.create_pending_event(\"banquet\")\npe.set_value(\"raison\", \"initiative\")\npe.start()\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 4, 
    "target_description": " ", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 120, 
    "on_cancel": "\n", 
    "slug": "organiser_banquet", 
    "on_init": "\n"
  }
},
{
  "pk": 32, 
  "model": "mission.mission", 
  "fields": {
    "name": "Partie de chasse", 
    "target_list": null, 
    "text": "Emmener quelques hommes courir le gibier\r\n\r\n    Pas de score minimum\r\n    la chasse est dangereuse il est d\u00e9j\u00e0 arriv\u00e9 que quelques non initi\u00e9s soient bless\u00e9s. Les courtisans que vous accompagneront lors de cet \u00e9v\u00e9nement vous seront certainement plus loyaux\r\n    cout 3/personne dans la mission", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "Valeur :", 
    "on_start": "cout = (len(grids['chasseurs']) + 1) * 3\nif kingdom.money < cout:\n  stop(\"Vous n'avez pas assez d'argent pour lancer cette mission, elle coute \" + unicode(cout))\nkingdom.money -= cout\nkingdom.save()\n\npe = kingdom.create_pending_event(\"chasse\")\npe.set_value(\"chasseurs\", grids['chasseurs'])\npe.start()\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 4, 
    "target_description": " ", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 10, 
    "on_cancel": "\n", 
    "slug": "chasse", 
    "on_init": "\n"
  }
},
{
  "pk": 35, 
  "model": "mission.mission", 
  "fields": {
    "name": "Marcher sur les bandits", 
    "target_list": null, 
    "text": "Envoyez tous vos hommes valides pour optimiser vos chances. Vos gens ne bougeront m\u00eame pas le petit doigt si vous et votre conn\u00e9table ne partez pas en combat.", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "", 
    "on_start": "if kingdom.get_folk_in_title(\"chatelain\") not in grids['defenseurs'] or kingdom.get_folk_in_title(\"connetable\") not in grids['defenseurs']:\n  stop(\"Le ch\u00e2telain et le conn\u00e9table se doivent de participer \u00e0 cette mission\")\n\ncombattants = grids['defenseurs'][0:]\ncombattants.remove(folks[0])\ncombattant = random_in(combattants)\nif combattant.fight > 8:\n  intrepide = True\n  fleche = False\nelse:\n  intrepide = False\n  fleche = True\n\npe = kingdom.create_pending_event(\"tuto_bandits_bataille\")\npe.set_value(\"somme_fight\", sum_stats(grids['defenseurs'], \"fight\"))\npe.set_value(\"combattant\", combattant)\npe.set_value(\"intrepide\", intrepide)\npe.set_value(\"fleche\", fleche)\npe.start()\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 2, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": false, 
    "duration": 7, 
    "on_cancel": "\n", 
    "slug": "tuto_bandits_attaque", 
    "on_init": "\n"
  }
},
{
  "pk": 37, 
  "model": "mission.mission", 
  "fields": {
    "name": "Recruter des hommes d'arme", 
    "target_list": "\n", 
    "text": "Recruter des soldats (fait perdre des paysans)", 
    "has_value": false, 
    "on_resolution": "delta = param.get_value(\"delta\")\nkingdom.soldiers += delta\nkingdom.save\nkingdom.message(\"%s soldats ont rejoint votre cour. Vous \u00eates maintenant \u00e0 la t\u00eate d'une arm\u00e9e de %s soldats.\" % (delta, kingdom.soldiers))\n", 
    "value_description": "", 
    "on_start": "POURCENTAGE_MAX_MISSION_RECRUTEMENT = 5\ndelta = sum_stats(affected, 'fight') / 3\n\n# On ne peut pas d\u00e9passer le max de troupes possible\nmax_troupes = call_function('get_max_soldats', kingdom=kingdom)\ndelta = min(delta, max_troupes - kingdom.soldiers)\n\n# On ne peut pas gagner plus de 5% de la population maximale en une fois\nmax_population = call_function('get_max_population', kingdom=kingdom)\nmax_gain_soldats = max_population * POURCENTAGE_MAX_MISSION_RECRUTEMENT / 100\ndelta = min(delta, max_gain_soldats)\n\n# On ne peut pas avoir un nombre n\u00e9gatif de paysans !\ndelta = min(delta, kingdom.population)\n\n# On ne peut perdre plus d'argents que notre tr\u00e9sorerie actuelle\ndelta = min(delta, kingdom.money)\n\nkingdom.money -= delta\nkingdom.population -= delta\nkingdom.save()\n\nparam.set_value(\"delta\", delta)\n\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 2, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 360, 
    "on_cancel": "\n", 
    "slug": "recruter_troupes", 
    "on_init": "\n"
  }
},
{
  "pk": 38, 
  "model": "mission.mission", 
  "fields": {
    "name": "Renvoyer des hommes d'arme", 
    "target_list": "\n", 
    "text": "Renvoyer des soldats. Ils deviendront paysans.", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "", 
    "on_start": "POURCENTAGE_MAX_MISSION_RECRUTEMENT = 5\ndelta = sum_stats(affected, 'scholarship') / 3\n\n# On ne peut pas avoir un nombre n\u00e9gatif de soldats !\ndelta = min(delta, kingdom.soldiers)\n\nkingdom.soldiers -= delta\nkingdom.population += delta\nkingdom.save()\n\nkingdom.message(\"%s soldats ont l\u00e2ch\u00e9s leurs armes pour se reconvertir en paysans. Vous \u00eates maintenant \u00e0 la t\u00eate d'une arm\u00e9e de %s soldats.\" % (delta, kingdom.soldiers))\n\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 2, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 20, 
    "on_cancel": "\n", 
    "slug": "renvoyer", 
    "on_init": "\n"
  }
},
{
  "pk": 39, 
  "model": "mission.mission", 
  "fields": {
    "name": "D\u00e9signer un mentor", 
    "target_list": "\n", 
    "text": "Donner \u00e0 votre filleul un mentor pour l'\u00e9duquer.", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "", 
    "on_start": "grids['enfant'][0].mentor = grids['mentor'][0]\ngrids['enfant'][0].save()\n\npe = kingdom.create_pending_event(\"education\")\npe.set_value('pupil', grids['enfant'][0])\npe.set_value('mentor', grids['mentor'][0])\npe.start()\n\nkingdom.unlock_mission(\"nommer_mentor\")\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 4, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 0, 
    "on_cancel": "\n", 
    "slug": "tuto_nommer_mentor", 
    "on_init": "\n"
  }
},
{
  "pk": 40, 
  "model": "mission.mission", 
  "fields": {
    "name": "Casus belli", 
    "target_list": "\n", 
    "text": "R\u00e9cup\u00e9rer un casus belli sur mon adversaire.", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "", 
    "on_start": "if sum_stats(affected, \"diplomacy\") < 20:\n  stop(\"Il va falloir \u00eatre un peu plus diplomate\")\n\nkingdom.set_value(\"tuto_has_claim\", True)\nkingdom.start_pending_event(\"tuto_casusbelli_success\")\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 6, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": false, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "tuto_claim", 
    "on_init": "\n"
  }
},
{
  "pk": 41, 
  "model": "mission.mission", 
  "fields": {
    "name": "Escarmouche", 
    "target_list": null, 
    "text": "Cocorico.\r\nTabasser mon PNJ \u00e0 la batte.", 
    "has_value": false, 
    "on_resolution": "kingdom.soldiers += param.get_value('retour_troupes')\n", 
    "value_description": "", 
    "on_start": "# Mise en forme des param\u00e8tres \u00e0 passer aux fonctions de calcul\nattaquant = {\n  'troupes': int(C.POURCENTAGE_SOLDATS_ESCARMOUCHE * kingdom.soldiers / 100),\n  'combattants': affected,\n  'population': kingdom.population,\n  'prestige': kingdom.prestige,\n}\n\n# R\u00e9cuperer les cinq meilleurs combattants de l'attaquant\ndate_majorite = datetime.now() - timedelta(days=C.MAJORITE)\ncinq_meilleurs = kingdom.folk_set.filter(sex=Folk.MALE, disabled=False, birth__lte=date_majorite).order_by('-fight')[0:5]\nmoyenne_meilleurs_fight = avg_stats(cinq_meilleurs, 'fight')\n\ncombattants = [Folk(fight=moyenne_meilleurs_fight), Folk(fight=moyenne_meilleurs_fight), Folk(fight=moyenne_meilleurs_fight)]\nmap(lambda f: f.save(), combattants)\ntype_adversaire = kingdom.get_value(\"tuto_type_PNJ\", 'piquier')\ncombattants[0].add_quality(type_adversaire)\ncombattants[1].add_quality(type_adversaire)\ncombattants[2].add_quality(random_in(['piquier', 'cavalier', 'archer']))\n\ndefenseur = {\n  # Dans le cadre du tuto,\n  # Les troupes du d\u00e9fenseur correspondent \u00e0 80% des troupes maximales disponibles pour ce Kingdom\n  'troupes': int(C.POURCENTAGE_SOLDATS_ESCARMOUCHE * 0.8 * C.POURCENTAGE_MAX_SOLDATS_PASSIF * call_function(\"get_max_population\", kingdom=kingdom) / (100 * 100)),\n  'combattants': combattants,\n  'population': kingdom.prestige * 2,\n  'prestige': kingdom.prestige,\n}\n\n# Fonctions pour calculer ce qu'il se passe sans appliquer\ngagnant, perdant, bataille = f(\"determiner_vainqueur_combat\", attaquant=attaquant, defenseur=defenseur)\nis_victory = gagnant == attaquant\ndelta = f(\"determiner_modifications_combat\", gagnant=gagnant, perdant=perdant, marge=bataille['marge'], attaquant_est_gagnant=is_victory)\nif is_victory:\n  commandement = {\n    'gagnant': f(\"leader_de_mission\", royaume=kingdom, list_folk=affected),\n    'perdant':\n    {\n      'chatelain': False,\n      'connetable': False,\n      'general': random_in(combattants),\n    },\n  }\nelse:\n  commandement = {\n    'gagnant':\n    {\n      'chatelain': False,\n      'connetable': False,\n      'general': random_in(combattants),\n    },\n    'perdant': f(\"leader_de_mission\", royaume=kingdom, list_folk=affected),\n  }\n\n# Application gain_prestige\nif is_victory:\n  kingdom.prestige += delta['gagnant']['prestige']\nelse:\n  kingdom.prestige += delta['perdant']['prestige']\nkingdom.save()\n\n# D\u00e9termination prochain event\nif not kingdom.get_value(\"tuto_firstbattle_attack\"):\n  pe = kingdom.create_pending_event(\"tuto_firstbattle_attack\")\nelif is_victory:\n  pe = kingdom.create_pending_event(\"escarmouche_victoire\")\nelse:\n  pe = kingdom.create_pending_event(\"escarmouche_defaite\")\n\n# Tuer les gens qui ne sont pas de la famille r\u00e9gnante, blesser tous les bless\u00e9s\nchatelain = kingdom.get_folk_in_title('chatelain')\nfamille = chatelain.last_name\nfor mort in delta['A_tuer']:\n  if mort.last_name != famille:\n    try:\n      f(\"tuer_folk\", condamne=mort)\n    except:\n      pass\n  else:\n    try:\n      gagnant['morts'].remove(mort)\n    except:\n      pass\n    try:\n      perdant['morts'].remove(mort)\n    except:\n      pass\nfor blesse in delta['A_blesser']:\n  if blesse != chatelain:\n    blesse.add_quality(\"blesse\")\n  else:\n    try:\n      gagnant['blesses'].remove(mort)\n    except:\n      pass\n    try:\n      perdant['blesses'].remove(mort)\n    except:\n      pass\n    perdant['blesses'].exclude(mort)\n\n\n# Passage d'arguments\npe.set_value(\"is_victory\", is_victory)\npe.set_value(\"attaquant\", True)\npe.set_value(\"gagnant\", gagnant)\npe.set_value(\"perdant\", perdant)\npe.set_value(\"liste_perdant\", f(\"liste_nom_avec_specialite\", commandants=perdant['combattants']))\npe.set_value(\"liste_gagnant\", f(\"liste_nom_avec_specialite\", commandants=gagnant['combattants']))\npe.set_value(\"delta\", delta)\npe.set_value(\"bataille\", bataille)\npe.set_value(\"commandement\", commandement)\npe.set_value(\"target_dynasty\", kingdom.get_value(\"tuto_adversaire\"))\npe.set_value(\"tuto\", True)\npe.start()\n\n\n# gain thune en cas de pillage\nif is_victory:\n  kingdom.money += delta['gagnant']['thune']\n\n# pertes de soldats\nif is_victory:\n  kingdom.soldiers -= gagnant['troupes']\n  kingdom.set_value('total_soldats', kingdom.get_value('total_soldats') - delta['gagnant']['pertes_troupe'])\n  param.set_value('retour_troupes', gagnant['troupes'] - delta['gagnant']['pertes_troupe'])\nelse:\n  kingdom.soldiers -= perdant['troupes']\n  kingdom.set_value('total_soldats', kingdom.get_value('total_soldats') - delta['perdant']['pertes_troupe'])\n  param.set_value('retour_troupes', perdant['troupes'] - delta['perdant']['pertes_troupe'])\n\nkingdom.save()\n\nmap(lambda f: f.delete(), combattants)\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 2, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "tuto_escarmouche", 
    "on_init": "\n"
  }
},
{
  "pk": 42, 
  "model": "mission.mission", 
  "fields": {
    "name": "Achever votre adversaire", 
    "target_list": null, 
    "text": "On a localis\u00e9 les toilettes favorites du seigneur adverse !\r\nOn se cache derri\u00e8re la porte avec une hache....\r\n\r\n\r\n\r\n... ET BIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIM", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "", 
    "on_start": "if kingdom.get_folk_in_title(\"chatelain\") not in grids[\"attaquants\"]:\n  stop(\"Le ch\u00e2telain doit faire partie de la mission\")\n\nkingdom.start_pending_event(\"tuto_fin_tuto\")\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 2, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": false, 
    "duration": 0, 
    "on_cancel": "\n", 
    "slug": "tuto_achever_voisin", 
    "on_init": "\n"
  }
},
{
  "pk": 43, 
  "model": "mission.mission", 
  "fields": {
    "name": "D\u00e9finir sa d\u00e9fense", 
    "target_list": null, 
    "text": "D\u00e9finir les personnes qui prendront la d\u00e9fense de mon ch\u00e2teau en cas d'attaque. Les bless\u00e9s ne seront pas pris en compte tant qu'ils ne seront pas soign\u00e9s, toute personne qui ira dans une mission sera retir\u00e9e de cette liste. ", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "", 
    "on_start": "\n", 
    "has_target": false, 
    "is_team": true, 
    "title": 2, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": false, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "ligne_defense", 
    "on_init": "\n"
  }
},
{
  "pk": 44, 
  "model": "mission.mission", 
  "fields": {
    "name": "Espionner une arm\u00e9e", 
    "target_list": null, 
    "text": "Rechercher combien cet adversaire potentiel a d'archers, de piquiers, de cavaliers,  de soldats et entre z\u00e9ro et deux descriptions d'hommes pr\u00e9sents dans la ligne de d\u00e9fense adverse. Plus l'attaque est \u00e9lev\u00e9e par rapport \u00e0 la d\u00e9fense, plus les informations sont pr\u00e9cises et justes.\r\n\r\n    cout 10,\r\n    la d\u00e9fense de l'espionnage d\u00e9pend de l'intrigue du royaume que vous visez.\r\n    La d\u00e9fense est compos\u00e9e \u00e0 :\r\n    -6% : diplomatie du ch\u00e2telain\r\n    -24% : diplomatie de l'ambassadeur\r\n    -70% : moyenne des diplomatie des courtisans qui ne sont pas dans des missions\r\n    attaque = moyenne des diplomatie des courtisans dans la mission\r\n    dur\u00e9e de la mission : 1 mois (2heures de temps r\u00e9el)", 
    "has_value": false, 
    "on_resolution": "cout = 10\nif kingdom.money < cout:\n  stop(\"Vous n'avez pas assez d'argent pour lancer cette mission, elle coute \" + unicode(cout))\nkingdom.money -= cout\nkingdom.save()\n\ndef randomize_stat(value, marge, maximum=20):\n  min_error = C.POURCENTAGE_ERREUR_MIN_ESPIONNAGE\n  max_error = C.POURCENTAGE_ERREUR_MAX_ESPIONNAGE\n  stat = int(min(maximum, value * (100 + random_value(-max(min_error, (100 - marge) * (100 - marge) * max_error / 10000), max(min_error, (100 - marge) * (100 - marge) * max_error / 10000))) / 100))\n  return stat\n\n\ndef randomize_number(value, marge):\n  min_error = C.POURCENTAGE_ERREUR_MIN_ESPIONNAGE\n  max_error = C.POURCENTAGE_ERREUR_MAX_ESPIONNAGE\n  number = int(value * (100 + random_value(-max(min_error, (100 - marge) * (100 - marge) * max_error / 10000), max(min_error, (100 - marge) * (100 - marge) * max_error / 10000))) / 100)\n  return number\n\n# Notre valeur d'intrigue\nattack = avg_stats(grids['espions'], 'plot')\nif kingdom.get_folk_in_title(\"maitre_espion\") in grids['espion']:\n  attack += 2  # bonus maitre_espion\n\n# Carac du maitre espion adverse\nintrigue_maitre_espion = 0\ntry:\n  intrigue_maitre_espion = target.get_folk_in_title(\"maitre_espion\").plot\nexcept:\n  pass\n\n# Carac du chatelain adverse\nintrigue_chatelain = 0\ntry:\n  intrigue_chatelain = target.get_folk_in_title(\"chatelain\").plot\nexcept:\n  pass\n\n# R\u00e9cup\u00e9rer la moyenne de l'intrigue des personnes majeures dans la cour adverse qui ne sont pas en mission\ndef_folks = target.folk_set.filter(mission=None, birth__gte=datetime.now() - timedelta(days=C.MAJORITE))\nmoyenne_cour = avg_stats(def_folks, \"plot\")\n\n# Calcul final.\ndefense = 0.3 * (4 * intrigue_maitre_espion + intrigue_chatelain) / 5 + 0.7 * moyenne_cour\n\nif defense > attack * 2:\n  pe = kingdom.create_pending_event(\"resultat_espionnage_echec\")\n  pe.set_value(\"target\", target)\n  pe.start()\nelse:\n  marge = min(100, 100 * 4 / float(3) * 1 / float(2) * (1 + ((attack - defense) / float((attack + defense)))))\n  soldiers = randomize_number(target.soldiers, marge)\n  cavaliers = randomize_number(Folk.objects.filter(kingdom=target, quality_set__name=\"cavalier\").count(), marge)\n  archers = randomize_number(Folk.objects.filter(kingdom=target, quality_set__name=\"archers\").count(), marge)\n  piquiers = randomize_number(Folk.objects.filter(kingdom=target, quality_set__name=\"piquiers\").count(), marge)\n  choice_folks = random_value(1, 10)\n  defenseurs = []\n  tab_defenseurs = []\n  if False:\n  # if choice_folks < 7 :\n    defenseurs = target.get_team(\"ligne_defense\")[\"affected\"]\n    import random\n    random.shuffle(defenseurs)\n    defenseurs = defenseurs[0:1]\n  else:\n  # elif choice_folks < 9:\n    defenseurs = target.get_team(\"ligne_defense\")[\"affected\"]\n    import random\n    random.shuffle(defenseurs)\n    defenseurs = defenseurs[0:2]\n\n  for folk in defenseurs:\n    title = False\n    try:\n      title = folk.title.title.name\n    except:\n      pass\n    tab_defenseurs.append([folk.first_name + \" \" + folk.last_name, title, randomize_stat(folk.fight, marge), randomize_stat(folk.plot, marge), randomize_stat(folk.diplomacy, marge), randomize_stat(folk.scholarship, marge), randomize_stat(folk.loyalty, marge, 100), folk.quality_set.all()])\n\n  pe = kingdom.create_pending_event(\"resultat_espionnage_troupes\")\n\n  pe.set_value(\"soldiers\", soldiers)\n  pe.set_value(\"archers\", archers)\n  pe.set_value(\"piquiers\", piquiers)\n  pe.set_value(\"cavaliers\", cavaliers)\n  pe.set_value(\"defenseurs\", tab_defenseurs)\n  pe.start()\n", 
    "value_description": "", 
    "on_start": "\n", 
    "has_target": true, 
    "is_team": false, 
    "title": 5, 
    "target_description": "Chateau \u00e0 observer", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 120, 
    "on_cancel": "\n", 
    "slug": "espionner_troupes", 
    "on_init": "\n"
  }
},
{
  "pk": 45, 
  "model": "mission.mission", 
  "fields": {
    "name": "Espionner une cour", 
    "target_list": null, 
    "text": "Rechercher combien cet adversaire potentiel a de paysans, d'\u00e9cus disponibles dans ses caisses et les caract\u00e9ristiques des personnages cl\u00e9 de sa cour. Plus l'attaque est \u00e9lev\u00e9e par rapport \u00e0 la d\u00e9fense, plus les informations sont pr\u00e9cises et justes.\r\n\r\n    cout 10,\r\n    la d\u00e9fense de l'espionnage d\u00e9pend de l'intrigue du royaume que vous visez.\r\n    La d\u00e9fense est compos\u00e9e \u00e0 :\r\n    -6% : diplomatie du ch\u00e2telain\r\n    -24% : diplomatie de l'ambassadeur\r\n    -70% : moyenne des diplomatie des courtisans qui ne sont pas dans des missions\r\n    attaque = moyenne des diplomatie des courtisans dans la mission\r\n    dur\u00e9e de la mission : 1 mois (2heures de temps r\u00e9el)", 
    "has_value": false, 
    "on_resolution": "cout = 10\nif kingdom.money < cout:\n  stop(\"Vous n'avez pas assez d'argent pour lancer cette mission, elle coute \" + unicode(cout))\nkingdom.money -= cout\nkingdom.save()\n\ndef randomize_stat(value, marge, maximum=20):\n  min_error = C.POURCENTAGE_ERREUR_MIN_ESPIONNAGE\n  max_error = C.POURCENTAGE_ERREUR_MAX_ESPIONNAGE\n  return int(min(maximum, value * (100 + random_value(-max(min_error, (100 - marge) * (100 - marge) * max_error / 10000), max(min_error, (100 - marge) * (100 - marge) * max_error / 10000))) / 100))\n\n\ndef randomize_number(value, marge):\n  min_error = C.POURCENTAGE_ERREUR_MIN_ESPIONNAGE\n  max_error = C.POURCENTAGE_ERREUR_MAX_ESPIONNAGE\n  return int(value * (100 + random_value(-max(min_error, (100 - marge) * (100 - marge) * max_error / 10000), max(min_error, (100 - marge) * (100 - marge) * max_error / 10000))) / 100)\n\n# Notre valeur d'intrigue\nattack = avg_stats(grids['espions'], 'plot')\nif kingdom.get_folk_in_title(\"maitre_espion\") in grids['espion']:\n  attack += 2  # bonus maitre_espion\n\n# Carac du maitre espion adverse\nintrigue_maitre_espion = 0\ntry:\n  intrigue_maitre_espion = target.get_folk_in_title(\"maitre_espion\").plot\nexcept:\n  pass\n\n# Carac du chatelain adverse\nintrigue_chatelain = 0\ntry:\n  intrigue_chatelain = target.get_folk_in_title(\"chatelain\").plot\nexcept:\n  pass\n\n# R\u00e9cup\u00e9rer la moyenne de l'intrigue des personnes majeures dans la cour adverse qui ne sont pas en mission\ndef_folks = target.folk_set.filter(mission=None, birth__gte=datetime.now() - timedelta(days=C.MAJORITE))\nmoyenne_cour = avg_stats(def_folks, \"plot\")\n\n# Calcul final.\ndefense = 0.3 * (4 * intrigue_maitre_espion + intrigue_chatelain) / 5 + 0.7 * moyenne_cour\n\n\nif defense > attack * 2:\n  pe = kingdom.create_pending_event(\"resultat_espionnage_echec\")\n  pe.set_value(\"target\", target)\n  pe.start()\nelse:\n  marge = min(100, 100 * 4 / 3 / 2 * (1 + (attack - defense) / (attack + defense)))\n  money = randomize_number(target.money, marge)\n  population = randomize_number(target.population, marge)\n\n  folks_titled = []\n  titles = {\n    'ambassadeur': 'diplomacy',\n    'connetable': 'fight',\n    'maitre_espion': 'plot',\n  }\n\n  for title in titles.keys():\n    values = []\n    folk = target.get_folk_in_title(title)\n    if folk is not None:\n      values.append(folk)\n      values.append(Title.objects.get(slug=title).name)\n      values.append(randomize_stat(getattr(folk, titles[title]), marge))\n      folks_titled.append(values)\n\n  pe = kingdom.create_pending_event(\"resultat_espionnage_chateau\")\n  pe.set_value(\"folks_titled\", folks_titled)\n  pe.set_value(\"gold\", money)\n  pe.set_value(\"population\", population)\n  pe.start()\n", 
    "value_description": "", 
    "on_start": "\n", 
    "has_target": true, 
    "is_team": false, 
    "title": 5, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 120, 
    "on_cancel": "\n", 
    "slug": "espionner_chateau", 
    "on_init": "\n"
  }
},
{
  "pk": 47, 
  "model": "mission.mission", 
  "fields": {
    "name": "Recruter un chevalier", 
    "target_list": "\n", 
    "text": "Envoyer des missionnaire recruter un chevalier\r\n\r\nseuil 24", 
    "has_value": false, 
    "on_resolution": "age = random_gauss(16, 40)\n\nmax_carac = 32 + int((age - 16) / 5)\n# liste des traits qu'il poss\u00e8de (en plus des traits random)\nqualities = []\nqualities.append(random_in([\"archer\", \"cavalier\", \"piquier\"]))\n# liste des traits qu'il ne peut pas avoir\nno_qualities = []\n\nloyalty = 50 + 30 * int((sum_stats(affected, \"diplomacy\") - 23) / 37) + random_value(-10, 10)\nchevalier = f(\"creer_folk\", kingdom=None, fight_min=7, plot_min=1, diplomacy_min=1, scholarship_min=1, loyalty=loyalty, max_carac=max_carac, sex=Folk.MALE, birth=datetime.now() - timedelta(days=age), traits=qualities, notraits=no_qualities)\npe = kingdom.create_pending_event(\"allegeance_chevalier\")\npe.set_value(\"chevalier\", chevalier)\npe.start()\n", 
    "value_description": "", 
    "on_start": "cout = 15 + 10 * len(affected)\nif kingdom.money < cout:\n  statut = \"Vous n'avez pas les moyen de lancer cette mission.\"\n  stop()\n\nbonus = 0\nif kingdom.get_folk_in_title(\"ambassadeur\") in affected:\n  bonus += 4\nif sum_stats(affected, \"diplomacy\") + bonus < 24:\n  stop(\"Il vous faudra une plus grande force de persuasion pour recruter un chevalier.\")\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 6, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 360, 
    "on_cancel": "\n", 
    "slug": "recruter_chevalier", 
    "on_init": "\n"
  }
},
{
  "pk": 48, 
  "model": "mission.mission", 
  "fields": {
    "name": "Demander un pr\u00eatre", 
    "target_list": null, 
    "text": "Mander un pr\u00eatre \u00e0 l'\u00e9v\u00e9ch\u00e9\r\n", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "", 
    "on_start": "cout = 10 + 5 * len(affected)\nif kingdom.money < cout:\n  stop(\"Vous n'avez pas les moyens de lancer cette mission.\")\n\nkingdom.money -= cout\nkingdom.save()\nbonus = 0\n\nif kingdom.get_folk_in_title(\"cure\") in affected:\n  bonus += 4\nif sum_stats(affected, \"scholarship\") + bonus < 22:\n  stop(\"Un plus grand score d'erudition est necessaire pour convaincre l'\u00e9v\u00each\u00e9.\")\n\nage = random_gauss(16, 40)\nmax_carac = 32 + int((age - 16) / 5)\n# liste des traits qu'il poss\u00e8de (en plus des traits random)\nqualities = []\nqualities.append(\"pretre\")\n# liste des traits qu'il ne peut pas avoir\nno_qualities = []\n\nloyalty = 50 + 30 * int((sum_stats(affected, \"scholarship\") - 23) / 37) + random_value(-10, 10)\n\npretre = f(\"creer_folk\", kingdom=None, fight_min=2, plot_min=4, diplomacy_min=4, scholarship_min=7, loyalty=loyalty, max_carac=max_carac, sex=Folk.MALE, birth=datetime.now() - timedelta(days=age), traits=qualities, notraits=no_qualities)\n\npe = kingdom.create_pending_event(\"allegeance_pretre\")\npe.set_value(\"pretre\", pretre)\npe.start()\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 3, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 60, 
    "on_cancel": "\n", 
    "slug": "recruter_pretre", 
    "on_init": "\n"
  }
},
{
  "pk": 49, 
  "model": "mission.mission", 
  "fields": {
    "name": "Querir une noble dame", 
    "target_list": "\n", 
    "text": "Partir recruter une dame", 
    "has_value": false, 
    "on_resolution": "age = random_gauss(16, 40)\nmax_carac = 32 + int((age - 16) / 5)\n# liste des traits qu'il poss\u00e8de (en plus des traits random)\nqualities = []\nchoix_baisee = (40 - age) / 24 * 100\nif choix_baisee <= random_value(1, 100):\n  qualities.append(\"jouvancelle\")\n# liste des traits qu'il ne peut pas avoir\nno_qualities = []\n\n\nloyalty = 50 + 30 * int((sum_stats(affected, \"diplomacy\") - 23) / 37) + random_value(-10, 10)\n\ndame = f(\"creer_folk\", kingdom=None, fight_min=2, plot_min=2, diplomacy_min=2, scholarship_min=2, loyalty=loyalty, max_carac=max_carac, sex=Folk.FEMALE, birth=datetime.now() - timedelta(days=age), traits=qualities, notraits=no_qualities)\n\npe = kingdom.create_pending_event(\"allegeance_dame\")\npe.set_value(\"dame\", dame)\npe.start()\n", 
    "value_description": "", 
    "on_start": "cout = 15 + 10 * len(affected)\nif kingdom.money < cout:\n  statut = \"Vous n'avez pas les moyen de lancer cette mission.\"\n  stop()\n\nbonus = 0\nif kingdom.get_folk_in_title(\"ambassadeur\") in affected:\n  bonus += 4\nif sum_stats(affected, \"diplomacy\") + bonus < 24:\n  stop(\"Il vous faudra une plus grande force de persuasion pour qu'une noble dame accepte de vous rejoindre.\")\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 6, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 360, 
    "on_cancel": "\n", 
    "slug": "recruter_dame", 
    "on_init": "\n"
  }
},
{
  "pk": 50, 
  "model": "mission.mission", 
  "fields": {
    "name": "Accepter un courtisan", 
    "target_list": null, 
    "text": "Ouvrir les portes de mon ch\u00e2teau et laisser entrer le premier venu\r\n\r\n    cout : 10\r\n    dur\u00e9e : 1 mois\r\n    un nouveau courtisan tir\u00e9 al\u00e9atoirement rejoint votre cour", 
    "has_value": false, 
    "on_resolution": "age = random_gauss(16, 40)\nmax_carac = 32 + int((age - 16) / 5)\nloyalty = 50 + 30 * int((sum_stats(affected, \"diplomacy\") - 15) / 25) + random_value(-10, 10)\nqualities = []\n\nchoice_folk = random_value(0, 99)\nif choice_folk < 5:\n  # pretre\n\n  qualities.append(\"pretre\")\n  # liste des traits qu'il ne peut pas avoir\n  no_qualities = []\n  folk = f(\"creer_folk\", kingdom=None, fight_min=2, plot_min=4, diplomacy_min=4, scholarship_min=7, loyalty=loyalty, max_carac=max_carac, sex=Folk.MALE, birth=datetime.now() - timedelta(days=age), traits=qualities)\nelif choice_folk < 15:\n  # noble dame\n  choix_baisee = (40 - age) / 24 * 100\n  if choix_baisee <= random_value(1, 100):\n    qualities.append(\"jouvancelle\")\n  # liste des traits qu'il ne peut pas avoir\n  no_qualities = []\n  folk = f(\"creer_folk\", kingdom=None, fight_min=2, plot_min=2, diplomacy_min=2, scholarship_min=2, loyalty=loyalty, max_carac=max_carac, sex=Folk.FEMALE, birth=datetime.now() - timedelta(days=age), traits=qualities)\nelif choice_folk < 25:\n  # chevalier\n  if random_value(1, 100) < (40 - age) / 24 * 100:  # il a alors un trait martial\n    qualities.append(random_in([\"archer\", \"cavalier\", \"piquier\"]))\n  folk = f(\"creer_folk\", kingdom=None, fight_min=7, plot_min=1, diplomacy_min=1, scholarship_min=1, loyalty=loyalty, max_carac=max_carac, sex=Folk.MALE, birth=datetime.now() - timedelta(days=age), traits=qualities)\nelse:  # random folk\n  folk = f(\"creer_folk\", kingdom=None, fight_min=7, plot_min=1, diplomacy_min=1, scholarship_min=1, loyalty=loyalty, max_carac=max_carac, sex=Folk.MALE, birth=datetime.now() - timedelta(days=age), traits=qualities)\n\npe = kingdom.create_pending_event(\"nouveau_courtisan\")\npe.set_value(\"folk\", folk)\npe.start()\n", 
    "value_description": "", 
    "on_start": "if kingdom.money < 10:\n  stop(\"Vous n'avez pas assez d'argent pour lancer cette mission\")\nkingdom.money -= 10\nkingdom.save()\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 4, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 120, 
    "on_cancel": "\n", 
    "slug": "accepter_courtisan", 
    "on_init": "\n"
  }
},
{
  "pk": 51, 
  "model": "mission.mission", 
  "fields": {
    "name": "Compromettre", 
    "target_list": null, 
    "text": "Charger quelques courtisans de compromettre discr\u00e8tement un membre de ma cour. \r\n\r\n    cout : 5 + 5 par personne envoy\u00e9e\r\n    d\u00e9fense de la cible : (son intrique + sa diplomatie) x 1.5\r\n    l'attaque doit \u00eatre au moins \u00e9gale \u00e0 la d\u00e9fense pour optimiser les chances, mais ne pourra jamais \u00eatre s\u00fbre.\r\n", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "", 
    "on_start": "cout_mission = 5 + 5 * len(grids['comprometeurs'])\nif kingdom.money < cout_mission:\n  stop(\"Nous n'avez pas assez d'argent pour lancer cette mission (\" + unicode(cout_mission) + \" \u00e9cus).\")\n\ncomprometeurs = grids['comprometeurs']\ncout_mission = 5 + 5 * len(comprometeurs)\nkingdom.money -= cout_mission\nkingdom.save()\ncompromis = grids['compromis'][0]\n\ndefense = (compromis.plot + compromis.diplomacy) * 1.5\nattaque = sum_stats(folks, 'plot')\nif kingdom.get_folk_in_title(\"maitre_espion\") in comprometeurs:\n  attaque += 5\nreussite = min(attaque / defense, 1) * 100 - 10\nif 100 - reussite < random_value(1, 100):\n  # R\u00e9ussite\n  pe = kingdom.create_pending_event(\"compromettre_success\")\n\n  if compromis.has_quality(\"admire\"):\n    compromis.remove_quality(\"admire\")\n    compromis.add_quality(\"respecte\")\n    pe.set_value(\"lost\", \"admir\u00e9\")\n    pe.set_value(\"got\", \"respect\u00e9\")\n  elif compromis.has_quality(\"respecte\"):\n    compromis.remove_quality(\"respecte\")\n    pe.set_value(\"lost\", \"respect\u00e9\")\n    pe.set_value(\"got\", None)\n  elif compromis.has_quality(\"meprise\"):\n    compromis.remove_quality(\"meprise\")\n    compromis.add_quality(\"deteste\")\n    pe.set_value(\"lost\", \"m\u00e9pris\u00e9\")\n    pe.set_value(\"got\", \"d\u00e9test\u00e9\")\n  else:\n    compromis.add_quality(\"meprise\")\n    pe.set_value(\"lost\", None)\n    pe.set_value(\"got\", \"m\u00e9pris\u00e9\")\n\n  pe.set_value(\"target\", compromis)\n  pe.set_value(\"comprometeurs\", comprometeurs)\n\n  pe.start()\nelse:\n  if reussite + 9 < random_value(1, 100):\n    # gros echec\n    def perte(facteur, kingdom=kingdom, comprometeurs=comprometeurs):\n      call_function(\"perte_loyaute_general\", kingdom=kingdom, perte_min=C.PERTE_LOYAUTE_BANNISSEMENT * facteur, perte_max=C.PERTE_LOYAUTE_BANNISSEMENT * facteur)\n      for c in comprometeurs:\n        c.loyalty += C.PERTE_LOYAUTE_BANNISSEMENT * facteur\n        c.save()\n      return C.PERTE_LOYAUTE_BANNISSEMENT * facteur\n\n    perte_loyaute = 0\n\n    if compromis.has_quality(\"admire\"):\n      perte_loyaute -= perte(2)\n    elif compromis.has_quality(\"respecte\"):\n      perte_loyaute -= perte(1.5)\n    else:\n      perte_loyaute -= perte(1)\n\n    pe = kingdom.create_pending_event(\"compromettre_big_failure\")\n    pe.set_value(\"target\", compromis)\n    pe.set_value(\"comprometeurs\", comprometeurs)\n    pe.set_value(\"perte\", perte_loyaute)\n    pe.start()\n\n  else:\n    # echec simple\n    pe = kingdom.create_pending_event(\"compromettre_failure\")\n    pe.set_value(\"target\", compromis)\n    pe.set_value(\"comprometeurs\", comprometeurs)\n    pe.start()\n# le compromis peut faire quelque chose d'autre\ncompromis.mission.delete()\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 5, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 60, 
    "on_cancel": "\n", 
    "slug": "compromettre", 
    "on_init": "\n"
  }
},
{
  "pk": 52, 
  "model": "mission.mission", 
  "fields": {
    "name": "Espionner l'adversaire", 
    "target_list": "\n", 
    "text": "mission pour espionner le PNJ", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "", 
    "on_start": "kingdom.start_pending_event(\"tuto_rapport_espion\")", 
    "has_target": false, 
    "is_team": false, 
    "title": 5, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "tuto_espionnage", 
    "on_init": "\n"
  }
},
{
  "pk": 53, 
  "model": "mission.mission", 
  "fields": {
    "name": "Jurer allegeance", 
    "target_list": "param = Kingdom.objects.all()\n", 
    "text": "Jurer all\u00e9geance \u00e0 un royaume et en faire mon suzerain.", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "", 
    "on_start": "if param.target == kingdom:\n  # Selecting yourself means no master.\n  kingdom.set_value('suzerain', None)\n  pe = kingdom.start_pending_event('annuler_allegeance')\nelse:\n  kingdom.set_value('suzerain', param.target)\n  pe = kingdom.create_pending_event('jurer_allegeance')\n  pe.set_value('suzerain', param.target)\n  pe.start()\n", 
    "has_target": true, 
    "is_team": false, 
    "title": 1, 
    "target_description": "Suzerain", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 0, 
    "on_cancel": "\n", 
    "slug": "allegeance", 
    "on_init": "param.target = kingdom.get_value('suzerain')\n"
  }
},
{
  "pk": 54, 
  "model": "mission.mission", 
  "fields": {
    "name": "Escarmouche", 
    "target_list": "# Toutes les personnes sur qui j'ai un claim de niveau >= CLAIM\nparam = Kingdom.objects.exclude(pk=kingdom.pk).filter(offender_set__offended=kingdom, offender_set__level__gte=Claim.CLAIM)\n", 
    "text": "Fi donc, sieur! Ce sera au premier sang. Vous \u00eates l'offens\u00e9, je vous laisse le choix des armes.", 
    "has_value": false, 
    "on_resolution": "kingdom.soldiers += param.get_value('retour_troupes')\n", 
    "value_description": "", 
    "on_start": "# Mise en forme des param\u00e8tres \u00e0 passer aux fonctions de calcul\nattaquant = {\n  'troupes': int(C.POURCENTAGE_SOLDATS_ESCARMOUCHE * kingdom.soldiers / 100),\n  'combattants': affected,\n  'population': kingdom.population,\n  'prestige': kingdom.prestige,\n}\n\ndefenseur = {\n  'troupes': int(C.POURCENTAGE_SOLDATS_ESCARMOUCHE * target.soldiers / 100),\n  'combattants': target.get_team('ligne_defense')['affected'][0:3],\n  'population': target.population,\n  'prestige': target.prestige,\n}\n\n# Calculer ce qu'il se passe sans appliquer\ngagnant, perdant, bataille = f(\"determiner_vainqueur_combat\", attaquant=attaquant, defenseur=defenseur)\nis_victory = gagnant == attaquant\n\n# D\u00e9terminer le delta (pas encore appliqu\u00e9)\ndelta = f(\"determiner_modifications_combat\", gagnant=gagnant, perdant=perdant, marge=bataille['marge'], attaquant_est_gagnant=is_victory)\n\n# Appliquer le delta\nif is_victory:\n  kingdom_pe = kingdom.create_pending_event(\"escarmouche_victoire\")\n  target_pe = target.create_pending_event(\"escarmouche_defaite\")\n  kingdom.soldiers -= attaquant['troupes'] + delta['gagnant']['pertes_troupe']\n  param.set_value('retour_troupes', gagnant['troupes'] - delta['gagnant']['pertes_troupe'])\n  gagnant_kingdom = kingdom\n  perdant_kingdom = target\nelse:\n  kingdom_pe = kingdom.create_pending_event(\"escarmouche_defaite\")\n  target_pe = target.create_pending_event(\"escarmouche_victoire\")\n  param.set_value('retour_troupes', perdant['troupes'] - delta['perdant']['pertes_troupe'])\n  kingdom.soldiers -= attaquant['troupes'] + delta['perdant']['pertes_troupe']\n  gagnant_kingdom = target\n  perdant_kingdom = kingdom\n\ncommandement = {\n  'gagnant': f(\"leader_de_mission\", royaume=gagnant_kingdom, list_folk=affected),\n  'perdant': f(\"leader_de_mission\", royaume=perdant_kingdom, list_folk=defenseur['combattants']),\n}\n\ngagnant_kingdom.prestige += delta['gagnant']['prestige']\ngagnant_kingdom.money += delta['gagnant']['thune']\ngagnant_kingdom.soldiers -= delta['gagnant']['pertes_troupe']\nperdant_kingdom.prestige += delta['perdant']['prestige']\nperdant_kingdom.soldiers -= delta['perdant']['pertes_troupe']\nperdant_kingdom.population -= delta['perdant']['population']\n\ngagnant_kingdom.save()\nperdant_kingdom.save()\n\n# Mettre \u00e0 jour \"total_soldats\"\ngagnant_kingdom.set_value('total_soldats', gagnant_kingdom.get_value('total_soldats') - delta['gagnant']['pertes_troupe'])\nperdant_kingdom.set_value('total_soldats', perdant_kingdom.get_value('total_soldats') - delta['perdant']['pertes_troupe'])\n\n# Passage d'arguments pour l'affichage de l'event\nkingdom_pe.set_value(\"attaquant\", True)\nkingdom_pe.set_value(\"target_dynasty\", target.user.username)\nkingdom_pe.set_value(\"bataille\", bataille)\ntarget_pe.set_value(\"attaquant\", False)\ntarget_pe.set_value(\"target_dynasty\", kingdom.user.username)\n\n# Reverse PRV values\nreversed_prv = []\nfor arr in bataille['PRV']:\n  arr.reverse()\n  reversed_prv.append(arr)\nbataille['PRV'] = reversed_prv\ntarget_pe.set_value(\"bataille\", bataille)\n\n# Apply all values to both pending_event\nvalues = {\n  \"gagnant\": gagnant,\n  \"perdant\": perdant,\n  \"liste_perdant\": f(\"liste_nom_avec_specialite\", commandants=perdant['combattants']),\n  \"liste_gagnant\": f(\"liste_nom_avec_specialite\", commandants=gagnant['combattants']),\n  \"delta\": delta,\n  \"commandement\": commandement\n}\nfor key in values.keys():\n  kingdom_pe.set_value(key, values[key])\n  target_pe.set_value(key, values[key])\nkingdom_pe.start()\ntarget_pe.start()\n\n# Appliquer les blessures et morts\nfor mort in delta['A_tuer']:\n  f(\"tuer_folk\", condamne=mort)\nfor blesse in delta['A_blesser']:\n  blesse.add_quality(\"blesse\")\n\n# Faire tourner le claim\nclaim = kingdom.offended_set.get(offender=target)\nif claim.level == Claim.CLAIM:\n  claim.delete()\n  f('creer_claim', offender=kingdom, offended=target, level=Claim.CLAIM)\n", 
    "has_target": true, 
    "is_team": false, 
    "title": 2, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "escarmouche", 
    "on_init": "\n"
  }
},
{
  "pk": 55, 
  "model": "mission.mission", 
  "fields": {
    "name": "Faire la paix", 
    "target_list": null, 
    "text": "Faire la paix avec un autre joueur.\r\nEnl\u00e8ve les cassus belli et les vendetta que les deux joueurs ont l'un envers l'autre, y compris ceux qui sont lanc\u00e9s mais pas encore effectifs.", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "", 
    "on_start": "def remove_future_claim(kingdom, target):\n  pes = kingdom.pendingevent_set.filter(event__slug__in=[\"getaffront_diplomatie_target_claim_effective\", \"getaffront_diplomatie_kingdom_claim_effective\"])\n  # print \"lol\", pes\n  for pe in pes:\n    # print \"target\", pe.get_value(\"target\"), target\n    if pe.get_value(\"target\") == target:\n      # print \"EQUALS\"\n      pe.delete()\n      return True\n  return False\n\nkingdom = grids[\"moi\"][0].kingdom\ntarget = grids[\"pas_moi\"][0].kingdom\n# R\u00e9cup\u00e9rer les claims en cours entre les deux joueurs et les supprimer\nClaims_en_cours = Claim.objects.filter(offender__in=(kingdom, target), offended__in=(kingdom, target))\nif Claims_en_cours.count() > 0:\n  Claims_en_cours.delete()\nelse:\n# R\u00e9cup\u00e9rer le pending_event associ\u00e9 qui aurait pu d\u00e9clencher un claim\n  C1 = remove_future_claim(kingdom, target)\n  C2 = remove_future_claim(target, kingdom)\n  if not C1 and not C2:\n    stop(\"Vous n'avez aucune raison de vouloir faire la paix\")\n\n# notification au joueur qu'ils ont fait la paix\npe = kingdom.create_pending_event(\"notif_paix\")\npe.set_value(\"nouveau_meilleur_copain\", target)\npe.start()\npe = target.create_pending_event(\"notif_paix\")\npe.set_value(\"nouveau_meilleur_copain\", kingdom)\npe.start()\n", 
    "has_target": false, 
    "is_team": false, 
    "title": null, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "paix", 
    "on_init": "\n"
  }
},
{
  "pk": 56, 
  "model": "mission.mission", 
  "fields": {
    "name": "Envoyer nos diplomates n\u00e9gocier la paix", 
    "target_list": null, 
    "text": "Envoyer nos diplomates faire la paix.", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "", 
    "on_start": "bonus = 0\nif kingdom.get_folk_in_title(\"ambassadeur\") in affected:\n  bonus += 5\nif sum_stats(affected, \"diplomacy\") + bonus < 24:\n  stop(\"Un plus grand score de diplomacie est necessaire pour convaincre ce seigneur.\")\n\nkingdom.start_pending_event(\"tuto_diplomacy_ending\")\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 6, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "tuto_diplomacy_ending", 
    "on_init": "\n"
  }
},
{
  "pk": 3, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "chercheurs de noises", 
    "mission": 3, 
    "length": 1000, 
    "allow_empty": false, 
    "slug": "chercheurs_noises", 
    "condition": "if folk.age() < C.MAJORITE:\n  stop(u\"Laisse les grands jouer \u00e0 ce jeu\")\n\nIeme_folk = param.pending_mission.folk_set.filter(mission_grid=param.mission_grid).count() + 1\nif Ieme_folk > kingdom.prestige * 0.03:\n  stop(u\"Vous ne pouvez pas envoyer plus de \" + unicode(Ieme_folk - 1) + u\" courtisans dans cette mission.\")\n"
  }
},
{
  "pk": 7, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "taxecour", 
    "mission": 9, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "taxecour", 
    "condition": "\n"
  }
},
{
  "pk": 8, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Collecteur", 
    "mission": 8, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "collecteur", 
    "condition": "\n"
  }
},
{
  "pk": 10, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Banni", 
    "mission": 14, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "banni", 
    "condition": "\n"
  }
},
{
  "pk": 13, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Le mari", 
    "mission": 17, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "mari", 
    "condition": "if folk.age < C.MAJORITE:\n  stop(S.TOO_YOUNG)\nelif folk.sex == Folk.FEMALE:\n  stop(\"Le mari doit \u00eatre un homme\")\nelif folk.has_quality(\"pretre\"):\n  stop(\"Un pr\u00eatre ne peut pas se marier\")\nelif (kingdom.get_value(\"in_tuto\") and folk == folks[0]):\n  stop(\"Il est encore trop tot pour songer \u00e0 marier votre chatelain\")\nelif (kingdom.get_value(\"passage_proposition_mariage\", False) and folk == folks[1]):\n  stop(\"Il est encore trop tot pour songer \u00e0 marier votre fils\")\nelif folk.spouse is not None:\n  stop(\"Cette personne est d\u00e9j\u00e0 mari\u00e9e\")\n"
  }
},
{
  "pk": 14, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "La femme", 
    "mission": 17, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "femme", 
    "condition": "if folk.age < C.MAJORITE:\n  stop(S.TOO_YOUNG)\nelif folk.sex == Folk.MALE:\n  stop(\"La mari\u00e9e doit \u00eatre une femme\")\nelif folk.spouse is not None:\n  stop(\"Cette personne est d\u00e9j\u00e0 mari\u00e9e\")\n"
  }
},
{
  "pk": 16, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Prisonnier", 
    "mission": 20, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "prisonnier", 
    "condition": "\n"
  }
},
{
  "pk": 17, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": true, 
    "name": "Prisonnier", 
    "mission": 21, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "libere", 
    "condition": "if folk.has_quality(\"prisonnier\") is False:\n  stop(\"Cette personne est d\u00e9j\u00e0 libre\")\n"
  }
},
{
  "pk": 19, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Mentor", 
    "mission": 23, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "mentor", 
    "condition": "if folk.age() < C.MAJORITE:\n  stop(S.TOO_YOUNG)\n"
  }
},
{
  "pk": 20, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Enfant", 
    "mission": 23, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "enfant", 
    "condition": "if folk.age() > C.MAJORITE:\n  stop(S.TOO_YOUNG)\n"
  }
},
{
  "pk": 21, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Recruteurs", 
    "mission": 4, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "recruteurs", 
    "condition": "if folk.sex == Folk.FEMALE:\n  stop(\"il faut un homme\")\n"
  }
},
{
  "pk": 22, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Agents", 
    "mission": 6, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "agents", 
    "condition": "\n"
  }
},
{
  "pk": 23, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Espion", 
    "mission": 27, 
    "length": 3, 
    "allow_empty": false, 
    "slug": "espion", 
    "condition": "if PendingMissionAffectation.objects.filter(pending_mission=param.pending_mission, mission_grid=param.mission_grid).count() > kingdom.prestige / 10:\n  stop(\"Vous ne pouvez plus rajouter de personne \u00e0 cette mission\")\nif folk.age < C.MAJORITE:\n  stop(\"Un enfant ne peut pas effectuer cette mission\")\n\n"
  }
},
{
  "pk": 26, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Attaquants", 
    "mission": 26, 
    "length": 4, 
    "allow_empty": false, 
    "slug": "attaquants", 
    "condition": "if folk.age() < C.MAJORITE:\n  stop(\"Vous ne pouvez pas affecter un enfant \u00e0 cette mission.\")\nelif folk.sex == Folk.FEMALE:\n  stop(\"Vous ne pouvez pas affecter de femme \u00e0 cette mission\")\n"
  }
},
{
  "pk": 29, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Organisateurs", 
    "mission": 31, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "organisateurs", 
    "condition": "\n"
  }
},
{
  "pk": 30, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "organisateurs", 
    "mission": 10, 
    "length": 3, 
    "allow_empty": false, 
    "slug": "organisateurs", 
    "condition": "if folk.age() < C.MAJORITE:\n  stop(\"Grandis un peu, gamin, et reviens un peu plus tard !\")\n"
  }
},
{
  "pk": 31, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Ch\u00e2telain", 
    "mission": 32, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "chatelain", 
    "condition": "if folk != kingdom.get_folk_in_title(\"chatelain\"):\n  stop(\"Seul le chatelain peut endosser ce r\u00f4le pour lancer cette mission\")\n"
  }
},
{
  "pk": 32, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Chasseurs", 
    "mission": 32, 
    "length": 50, 
    "allow_empty": false, 
    "slug": "chasseurs", 
    "condition": "if folk.sex == Folk.FEMALE or folk.has_quality(\"pretre\") or folk.age() < C.MAJORITE:\n  stop(\"Le chasseur doit \u00eatre un chevalier adulte\")\n"
  }
},
{
  "pk": 34, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "R\u00e9parateurs", 
    "mission": 11, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "reparateurs", 
    "condition": "\n"
  }
},
{
  "pk": 36, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "D\u00e9fenseurs", 
    "mission": 35, 
    "length": 4, 
    "allow_empty": false, 
    "slug": "defenseurs", 
    "condition": "if folk.sex == Folk.FEMALE:\n  stop(\"Depuis des temps immemoriaux les femmes ont persuad\u00e9 les hommes que c'etaient \u00e0 eux de mourrir. On ne revient pas sur des privileges durement gagnes.\")\n"
  }
},
{
  "pk": 38, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Responsables", 
    "mission": 38, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "responsables", 
    "condition": "\n"
  }
},
{
  "pk": 39, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": true, 
    "name": "Enfant", 
    "mission": 39, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "enfant", 
    "condition": "if folk.age() > C.MAJORITE:\n  stop(\"Un adulte n'a plus besoin d'un mentor\")\n"
  }
},
{
  "pk": 40, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": true, 
    "name": "Mentor", 
    "mission": 39, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "mentor", 
    "condition": "if folk.age() < C.MAJORITE:\n  stop(S.TOO_YOUNG)\n"
  }
},
{
  "pk": 41, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Diplomates", 
    "mission": 40, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "diplomates", 
    "condition": "\n"
  }
},
{
  "pk": 42, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Combattants", 
    "mission": 41, 
    "length": 3, 
    "allow_empty": false, 
    "slug": "combattants", 
    "condition": "\n"
  }
},
{
  "pk": 43, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "sneaky bitches", 
    "mission": 42, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "attaquants", 
    "condition": "\n"
  }
},
{
  "pk": 44, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": true, 
    "name": "D\u00e9fenseurs", 
    "mission": 43, 
    "length": 1000, 
    "allow_empty": false, 
    "slug": "defenseurs", 
    "condition": "if folk.age() < C.MAJORITE:\n  stop(S.TOO_YOUNG)\nif folk.sex == Folk.FEMALE:\n  stop(u\"Seul un homme peut \u00eatre choisi pour d\u00e9fendre la cit\u00e9.\")\n"
  }
},
{
  "pk": 45, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Espions", 
    "mission": 44, 
    "length": 3, 
    "allow_empty": false, 
    "slug": "espions", 
    "condition": "if folk.age() < C.MAJORITE:\n  stop(S.TOO_YOUNG)\n"
  }
},
{
  "pk": 46, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Espions", 
    "mission": 45, 
    "length": 3, 
    "allow_empty": false, 
    "slug": "espions", 
    "condition": "if folk.age() < C.MAJORITE:\n  stop(S.TOO_YOUNG)\n"
  }
},
{
  "pk": 48, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Recruteurs", 
    "mission": 47, 
    "length": 3, 
    "allow_empty": false, 
    "slug": "recruteurs", 
    "condition": "if folk.age() < C.MAJORITE:\n  stop(S.TOO_YOUNG)\n"
  }
},
{
  "pk": 49, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Recruteurs", 
    "mission": 48, 
    "length": 3, 
    "allow_empty": false, 
    "slug": "recruteurs", 
    "condition": "if folk.age() < C.MAJORITE:\n  stop(S.TOO_YOUNG)\n"
  }
},
{
  "pk": 50, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Recruteurs", 
    "mission": 49, 
    "length": 3, 
    "allow_empty": false, 
    "slug": "recruteurs", 
    "condition": "if folk.age() < C.MAJORITE:\n  stop(S.TOO_YOUNG)\n"
  }
},
{
  "pk": 51, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Responsables d'accueil", 
    "mission": 50, 
    "length": 2, 
    "allow_empty": false, 
    "slug": "accueil", 
    "condition": "if folk.age() < C.MAJORITE:\n  stop(S.TOO_YOUNG)\n"
  }
},
{
  "pk": 52, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Condamn\u00e9", 
    "mission": 22, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "condamne", 
    "condition": "\n"
  }
},
{
  "pk": 53, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": true, 
    "name": "Cible", 
    "mission": 51, 
    "length": 1, 
    "allow_empty": true, 
    "slug": "compromis", 
    "condition": "if folk.has_quality(\"deteste\"):\n  status = \"Cette personne est d\u00e9j\u00e0 d\u00e9test\u00e9e\"\n"
  }
},
{
  "pk": 54, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Complices", 
    "mission": 51, 
    "length": 3, 
    "allow_empty": false, 
    "slug": "comprometeurs", 
    "condition": "\n"
  }
},
{
  "pk": 55, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "espions", 
    "mission": 52, 
    "length": 3, 
    "allow_empty": false, 
    "slug": "espions", 
    "condition": "\n"
  }
},
{
  "pk": 56, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Vendeurs de promesses", 
    "mission": 18, 
    "length": 3, 
    "allow_empty": false, 
    "slug": "Vendeurs_de_promesses", 
    "condition": "\n"
  }
},
{
  "pk": 57, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Attaquants", 
    "mission": 54, 
    "length": 3, 
    "allow_empty": false, 
    "slug": "attaquants", 
    "condition": "\n"
  }
},
{
  "pk": 58, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Recruteurs", 
    "mission": 37, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "recruteurs", 
    "condition": "\n"
  }
},
{
  "pk": 59, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "diplomate \u00e0 domicile", 
    "mission": 55, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "moi", 
    "condition": "if folk.kingdom != kingdom:\n  stop(\"Doit faire partie de mon royaume\")\n"
  }
},
{
  "pk": 60, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "diplomate \u00e0 l'ext\u00e9rieur", 
    "mission": 55, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "pas_moi", 
    "condition": "if folk.kingdom == kingdom:\n  stop(\"Ne doit pas faire partie de mon royaume, je suis d\u00e9j\u00e0 en paix avec moi m\u00eame. Enfin, je crois...\")"
  }
},
{
  "pk": 61, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Diplomates", 
    "mission": 56, 
    "length": 3, 
    "allow_empty": false, 
    "slug": "diplomates", 
    "condition": "if folk.age() < C.MAJORITE:\n  stop(S.TOO_YOUNG)\n"
  }
}
]
