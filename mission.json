[
{
  "pk": 3, 
  "model": "mission.mission", 
  "fields": {
    "name": "Casus belli", 
    "target_list": "param = Kingdom.objects.filter(offended_set__offender=kingdom)", 
    "text": "Aller chercher des noises \u00e0 votre voisin.\r\n\r\n\r\n[co\u00fbt 25 ecus pour lancer la mission]", 
    "has_value": false, 
    "on_resolution": "a = 0\nfor folk in grids['chercheurs_noises']:\n  a += folk.diplomacy\nd = 0\ntry :\n  d += target.get_folk_in_title(\"diplomate\").diplomacy * 3\nexcept:\n  pass\nd += sum_stats(folks.filter(mission=None, birth__gte=datetime.now() - timedelta(days=C.MAJORITE)), \"diplomacy\")\nd *= 0.3\n\n\nif a>d:\n  kingdom.add_claim(target, Claim.REACHABLE)\n  pe = kingdom.create_pending_event(\"getaffront_diplomatie_kingdomsuccess\")\n  pe.set_value(\"defenseur\", target)\n  pe.start()\n\n  pe = kingdom.create_pending_event(\"getaffront_diplomatie_targetsuccess\")\n  pe.set_value(\"attaquant\", kingdom)\n  pe.start()\n  #evenement attaquer\n  kingdom.create_pending_mission(\"escarmouche\")\nelse:\n  pe = kingdom.create_pending_event(\"getaffront_diplomatie_kingdomfailure\")\n  pe.set_value(\"attaquant\", kingdom)\n  pe.start()\n  \n  pe = kingdom.create_pending_event(\"getaffront_diplomatie_targetfailure\")\n  pe.set_value(\"attaquant\", kingdom)\n  pe.start()\n\n#cout : prestige cible/10 +5/personnages mis dans la mission\n  \nkingdom.money-=25\nkingdom.save()\n", 
    "value_description": "Valeur :", 
    "on_start": " ", 
    "has_target": true, 
    "is_team": false, 
    "title": 6, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 1440, 
    "on_cancel": "\n", 
    "slug": "getaffront_diplomatie", 
    "on_init": " "
  }
},
{
  "pk": 4, 
  "model": "mission.mission", 
  "fields": {
    "name": "Recruter des hommes d'arme", 
    "target_list": "   ", 
    "text": "Il faut recruter une arm\u00e9e", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "Valeur :", 
    "on_start": "kingdom.start_pending_event(\"tuto_recrutement\")\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 2, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "stop(\"gofuck\")\n", 
    "slug": "tuto_recrutement", 
    "on_init": "  "
  }
},
{
  "pk": 6, 
  "model": "mission.mission", 
  "fields": {
    "name": "Soudoyer les notables", 
    "target_list": " ", 
    "text": "Il faut acheter sa confiance aupr\u00e8s du peuple", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "Valeur :", 
    "on_start": "kingdom.start_pending_event(\"tuto_potsdevin\")", 
    "has_target": false, 
    "is_team": false, 
    "title": 5, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "tuto_potsdevin", 
    "on_init": " "
  }
},
{
  "pk": 8, 
  "model": "mission.mission", 
  "fields": {
    "name": "Lever un imp\u00f4t sp\u00e9cial", 
    "target_list": " ", 
    "text": "Une taxe sur l'ensemble de mes serfs. ", 
    "has_value": true, 
    "on_resolution": "pe =kingdom.create_pending_event(\"taxepaysanne\")\npe.set_value(\"somme_taxe\", value)\npe.start()\n", 
    "value_description": "Somme totale \u00e0 taxer", 
    "on_start": "\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 7, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "taxepaysanne", 
    "on_init": " "
  }
},
{
  "pk": 9, 
  "model": "mission.mission", 
  "fields": {
    "name": "Rationnement", 
    "target_list": " ", 
    "text": "Forcer les courtisans \u00e0 payer une partie des d\u00e9penses du ch\u00e2teau.", 
    "has_value": false, 
    "on_resolution": "kingdom.start_pending_event(\"taxecour\")\n", 
    "value_description": "Valeur :", 
    "on_start": " ", 
    "has_target": false, 
    "is_team": false, 
    "title": 7, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "taxecour", 
    "on_init": " "
  }
},
{
  "pk": 10, 
  "model": "mission.mission", 
  "fields": {
    "name": "Banquet", 
    "target_list": " ", 
    "text": " ", 
    "has_value": false, 
    "on_resolution": "  \n", 
    "value_description": "Valeur :", 
    "on_start": "kingdom.start_pending_event(\"tuto_banquet\")", 
    "has_target": false, 
    "is_team": false, 
    "title": 4, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "tuto_banquet", 
    "on_init": "\n"
  }
},
{
  "pk": 11, 
  "model": "mission.mission", 
  "fields": {
    "name": "R\u00e9parer l'\u00e9glise", 
    "target_list": " ", 
    "text": "  ", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "Valeur :", 
    "on_start": "kingdom.money -= 15\nkingdom.save()\n\npe = kingdom.start_pending_event(\"tuto_eglise\")                \n", 
    "has_target": false, 
    "is_team": false, 
    "title": 3, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 1, 
    "on_cancel": "\n", 
    "slug": "tuto_eglise", 
    "on_init": " "
  }
},
{
  "pk": 14, 
  "model": "mission.mission", 
  "fields": {
    "name": "Bannir", 
    "target_list": " ", 
    "text": "Je souhaite bannir quelqu'un", 
    "has_value": false, 
    "on_resolution": "def perte(facteur, kingdom=kingdom):\n  call_function(\"perte_loyaute_general\", kingdom=kingdom, perte_min=C.PERTE_LOYAUTE_BANNISSEMENT*facteur, perte_max=C.PERTE_LOYAUTE_BANNISSEMENT*facteur)\n  return C.PERTE_LOYAUTE_BANNISSEMENT*facteur\n\nbanni = grids['banni'][0]\nperte_loyaute = 0\n\nif banni.has_quality(\"admire\"):\n  perte_loyaute -= perte(2)\nelif banni.has_quality(\"respecte\"):\n  perte_loyaute -= perte(1.5)\nelif banni.has_quality(\"meprise\"):\n  perte_loyaute -= perte(0.5)\nelif banni.has_quality(\"deteste\"):\n  perte_loyaute -= perte(0)\nelse :\n  perte_loyaute -= perte(1)\n\nbiens = random_value(2,30)\nkingdom.money += biens\nkingdom.save()\n\nbanni.kingdom = None\nbanni.save()\n\npe = kingdom.create_pending_event(\"bannissement\")\npe.set_value(\"banni\", banni)\npe.set_value(\"biens\", biens)\npe.set_value(\"perte\", perte_loyaute)\npe.start()\n", 
    "value_description": "Valeur :", 
    "on_start": " ", 
    "has_target": false, 
    "is_team": false, 
    "title": 4, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 0, 
    "on_cancel": "\n", 
    "slug": "bannir_folk", 
    "on_init": " "
  }
},
{
  "pk": 17, 
  "model": "mission.mission", 
  "fields": {
    "name": "Mariage", 
    "target_list": "\n", 
    "text": "Si une personne de votre dynastie est mari\u00e9e, le banquet qui s'ensuit est \u00e0 votre charge et coute 5 \u00e9cus par personne pr\u00e9sente dans votre cour au moment o\u00f9 le mariage est c\u00e9l\u00e9br\u00e9.", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "Valeur :", 
    "on_start": "if (grids['mari'][0].last_name == kingdom.user.username or grids['femme'][0].last_name == kingdom.user.username):\n  prix = 5*folks.filter(mission__isnull=True).count()\n  if kingdom.money < prix:\n    stop(\"Vous n'avez pas assez d'argent pour payer le banquet\")\n\n  kingdom.money -= prix\n  kingdom.save()\n\ngrids['mari'][0].spouse = grids['femme'][0]\ngrids['femme'][0].spouse = grids['mari'][0]\ngrids['mari'][0].save()\ngrids['femme'][0].save()\nif grids['mari'][0]==folks[3] and grids['femme'][0]==folks[2]:\n  kingdom.set_value(\"tuto_mariage_fait\",True)\n  pe=kingdom.create_pending_event(\"banquet\")\n  pe.set_value(\"banquet_mariage_tuto\",True)\n  pe.start()\n  \n", 
    "has_target": false, 
    "is_team": false, 
    "title": 3, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 0, 
    "on_cancel": "\n", 
    "slug": "marier", 
    "on_init": " "
  }
},
{
  "pk": 18, 
  "model": "mission.mission", 
  "fields": {
    "name": "Charit\u00e9", 
    "target_list": " ", 
    "text": "Une aum\u00f4ne pour convaincre le bas peuple de votre bont\u00e9.\r\n\r\n    \u00c9rudition  12\r\n    +1 paysans par tranche de 10 \u00e9cus d\u00e9pens\u00e9s.", 
    "has_value": false, 
    "on_resolution": "pe = kingdom.create_pending_event(\"charite\")\npe.set_value(\"perte_ecus\",param.get_value(\"perte_ecus\"))\npe.set_value(\"gain_paysans\",param.get_value(\"gain_paysans\"))\npe.start()\n\nkingdom.population+=param.get_value(\"gain_paysans\")\nkingdom.save()\n", 
    "value_description": "Valeur :", 
    "on_start": "cout_mission=int((kingdom.population+kingdom.get_value(\"total_soldats\"))/10)\nif kingdom.money < cout_mission :\n  stop(\"Vous n'avez pas assez d'argent pour lancer cette mission\")\nelse:\n  kingdom.money-=cout_mission\n  kingdom.save()\n  param.set_value(\"perte_ecus\",cout_mission)\n  pop_max=f(\"get_max_population\",kingdom=kingdom)\n  pop_actuelle=kingdom.population+kingdom.get_value(\"total_soldats\")\n  gain_pop=int(min((9+(4*(sum_stats(folks,\"scholarship\")/60)**0.5)-9*pop_actuelle/pop_max)/100*pop_max,pop_max - pop_actuelle))\n  param.set_value(\"gain_paysans\",gain_pop)\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 3, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "charite", 
    "on_init": "\n"
  }
},
{
  "pk": 20, 
  "model": "mission.mission", 
  "fields": {
    "name": "Emprisonnement", 
    "target_list": " ", 
    "text": "Un membre de ma cour m'a fortement d\u00e9plu. Et comme je suis la loi et qu'il me sied de le faire dispara\u00eetre de ma vue, j'ai pris la d\u00e9cision de le jeter en prison.", 
    "has_value": false, 
    "on_resolution": "def perte(facteur, kingdom=kingdom):\n  call_function(\"perte_loyaute_general\", kingdom=kingdom, perte_min=C.PERTE_LOYAUTE_EMPRISONNEMENT*facteur, perte_max=C.PERTE_LOYAUTE_EMPRISONNEMENT*facteur)\n  return C.PERTE_LOYAUTE_EMPRISONNEMENT*facteur\n\nprisonnier = grids['prisonnier'][0]\nprisonnier.add_quality(\"prisonnier\")\nperte_loyaute = 0\n\nif prisonnier.has_quality(\"admire\"):\n  perte_loyaute -= perte(2)\nelif prisonnier.has_quality(\"respecte\"):\n  perte_loyaute -= perte(1.5)\nelif prisonnier.has_quality(\"meprise\"):\n  perte_loyaute -= perte(0.5)\nelif prisonnier.has_quality(\"deteste\"):\n  perte_loyaute -= perte(0)\nelse :\n  perte_loyaute -= perte(1)\n\n\npe = kingdom.create_pending_event(\"execution\")\npe.set_value(\"prisonnier\", prisonnier)\npe.set_value(\"perte\", perte_loyaute)\npe.start()\n", 
    "value_description": "Valeur :", 
    "on_start": " ", 
    "has_target": false, 
    "is_team": false, 
    "title": 4, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 0, 
    "on_cancel": "\n", 
    "slug": "emprisonner", 
    "on_init": " "
  }
},
{
  "pk": 21, 
  "model": "mission.mission", 
  "fields": {
    "name": "Lib\u00e9rer un prisonnier", 
    "target_list": " ", 
    "text": "Le prisonnier a plus que payer pour son tord. Il est temps de le lib\u00e9rer.", 
    "has_value": false, 
    "on_resolution": "def gain(facteur, kingdom=kingdom):\n  call_function(\"gain_loyaute_general\", kingdom=kingdom, gain_min=C.PERTE_LOYAUTE_EMPRISONNEMENT*facteur, gain_max=C.PERTE_LOYAUTE_EMPRISONNEMENT*facteur)\n  return C.PERTE_LOYAUTE_EMPRISONNEMENT*facteur\n\nprisonnier = grids['libere'][0]\nprisonnier.remove_quality(\"prisonnier\")\ngain_loyaute = 0\n\nif prisonnier.has_quality(\"legende_locale\"):\n  gain_loyaute = gain(2)\nelif prisonnier.has_quality(\"intrepide\"):\n  gain_loyaute = gain(1.5)\nelif prisonnier.has_quality(\"scelerat\"):\n  gain_loyaute = gain(0)\nelif prisonnier.has_quality(\"traitre\"):\n  call_function(\"gain_loyaute_general\", kingdom=kingdom, gain_min=4, gain_max=6)\n  gain_loyaute -= C.PERTE_LOYAUTE_EMPRISONNEMENT\nelse :\n  gain_loyaute = gain(1)\n\nkingdom.message(\"\")\n", 
    "value_description": "Valeur :", 
    "on_start": " ", 
    "has_target": false, 
    "is_team": false, 
    "title": 4, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 0, 
    "on_cancel": "\n", 
    "slug": "liberer", 
    "on_init": " "
  }
},
{
  "pk": 22, 
  "model": "mission.mission", 
  "fields": {
    "name": "Ex\u00e9cution", 
    "target_list": " ", 
    "text": "L'affront est trop grand. Il me faudra l'ex\u00e9cuter pour l'exemple.", 
    "has_value": false, 
    "on_resolution": "def perte(facteur, kingdom=kingdom):\n  call_function(\"perte_loyaute_general\", kingdom=kingdom, perte_min=C.PERTE_LOYAUTE_EXECUTION*facteur, perte_max=C.PERTE_LOYAUTE_EXECUTION*facteur)\n  return C.PERTE_LOYAUTE_EXECUTION*facteur\n\ncondamne = grids['condamne'][0]\nperte_loyaute = 0\n\nif condamne.has_quality(\"admire\"):\n  perte_loyaute -= perte(2)\nelif condamne.has_quality(\"respecte\"):\n  perte_loyaute -= perte(1.5)\nelif condamne.has_quality(\"meprise\"):\n  perte_loyaute -= perte(0.5)\nelif condamne.has_quality(\"deteste\"):\n  perte_loyaute -= perte(0)\nelse :\n  perte_loyaute -= perte(1)\n\nbiens = random_value(2,30)\nkingdom.money += biens\nkingdom.save()\n\ncondamne.die()\nname = condamne.first_name + \" \" + condamne.last_name\npe = kingdom.create_pending_event(\"execution\")\npe.set_value(\"condamne\", name)\npe.set_value(\"biens\", biens)\npe.set_value(\"perte\", perte_loyaute)\npe.start()\n", 
    "value_description": "Valeur :", 
    "on_start": " ", 
    "has_target": false, 
    "is_team": false, 
    "title": 4, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 0, 
    "on_cancel": "\n", 
    "slug": "executer", 
    "on_init": " "
  }
},
{
  "pk": 23, 
  "model": "mission.mission", 
  "fields": {
    "name": "D\u00e9signer un mentor", 
    "target_list": " ", 
    "text": "Je veux qu'un enfant ait la meilleure \u00e9ducation possible", 
    "has_value": false, 
    "on_resolution": " ", 
    "value_description": "Valeur :", 
    "on_start": "grids['enfant'][0].mentor = grids['mentor'][0]\ngrids['enfant'][0].save()\n\npe = kingdom.create_pending_event(\"education\")\npe.set_value('pupil', grids['enfant'][0])\npe.set_value('mentor', grids['mentor'][0])\npe.start()\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 4, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 0, 
    "on_cancel": "\n", 
    "slug": "nommer_mentor", 
    "on_init": " "
  }
},
{
  "pk": 26, 
  "model": "mission.mission", 
  "fields": {
    "name": "Raid", 
    "target_list": "\n", 
    "text": "Allons attaquer !", 
    "has_value": false, 
    "on_resolution": "try:\n  if len(param.get_value(\"morts_attaquant\")) > 0:\n    for perso in param.get_value(\"morts_attaquant\"):\n      perso.die()\nexcept:\n  stop()\n", 
    "value_description": "Valeur :", 
    "on_start": "# tester la possibilit\u00e9 pour l'attaquant d'attaquer (assez d'argent)\nif kingdom.money < 10:\n  stop(\"Vous n'avez pas suffisamment d'argent pour lancer cette mission.\")\n  \nelse:\n  kingdom.money -= 10\n\n  retour_fonction = call_function('determiner_raid',\n                                  liste_attaquant=grids['attaquants'],\n                                  argent_defenseur = target.money,\n                                  population_defenseur = target.population,\n                                  population_max_defenseur = f('get_max_population', kingdom=target)\n                                  )\n  \n  # le raid entraine un casus belli \n  retour_fonction2 = f(\"creer_claim\", offender = kingdom,offended = target,level=1)\n  \n  target.population -= retour_fonction['population_perdue']\n  \n  perte_prestige = 0\n  \n  if kingdom.prestige >= 2*target.prestige:\n    perte_prestige = 30\n  elif kingdom.prestige >= target.prestige:  \n    perte_prestige = 15\n    \n  kingdom.prestige -= perte_prestige     \n  kingdom.money += retour_fonction['argent_vole']\n  \n  param.set_value('morts_attaquant',[])\n  \n  # gestion des evenements de retour du raid pour l'attaquant et d'avertissement de raid pour la cible\n  # cas d'un raid qui tourne tr\u00e8s mal (des morts ...)\n  if len(retour_fonction['morts_attaquant']) > 0:\n    # evenement pour l'attaquant\n    # liste des noms des morts\n    morts_nom = []\n    for perso in retour_fonction['morts_attaquant']:\n      morts_nom.append(perso.first_name + \" \" + perso.last_name)\n      grids['attaquants']= grids['attaquants'].remove(perso)\n    pa = kingdom.create_pending_event(\"retour_raid_morts\")\n    pa.set_value(\"argent_gagne\", retour_fonction['argent_vole'])\n    pa.set_value(\"attaque\", target)\n    pa.set_value(\"liste_attaquant\", grids['attaquants'])\n    pa.set_value(\"blesses_attaquant\", retour_fonction['blesses_attaquant'])      \n    pa.set_value(\"morts_nom\",morts_nom)  \n    pa.set_value(\"perte_prestige\", perte_prestige)  \n    pa.start()\n    # evenement pour la cible\n    pc = target.create_pending_event(\"cible_raid_morts\")\n    pc.set_value(\"mort1_name\", retour_fonction['morts_attaquant'][0].first_name + \" \"+retour_fonction['morts_attaquant'][0].last_name) \n    pc.set_value(\"population_perdue\", retour_fonction['population_perdue'])\n    pc.set_value(\"kingdom_attaquant\", kingdom)\n    pc.set_value(\"kingdom_attaque\", target)\n    pc.set_value(\"deja_ennemi\", retour_fonction2['deja_ennemi'])   \n    pc.start()\n    # et on les tuera \u00e0 la fin\n    param.set_value(\"morts_attaquant\"  , retour_fonction['morts_attaquant'])\n  ###      \n  # cas d'un raid sans encombre  \n  else:\n     # evenement du retour pour l'attaquant\n    pa = kingdom.create_pending_event(\"retour_raid_ok\")\n    pa.set_value(\"argent_gagne\", retour_fonction['argent_vole'])\n    pa.set_value(\"attaque\", target)\n    pa.set_value(\"liste_attaquant\", grids['attaquants'])\n    pa.set_value(\"blesses_attaquant\", retour_fonction['blesses_attaquant'])  \n    pa.set_value(\"perte_prestige\", perte_prestige) \n    pa.start()\n    # evenement pour la cible\n    pc = target.create_pending_event(\"cible_raid_ok\")\n    pc.set_value(\"population_perdue\", int(retour_fonction['population_perdue']))\n    pc.set_value(\"kingdom_attaquant\", kingdom)\n    pc.set_value(\"kingdom_attaque\", target)\n    pc.set_value(\"deja_ennemi\", retour_fonction2['deja_ennemi'])\n    pc.start()           \n\n  target.save()\n  kingdom.save()    \n", 
    "has_target": true, 
    "is_team": false, 
    "title": 2, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 1, 
    "on_cancel": "\n", 
    "slug": "organiser_raid", 
    "on_init": " "
  }
},
{
  "pk": 27, 
  "model": "mission.mission", 
  "fields": {
    "name": "Espionner une seigneurerie", 
    "target_list": "param = Kingdom.objects.filter(offended_set__offender=kingdom)", 
    "text": "Je suis quelqu'un de suspicieux. Je veux les espionner", 
    "has_value": false, 
    "on_resolution": "a = 0\nfor folk in grids['espion']:\n  a += folk.plot\nd = 0\ntry :\n  d += target.get_folk_in_title(\"maitre_espion\").plot *3\nexcept:\n  pass \nd += sum_stats(folks.filter(mission = None, birth__gte= datetime.now() - timedelta(days=C.MAJORITE)), 'plot')\nd *= 0.7\n\nmarge = min(100, 100 * 4/float(3) * 1/float(2) * ( 1 + ( (a-d) / float((a+d)) ) ) )\n\nmoney = target.money + max(-target.money, target.money * random_value(-(100-marge)*(100-marge)/float(100), (100-marge)*(100-marge)/float(100)))\n\nincertitude = (100 + random_value(-(100-marge)*(100-marge)/float(100), (100-marge)*(100-marge)/float(100))) / float(100)\nfolk = max(5, min(target.folk_set.count() * incertitude, target.prestige/10))\n\nincertitude = (100 + random_value(-(100-marge)*(100-marge)/float(100), (100-marge)*(100-marge)/float(100))) / float(100)\npopulation =  max(5, min(target.population * incertitude, call_function(\"population_max\",kingdom=target)))\n\nincertitude = (100 + random_value(-(100-marge)*(100-marge)/float(100), (100-marge)*(100-marge)/float(100))) / float(100)\narchers = max(0, min(Folk.objects.filter(kingdom=target, quality_set__name=\"archer\").count() * incertitude, folk * 2/3))\n\nincertitude = (100 + random_value(-(100-marge)*(100-marge)/float(100), (100-marge)*(100-marge)/float(100))) / float(100)\npiquiers = max(0, min(Folk.objects.filter(kingdom=target, quality_set__name=\"piquier\").count() * incertitude, folk * 2/3))\n\nincertitude = (100 + random_value(-(100-marge)*(100-marge)/float(100), (100-marge)*(100-marge)/float(100))) / float(100)\ncavaliers = max(0, min(Folk.objects.filter(kingdom=target, quality_set__name=\"cavalier\").count() * incertitude, folk * 2/3))\n\npe = kingdom.create_pending_event(\"rapport_espionnage\")\npe.set_value(\"money\", money)\npe.set_value(\"folk\", folk)\npe.set_value(\"population\", population)\npe.set_value(\"piquiers\", piquiers)\npe.set_value(\"cavaliers\", cavaliers)\npe.set_value(\"archers\", archers)\npe.set_value(\"target\", target)\npe.start()\n", 
    "value_description": " ", 
    "on_start": "\n", 
    "has_target": true, 
    "is_team": false, 
    "title": 5, 
    "target_description": "Chateau \u00e0 observer", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 60, 
    "on_cancel": "\n", 
    "slug": "espionner", 
    "on_init": "\n"
  }
},
{
  "pk": 31, 
  "model": "mission.mission", 
  "fields": {
    "name": "Banquet", 
    "target_list": "\n", 
    "text": "Organisons un joyeux \u00e9v\u00e9nement !", 
    "has_value": false, 
    "on_resolution": "pe = kingdom.create_pending_event(\"banquet\")\npe.set_value(\"raison\", \"initiative\")\npe.start()\n", 
    "value_description": "Valeur :", 
    "on_start": "nb_convives = folks.filter(mission=None).count()\nif kingdom.money < nb_convives * 2:\n  stop(\"Vous n'avez pas les moyens d'organiser un banquet de cette envergure\")\n  \nkingdom.money -= nb_convives * 2\nkingdom.save()\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 4, 
    "target_description": " ", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "organiser_banquet", 
    "on_init": "\n"
  }
},
{
  "pk": 32, 
  "model": "mission.mission", 
  "fields": {
    "name": "Partie de chasse", 
    "target_list": "\n", 
    "text": "Chasse", 
    "has_value": false, 
    "on_resolution": "pe = kingdom.create_pending_event(\"chasse\")\npe.set_value(\"chasseurs\", grids['chasseurs'])\npe.start()\n", 
    "value_description": "Valeur :", 
    "on_start": "\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 4, 
    "target_description": " ", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 10, 
    "on_cancel": "\n", 
    "slug": "chasse", 
    "on_init": "\n"
  }
},
{
  "pk": 35, 
  "model": "mission.mission", 
  "fields": {
    "name": "Marcher sur les bandits", 
    "target_list": "\n", 
    "text": "Envoyez tous vos hommes valides pour optimiser vos chances. Vos gens ne bougeront m\u00eame pas le petit doigt si vous et votre conn\u00e9table ne partez pas en combat.", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "", 
    "on_start": "if kingdom.get_folk_in_title(\"chatelain\") not in grids['defenseurs'] or kingdom.get_folk_in_title(\"connetable\") not in grids['defenseurs']:\n  stop(\"Le ch\u00e2telain et le conn\u00e9table se doivent de participer \u00e0 cette mission\")\n  \ncombattants = grids['defenseurs'][0:]\ncombattants.remove(folks[0])\ncombattant=random_in(combattants)\nif combattant.fight>8:\n  intrepide=True\n  fleche=False\nelse:\n  intrepide=False  \n  fleche=True\n\npe=kingdom.create_pending_event(\"tuto_bandits_bataille\")\npe.set_value(\"somme_fight\",sum_stats(grids['defenseurs'],\"fight\"))\npe.set_value(\"combattant\",combattant)\npe.set_value(\"intrepide\",intrepide)\npe.set_value(\"fleche\",fleche)\npe.start()\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 2, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 7, 
    "on_cancel": "\n", 
    "slug": "tuto_bandits_attaque", 
    "on_init": "\n"
  }
},
{
  "pk": 37, 
  "model": "mission.mission", 
  "fields": {
    "name": "Recruter des hommes d'arme", 
    "target_list": "\n", 
    "text": "Recruter des soldats (fait perdre des paysans)", 
    "has_value": false, 
    "on_resolution": "delta = param.get_value(\"delta\")\nkingdom.soldiers += delta\nkingdom.save\nkingdom.message(\"%s soldats ont rejoint votre cour. Vous \u00eates maintenant \u00e0 la t\u00eate d'une arm\u00e9e de %s soldats.\" % (delta, kingdom.soldiers))\n", 
    "value_description": "", 
    "on_start": "POURCENTAGE_MAX_MISSION_RECRUTEMENT = 5\ndelta = sum_stats(affected, 'fight') / 3\n\n# On ne peut pas d\u00e9passer le max de troupes possible\nmax_troupes = call_function('get_max_soldats', kingdom=kingdom)\ndelta = min(delta, max_troupes - kingdom.soldiers)\n\n# On ne peut pas gagner plus de 5% de la population maximale en une fois\nmax_population = call_function('get_max_population', kingdom=kingdom)\nmax_gain_soldats = max_population * POURCENTAGE_MAX_MISSION_RECRUTEMENT / 100\ndelta = min(delta, max_gain_soldats)\n\n# On ne peut pas avoir un nombre n\u00e9gatif de paysans !\ndelta = min(delta, kingdom.population)\n\n# On ne peut perdre plus d'argents que notre tr\u00e9sorerie actuelle\ndelta = min(delta, kingdom.money)\n\nkingdom.money -= delta\nkingdom.population -= delta\nkingdom.save()\n\nparam.set_value(\"delta\", delta)\n\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 2, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 360, 
    "on_cancel": "\n", 
    "slug": "recruter_troupes", 
    "on_init": "\n"
  }
},
{
  "pk": 38, 
  "model": "mission.mission", 
  "fields": {
    "name": "Renvoyer des hommes d'arme", 
    "target_list": "\n", 
    "text": "Renvoyer des soldats. Ils deviendront paysans.", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "", 
    "on_start": "POURCENTAGE_MAX_MISSION_RECRUTEMENT = 5\ndelta = sum_stats(affected, 'scholarship') / 3\n\n# On ne peut pas avoir un nombre n\u00e9gatif de soldats !\ndelta = min(delta, kingdom.soldiers)\n\nkingdom.soldiers -= delta\nkingdom.population += delta\nkingdom.save()\n\nkingdom.message(\"%s soldats ont l\u00e2ch\u00e9s leurs armes pour se reconvertir en paysans. Vous \u00eates maintenant \u00e0 la t\u00eate d'une arm\u00e9e de %s soldats.\" % (delta, kingdom.soldiers))\n\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 2, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 20, 
    "on_cancel": "\n", 
    "slug": "renvoyer", 
    "on_init": "\n"
  }
},
{
  "pk": 39, 
  "model": "mission.mission", 
  "fields": {
    "name": "D\u00e9signer un mentor", 
    "target_list": "\n", 
    "text": "Donner \u00e0 votre filleul un mentor pour l'\u00e9duquer.", 
    "has_value": false, 
    "on_resolution": "kingdom.unlock_mission(\"nommer_mentor\")\n", 
    "value_description": "", 
    "on_start": "grids['enfant'][0].mentor = grids['mentor'][0]\ngrids['enfant'][0].save()\ncall_function(\"tuto_moteur\", kingdom=kingdom, slug_event=\"tuto_soeurette\")\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 4, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 1, 
    "on_cancel": "\n", 
    "slug": "tuto_nommer_mentor", 
    "on_init": "\n"
  }
},
{
  "pk": 40, 
  "model": "mission.mission", 
  "fields": {
    "name": "Casus belli", 
    "target_list": "\n", 
    "text": "R\u00e9cup\u00e9rer un casus belli sur mon adversaire.", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "", 
    "on_start": "if sum_stats(affected, \"diplomacy\") < 20:\n  stop(\"Il va falloir \u00eatre un peu plus diplomate\")\n\nkingdom.set_value(\"tuto_has_claim\", True)\nkingdom.start_pending_event(\"tuto_casusbelli_success\")\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 6, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": false, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "tuto_claim", 
    "on_init": "\n"
  }
},
{
  "pk": 41, 
  "model": "mission.mission", 
  "fields": {
    "name": "Escarmouche", 
    "target_list": "\n", 
    "text": "Cocorico.\r\nTabasser mon PNJ \u00e0 la batte.", 
    "has_value": false, 
    "on_resolution": "kingdom.soldiers+=param.get_value('retour_troupes')\n", 
    "value_description": "", 
    "on_start": "# Mise en forme des param\u00e8tres \u00e0 passer aux fonctions de calcul\nattaquant = {\n  'troupes': int(C.POURCENTAGE_SOLDATS_ESCARMOUCHE * kingdom.soldiers / 100),\n  'combattants': affected,\n  'population': kingdom.population,\n  'prestige': kingdom.prestige,\n}\n\n# R\u00e9cuperer les cinq meilleurs combattants de l'attaquant\ndate_majorite = datetime.now() - timedelta(days=C.MAJORITE)\ncinq_meilleurs = kingdom.folk_set.filter(sex=Folk.MALE, disabled=False, birth__lte=date_majorite).order_by('-fight')[0:5]\nmoyenne_meilleurs_fight = avg_stats(cinq_meilleurs, 'fight')\n\ncombattants = [Folk(fight=moyenne_meilleurs_fight), Folk(fight=moyenne_meilleurs_fight), Folk(fight=moyenne_meilleurs_fight)]\nmap(lambda f: f.save(), combattants)\ntype_adversaire=kingdom.get_value(\"tuto_type_PNJ\", 'piquier')\ncombattants[0].add_quality(type_adversaire)\ncombattants[1].add_quality(type_adversaire)\ncombattants[2].add_quality(random_in(['piquier', 'cavalier','archer']))\n\ndefenseur = {\n  # Dans le cadre du tuto,\n  # Les troupes du d\u00e9fenseur correspondent \u00e0 80% des troupes maximales disponibles pour ce Kingdom\n  'troupes': int(C.POURCENTAGE_SOLDATS_ESCARMOUCHE * 0.8 * C.POURCENTAGE_MAX_SOLDATS_PASSIF * call_function(\"get_max_population\", kingdom=kingdom) / (100 * 100)),\n  'combattants': combattants,\n  'population': kingdom.prestige*2,\n  'prestige': kingdom.prestige,\n}\n\n# Fonctions pour calculer ce qu'il se passe sans appliquer\ngagnant, perdant, bataille = f(\"determiner_vainqueur_combat\", attaquant=attaquant, defenseur=defenseur)\nis_victory = gagnant == attaquant\ndelta = f(\"determiner_modifications_combat\", gagnant=gagnant, perdant=perdant, marge=bataille['marge'], attaquant_est_gagnant=is_victory)\nif is_victory:\n  commandement = {\n    'gagnant': f(\"leader_de_mission\", royaume=kingdom, list_folk=affected),\n    'perdant':\n    {\n       'chatelain': False,\n       'connetable': False,\n       'general': random_in(combattants),\n    },\n  }\nelse:\n  commandement = {\n    'gagnant':\n     {\n       'chatelain': False,\n       'connetable': False,\n       'general': random_in(combattants),\n     },\n    'perdant': f(\"leader_de_mission\", royaume=kingdom, list_folk=affected),\n    }\n\n# Application gain_prestige\nif is_victory:\n  kingdom.prestige += delta['gagnant']['prestige']\nelse:\n  kingdom.prestige += delta['perdant']['prestige']\nkingdom.save()\n\n# D\u00e9termination prochain event\nif not kingdom.get_value(\"tuto_firstbattle_attack\"):\n  pe = kingdom.create_pending_event(\"tuto_firstbattle_attack\")\nelif is_victory:\n  pe = kingdom.create_pending_event(\"escarmouche_victoire\")\nelse:\n  pe = kingdom.create_pending_event(\"escarmouche_defaite\")\n  \n# Passage d'arguments\npe.set_value(\"is_victory\", is_victory)\npe.set_value(\"attaquant\", True)\npe.set_value(\"gagnant\", gagnant)\npe.set_value(\"perdant\", perdant)\npe.set_value(\"liste_perdant\", f(\"liste_nom_avec_specialite\", commandants=perdant['combattants']))\npe.set_value(\"liste_gagnant\", f(\"liste_nom_avec_specialite\", commandants=gagnant['combattants']))\npe.set_value(\"delta\", delta)\npe.set_value(\"bataille\", bataille)\npe.set_value(\"commandement\", commandement)\npe.set_value(\"target_dynasty\", kingdom.get_value(\"tuto_adversaire\"))\npe.set_value(\"tuto\", True)\npe.start()\n\n# Tuer les gens qui ne sont pas de la famille r\u00e9gnante, blesser tous les bless\u00e9s\nfamille = kingdom.get_folk_in_title('chatelain').last_name\nfor mort in delta['A_tuer']:\n  if mort.last_name != famille:\n    mort.die()\nfor blesse in delta['A_blesser']:\n  blesse.add_quality(\"blesse\")\n\n# gain thune en cas de pillage\nif is_victory:\n  kingdom.money += delta['gagnant']['thune']\n  \n# pertes de soldats\nif is_victory:\n  kingdom.soldiers-=gagnant['troupes']\n  kingdom.set_value('total_soldats',kingdom.get_value('total_soldats')-delta['gagnant']['pertes_troupe'])\n  param.set_value('retour_troupes',gagnant['troupes']-delta['gagnant']['pertes_troupe'])\nelse:\n  kingdom.soldiers-=perdant['troupes']\n  kingdom.set_value('total_soldats',kingdom.get_value('total_soldats')-delta['perdant']['pertes_troupe'])\n  param.set_value('retour_troupes',perdant['troupes']-delta['perdant']['pertes_troupe'])\n\nkingdom.save()\n\nmap(lambda f: f.delete(), combattants)\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 2, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": false, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "tuto_escarmouche", 
    "on_init": "\n"
  }
},
{
  "pk": 42, 
  "model": "mission.mission", 
  "fields": {
    "name": "Achever votre adversaire", 
    "target_list": "\n", 
    "text": "On a localis\u00e9 les toilettes favorites du seigneur adverse !\r\nOn se cache derri\u00e8re la porte avec une hache....\r\n\r\n\r\n\r\n... ET BIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIM", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "", 
    "on_start": "if kingdom.get_folk_in_title(\"chatelain\") not in folks:\n  stop(\"Le ch\u00e2telain doit faire partie de la mission\")\n\nkingdom.create_pending_event(\"tuto_fin_tuto\").start()\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 2, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "tuto_achever_voisin", 
    "on_init": "\n"
  }
},
{
  "pk": 43, 
  "model": "mission.mission", 
  "fields": {
    "name": "D\u00e9finir sa d\u00e9fense", 
    "target_list": "\n", 
    "text": "D\u00e9finir les personnes qui prendront la d\u00e9fense de mon ch\u00e2teau en cas de besoin", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "", 
    "on_start": "\n", 
    "has_target": false, 
    "is_team": true, 
    "title": 2, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "ligne_defense", 
    "on_init": "\n"
  }
},
{
  "pk": 44, 
  "model": "mission.mission", 
  "fields": {
    "name": "Espionner une arm\u00e9e", 
    "target_list": "\n", 
    "text": "Aller qu\u00e9rir des informations sur la force de bataille !", 
    "has_value": false, 
    "on_resolution": "def randomize_stat(value, marge, maximum=20):\n  min_error = C.POURCENTAGE_ERREUR_MIN_ESPIONNAGE\n  max_error = C.POURCENTAGE_ERREUR_MAX_ESPIONNAGE\n  stat = int(min(maximum,value*(100+random_value(-max(min_error,(100-marge)*(100-marge)*max_error/10000), max(min_error,(100-marge)*(100-marge)*max_error/10000)))/100))\n  return stat\n\ndef randomize_number(value, marge):\n  min_error = C.POURCENTAGE_ERREUR_MIN_ESPIONNAGE\n  max_error = C.POURCENTAGE_ERREUR_MAX_ESPIONNAGE\n  number = int(value*(100+random_value(-max(min_error,(100-marge)*(100-marge)*max_error/10000), max(min_error,(100-marge)*(100-marge)*max_error/10000)))/100)\n  return number\n\n# Notre valeur d'intrigue\nattack = sum_stats(grids['espions'], 'plot')\nattack /= 3\n\n# Carac du maitre espion adverse\nintrigue_maitre_espion=0\ntry :\n  intrigue_maitre_espion = target.get_folk_in_title(\"maitre_espion\").plot\nexcept:\n  pass\n\n# Carac du chatelain adverse\nintrigue_chatelain = 0\ntry :\n  intrigue_chatelain = target.get_folk_in_title(\"chatelain\").plot\nexcept:\n  pass\n\n# R\u00e9cup\u00e9rer la moyenne de l'intrigue des personnes majeures dans la cour adverse qui ne sont pas en mission\ndef_folks = target.folk_set.filter(mission = None, birth__gte= datetime.now() - timedelta(days=C.MAJORITE))\nmoyenne_cour = avg_stats(def_folks, \"plot\")\n\n# Calcul final.\ndefense = 0.3 * (4 * intrigue_maitre_espion + intrigue_chatelain) / 5 + 0.7 * moyenne_cour\n\nif defense > attack * 2:\n  pe = kingdom.create_pending_event(\"resultat_espionnage_echec\")\n  pe.set_value(\"target\", target)\n  pe.start()\nelse:\n  marge = min(100, 100 * 4/float(3) * 1/float(2) * ( 1 + ( (attack-defense) / float((attack+defense)) ) ) )\n  soldiers = randomize_number(target.soldiers, marge)\n  cavaliers = randomize_number(Folk.objects.filter(kingdom=target, quality_set__name=\"cavalier\").count(), marge)\n  archers= randomize_number(Folk.objects.filter(kingdom=target, quality_set__name=\"archers\").count(), marge)\n  piquiers = randomize_number(Folk.objects.filter(kingdom=target, quality_set__name=\"piquiers\").count(), marge)\n  choice_folks = random_value(1,10)\n  defenseurs = []\n  tab_defenseurs= []\n  if False:\n  #if choice_folks < 7 :\n    defenseurs = target.get_team(\"ligne_defense\")[\"affected\"]\n    import random\n    random.shuffle(defenseurs)\n    defenseurs = defenseurs[0:1]\n  else:\n  #elif choice_folks < 9:\n    defenseurs = target.get_team(\"ligne_defense\")[\"affected\"]\n    import random\n    random.shuffle(defenseurs)\n    defenseurs = defenseurs[0:2] \n  \n  for folk in defenseurs:\n    title = False\n    try:\n      title = folk.title.title.name\n    except:\n      pass\n    tab_defenseurs.append([folk.first_name + \" \" + folk.last_name, title , randomize_stat(folk.fight, marge), randomize_stat(folk.plot, marge), randomize_stat(folk.diplomacy, marge), randomize_stat(folk.scholarship, marge),randomize_stat(folk.loyalty, marge, 100), folk.quality_set.all()])\n    \n  pe = kingdom.create_pending_event(\"resultat_espionnage_troupes\")\n  \n  pe.set_value(\"soldiers\",soldiers)\n  pe.set_value(\"archers\",archers)\n  pe.set_value(\"piquiers\",piquiers)\n  pe.set_value(\"cavaliers\",cavaliers)\n  pe.set_value(\"defenseurs\",tab_defenseurs)\n  pe.start()\n", 
    "value_description": "", 
    "on_start": "\n", 
    "has_target": true, 
    "is_team": false, 
    "title": 5, 
    "target_description": "Chateau \u00e0 observer", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 120, 
    "on_cancel": "\n", 
    "slug": "espionner_troupes", 
    "on_init": "\n"
  }
},
{
  "pk": 45, 
  "model": "mission.mission", 
  "fields": {
    "name": "Espionner une cour", 
    "target_list": "\n", 
    "text": "Aller qu\u00e9rir des information sur les ressources du chateau", 
    "has_value": false, 
    "on_resolution": "def randomize_stat(value, marge, maximum=20):\n  min_error = C.POURCENTAGE_ERREUR_MIN_ESPIONNAGE\n  max_error = C.POURCENTAGE_ERREUR_MAX_ESPIONNAGE\n  return int(min(maximum,value*(100+random_value(-max(min_error,(100-marge)*(100-marge)*max_error/10000), max(min_error,(100-marge)*(100-marge)*max_error/10000)))/100))\ndef randomize_number(value, marge):\n  min_error = C.POURCENTAGE_ERREUR_MIN_ESPIONNAGE\n  max_error = C.POURCENTAGE_ERREUR_MAX_ESPIONNAGE\n  return int(value*(100+random_value(-max(min_error,(100-marge)*(100-marge)*max_error/10000), max(min_error,(100-marge)*(100-marge)*max_error/10000)))/100)\n\n# Notre valeur d'intrigue\nattack = sum_stats(grids['espions'], 'plot')\nattack /= 3\n\n# Carac du maitre espion adverse\nintrigue_maitre_espion=0\ntry :\n  intrigue_maitre_espion = target.get_folk_in_title(\"maitre_espion\").plot\nexcept:\n  pass\n\n# Carac du chatelain adverse\nintrigue_chatelain = 0\ntry :\n  intrigue_chatelain = target.get_folk_in_title(\"chatelain\").plot\nexcept:\n  pass\n\n# R\u00e9cup\u00e9rer la moyenne de l'intrigue des personnes majeures dans la cour adverse qui ne sont pas en mission\ndef_folks = target.folk_set.filter(mission = None, birth__gte= datetime.now() - timedelta(days=C.MAJORITE))\nmoyenne_cour = avg_stats(def_folks, \"plot\")\n\n# Calcul final.\ndefense = 0.3 * (4 * intrigue_maitre_espion + intrigue_chatelain) / 5 + 0.7 * moyenne_cour\n\n\nif defense > attack * 2:\n  pe = kingdom.create_pending_event(\"resultat_espionnage_echec\")\n  pe.set_value(\"target\", target)\n  pe.start()\nelse:\n  marge = min(100, 100 * 4 / 3 / 2 * ( 1 + (attack-defense) / (attack+defense)))\n  money = randomize_number(target.money, marge)\n  population = randomize_number(target.population, marge)\n  \n  folks_titled = []\n  titles = {\n    'ambassadeur': 'diplomacy',\n    'connetable': 'fight',\n    'maitre_espion': 'plot',\n  }\n\n  for title in titles.keys():\n    values = []\n    folk = target.get_folk_in_title(title)\n    if folk is not None:\n      values.append(folk)\n      values.append(Title.objects.get(slug=title).name)\n      values.append(randomize_stat(getattr(folk, titles[title]), marge))\n      folks_titled.append(values)\n  \n  pe = kingdom.create_pending_event(\"resultat_espionnage_chateau\")\n  pe.set_value(\"folks_titled\", folks_titled)\n  pe.set_value(\"gold\", money)\n  pe.set_value(\"population\", population)\n  pe.start()\n", 
    "value_description": "", 
    "on_start": "\n", 
    "has_target": true, 
    "is_team": false, 
    "title": 5, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 120, 
    "on_cancel": "\n", 
    "slug": "espionner_chateau", 
    "on_init": "\n"
  }
},
{
  "pk": 47, 
  "model": "mission.mission", 
  "fields": {
    "name": "Recruter un chevalier", 
    "target_list": "\n", 
    "text": "Envoyer des missionnaire recruter un chevalier", 
    "has_value": false, 
    "on_resolution": "age = random_gauss(16,40)\n\nmax_carac = 32+int((age-16)/5)\n#liste des traits qu'il poss\u00e8de (en plus des traits random)\nqualities = []\nqualities.append(random_in([\"archer\", \"cavalier\", \"piquier\"]))\n#liste des traits qu'il ne peut pas avoir\nno_qualities = []\n\nloyalty = 50 + 30 * int((sum_stats(affected, \"diplomacy\")-23)/37) + random_value(-10, 10)\nchevalier = f(\"creer_folk\", kingdom=None, fight_min=7, plot_min=1, diplomacy_min=1, scholarship_min=1, loyalty=loyalty, max_carac=max_carac, sex=Folk.MALE, birth=datetime.now() - timedelta(days=age), traits=qualities, notraits = no_qualities)\npe = kingdom.create_pending_event(\"allegeance_chevalier\")\npe.set_value(\"chevalier\", chevalier)\npe.start()\n", 
    "value_description": "", 
    "on_start": "cout = 15 + 10 * len(affected)\nif kingdom.money < cout :\n  statut = \"Vous n'avez pas les moyen de lancer cette mission.\"\n  stop()\n\nbonus = 0\nif kingdom.get_folk_in_title(\"ambassadeur\") in affected:\n  bonus += 4\nif sum_stats(affected, \"diplomacy\") + bonus < 24:\n  stop(\"Il vous faudra une plus grande force de persuasion pour recruter un chevalier.\")\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 6, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 360, 
    "on_cancel": "\n", 
    "slug": "recruter_chevalier", 
    "on_init": "\n"
  }
},
{
  "pk": 48, 
  "model": "mission.mission", 
  "fields": {
    "name": "Demander un pr\u00eatre", 
    "target_list": "\n", 
    "text": "Mander un pr\u00eatre \u00e0 l'\u00e9v\u00e9ch\u00e9\r\n", 
    "has_value": false, 
    "on_resolution": "age = random_gauss(16, 40)\nmax_carac = 32+int((age-16)/5)\n#liste des traits qu'il poss\u00e8de (en plus des traits random)\nqualities = []\nqualities.append(\"pretre\")\n#liste des traits qu'il ne peut pas avoir\nno_qualities = []\n\nloyalty = 50 + 30 * int((sum_stats(affected, \"scholarship\")-23)/37) + random_value(-10, 10)\n\npretre = f(\"creer_folk\", kingdom=None, fight_min=2, plot_min=4, diplomacy_min=4, scholarship_min=7, loyalty=loyalty, max_carac=max_carac, sex=Folk.MALE, birth=datetime.now() - timedelta(days=age), traits=qualities, notraits = no_qualities)\n\npe = kingdom.create_pending_event(\"allegeance_pretre\")\npe.set_value(\"pretre\", pretre)\npe.start()", 
    "value_description": "", 
    "on_start": "cout = 15 + 5 * len(affected)\nif kingdom.money < cout :\n  statut = \"Vous n'avez pas les moyens de lancer cette mission.\"\n  stop()\n\nbonus = 0\nif kingdom.get_folk_in_title(\"cure\") in affected:\n  bonus += 4\nif sum_stats(affected, \"scholarship\") + bonus < 24:\n  stop(\"Un plus grand score d'erudition est necessaire pour convaincre l'\u00e9v\u00each\u00e9.\")", 
    "has_target": false, 
    "is_team": false, 
    "title": 3, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 360, 
    "on_cancel": "\n", 
    "slug": "recruter_pretre", 
    "on_init": "\n"
  }
},
{
  "pk": 49, 
  "model": "mission.mission", 
  "fields": {
    "name": "Querir une noble dame", 
    "target_list": "\n", 
    "text": "Partir recruter une dame", 
    "has_value": false, 
    "on_resolution": "age = random_gauss(16,40)\nmax_carac = 32+int((age-16)/5)\n#liste des traits qu'il poss\u00e8de (en plus des traits random)\nqualities = []\nchoix_baisee = (40-age)/24*100\nif choix_baisee <= random_value(1,100):\n  qualities.append(\"jouvancelle\")\n#liste des traits qu'il ne peut pas avoir\nno_qualities = []\n\n\nloyalty = 50 + 30 * int((sum_stats(affected, \"diplomacy\")-23)/37) + random_value(-10, 10)\n\ndame= f(\"creer_folk\", kingdom=None, fight_min=2, plot_min=2, diplomacy_min=2, scholarship_min=2, loyalty=loyalty, max_carac=max_carac, sex=Folk.FEMALE, birth=datetime.now() - timedelta(days=age), traits=qualities, notraits = no_qualities)\n\npe = kingdom.create_pending_event(\"allegeance_dame\")\npe.set_value(\"dame\", dame)\npe.start()", 
    "value_description": "", 
    "on_start": "cout = 15 + 10 * len(affected)\nif kingdom.money < cout :\n  statut = \"Vous n'avez pas les moyen de lancer cette mission.\"\n  stop()\n\nbonus = 0\nif kingdom.get_folk_in_title(\"ambassadeur\") in affected:\n  bonus += 4\nif sum_stats(affected, \"diplomacy\") + bonus < 24:\n  stop(\"Il vous faudra une plus grande force de persuasion pour qu'une noble dame accepte de vous rejoindre.\")", 
    "has_target": false, 
    "is_team": false, 
    "title": 6, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 360, 
    "on_cancel": "\n", 
    "slug": "recruter_dame", 
    "on_init": "\n"
  }
},
{
  "pk": 50, 
  "model": "mission.mission", 
  "fields": {
    "name": "Accepter un courtisan", 
    "target_list": "\n", 
    "text": "Ouvrir les portes de mon ch\u00e2teau et laisser entrer le premier venu ", 
    "has_value": false, 
    "on_resolution": "age = random_gauss(16,40)\nmax_carac = 32+int((age-16)/5)\nloyalty = 50 + 30 * int((sum_stats(affected, \"diplomacy\")-15)/25) + random_value(-10, 10)\nqualities = []\n\nchoice_folk = random_value(0,99)\nif choice_folk < 5:\n  #pretre\n  \n  qualities.append(\"pretre\")\n  #liste des traits qu'il ne peut pas avoir\n  no_qualities = []  \n  folk = f(\"creer_folk\", kingdom=kingdom, fight_min=2, plot_min=4, diplomacy_min=4, scholarship_min=7, loyalty=loyalty, max_carac=max_carac, sex=Folk.MALE, birth=datetime.now() - timedelta(days=age), traits=qualities)\nelif choice_folk < 15:\n  #noble dame\n  choix_baisee = (40-age)/24*100\n  if choix_baisee <= random_value(1,100):\n    qualities.append(\"jouvancelle\")\n  #liste des traits qu'il ne peut pas avoir\n  no_qualities = []\n  folk = f(\"creer_folk\", kingdom=kingdom, fight_min=2, plot_min=2, diplomacy_min=2, scholarship_min=2, loyalty=loyalty, max_carac=max_carac, sex=Folk.FEMALE, birth=datetime.now() - timedelta(days=age), traits=qualities)\nelif choice_folk < 25:\n  #chevalier\n  if random_value(1,100) < (40-age)/24*100 : #il a alors un trait martial\n    qualities.append(random_in([\"archer\", \"cavalier\", \"piquier\"]))\n  folk = f(\"creer_folk\", kingdom=kingdom, fight_min=7, plot_min=1, diplomacy_min=1, scholarship_min=1, loyalty=loyalty, max_carac=max_carac, sex=Folk.MALE, birth=datetime.now() - timedelta(days=age), traits=qualities)\nelse: #random folk\n  folk = f(\"creer_folk\", kingdom=kingdom, fight_min=7, plot_min=1, diplomacy_min=1, scholarship_min=1, loyalty=loyalty, max_carac=max_carac, sex=Folk.MALE, birth=datetime.now() - timedelta(days=age), traits=qualities)    \n  \npe = kingdom.create_pending_event(\"nouveau_courtisan\")\npe.set_value(\"folk\", folk)\npe.start()\n", 
    "value_description": "", 
    "on_start": "\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 4, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 120, 
    "on_cancel": "\n", 
    "slug": "accepter_courtisan", 
    "on_init": "\n"
  }
},
{
  "pk": 51, 
  "model": "mission.mission", 
  "fields": {
    "name": "Compromettre", 
    "target_list": "\n", 
    "text": "Compromettre un membre de ma cour.", 
    "has_value": false, 
    "on_resolution": "comprometeurs = grids['comprometeurs']\ncout_mission = 5 + 5 * len(comprometeurs)\nkingdom.money -= cout_mission\nkingdom.save()\ncompromis = grids['compromis'][0]\n\ndefense = (compromis.plot + compromis.diplomacy) * 1.5\nattaque = sum_stats(folks, 'plot')\nreussite = max(attaque/defense, 1) * 100 - 10\nif  reussite < random_value(1,100):\n  #R\u00e9ussite\n  pe = kingdom.create_pending_event(\"compromettre_success\")\n  \n  if compromis.has_quality(\"admire\"):\n    compromis.remove_quality(\"admire\")\n    compromis.add_quality(\"respecte\")\n    pe.set_value(\"lost\", \"admir\u00e9\")\n    pe.set_value(\"got\", \"respect\u00e9\")\n  elif compromis.has_quality(\"respecte\"):\n    compromis.remove_quality(\"respecte\")\n    pe.set_value(\"lost\", \"respect\u00e9\")\n    pe.set_value(\"got\", None)\n  elif compromis.has_quality(\"meprise\"):\n    compromis.remove_quality(\"meprise\")\n    compromis.add_quality(\"deteste\")\n    pe.set_value(\"lost\", \"m\u00e9pris\u00e9\")\n    pe.set_value(\"got\", \"d\u00e9test\u00e9\")\n  else:\n    compromis.add_quality(\"meprise\")\n    pe.set_value(\"lost\", None)\n    pe.set_value(\"got\", \"m\u00e9pris\u00e9\")\n  \n  pe.set_value(\"compromis\", compromis)\n  pe.set_value(\"comprometeurs\", comprometeurs)\n  \n  pe.start()\nelse:\n  if 100 - reussite < random_value (1,100):\n    #gros echec\n    def perte(facteur, kingdom=kingdom, compromis=compromis):\n      call_function(\"perte_loyaute_general\", kingdom=kingdom, perte_min=C.PERTE_LOYAUTE_BANNISSEMENT*facteur, perte_max=C.PERTE_LOYAUTE_BANNISSEMENT*facteur)\n      for c in compromis:\n        c.loyalty += C.PERTE_LOYAUTE_BANNISSEMENT*facteur\n        c.save()\n      return C.PERTE_LOYAUTE_BANNISSEMENT*facteur\n      \n    perte_loyaute = 0 \n    \n    if compromis.has_quality(\"admire\"):\n      perte_loyaute -= perte(2)\n    elif compromis.has_quality(\"respecte\"):\n      perte_loyaute -= perte(1.5)   \n    else :\n      perte_loyaute -= perte(1)\n      \n    pe = kingdom.create_pending_event(\"compromettre_big_failure\")\n    pe.set_value(\"compromis\", compromis)\n    pe.set_value(\"comprometeurs\", comprometeurs)\n    pe.set_value(\"perte\", perte_loyaute)\n    pe.start()\n\n  else:\n    #echec simple\n    pe = kingdom.create_pending_event(\"compromettre_failure\")\n    pe.set_value(\"compromis\", compromis)\n    pe.set_value(\"comprometeurs\", comprometeurs)\n    pe.start()\n\n  \n", 
    "value_description": "", 
    "on_start": "cout_mission = 5 + 5 * len(grids['comprometeurs'])\nif grids['compromis'][0].has_quality(\"deteste\"):\n  stop(\"Cette personne est d\u00e9j\u00e0 d\u00e9test\u00e9e, il n'est pas utile de la salir encore plus\")\nif kingdom.money < cout_mission:\n  stop(\"Nous n'avez pas assez d'argent pour lancer cette mission (\" + cout_mission + \" \u00e9cus).\")\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 5, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 360, 
    "on_cancel": "\n", 
    "slug": "compromettre", 
    "on_init": "\n"
  }
},
{
  "pk": 52, 
  "model": "mission.mission", 
  "fields": {
    "name": "Espionner l'adversaire", 
    "target_list": null, 
    "text": "mission pour espionner le PNJ", 
    "has_value": false, 
    "on_resolution": null, 
    "value_description": "", 
    "on_start": "kingdom.start_pending_event(\"tuto_rapport_espion\")", 
    "has_target": false, 
    "is_team": false, 
    "title": 5, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": false, 
    "duration": 5, 
    "on_cancel": null, 
    "slug": "tuto_espionnage", 
    "on_init": null
  }
},
{
  "pk": 53, 
  "model": "mission.mission", 
  "fields": {
    "name": "Jurer allegeance", 
    "target_list": "param = Kingdom.objects.all()\n", 
    "text": "Jurer all\u00e9geance \u00e0 un royaume et en faire mon suzerain.", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "", 
    "on_start": "if param.target == kingdom:\n  # Selecting yourself means no master.\n  kingdom.set_value('suzerain', None)\n  pe = kingdom.start_pending_event('annuler_allegeance')\nelse:\n  kingdom.set_value('suzerain', param.target)\n  pe = kingdom.create_pending_event('jurer_allegeance')\n  pe.set_value('suzerain', param.target)\n  pe.start()\n", 
    "has_target": true, 
    "is_team": false, 
    "title": null, 
    "target_description": "Suzerain", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 0, 
    "on_cancel": "\n", 
    "slug": "allegeance", 
    "on_init": "param.target = kingdom.get_value('suzerain')\n"
  }
},
{
  "pk": 54, 
  "model": "mission.mission", 
  "fields": {
    "name": "Escarmouche", 
    "target_list": "\n", 
    "text": "Fi donc, sieur! Ce sera au premier sang. Vous \u00eates l'offens\u00e9, je vous laisse le choix des armes.", 
    "has_value": false, 
    "on_resolution": "kingdom.soldiers+=param.get_value('retour_troupes')", 
    "value_description": "", 
    "on_start": "# Mise en forme des param\u00e8tres \u00e0 passer aux fonctions de calcul\nattaquant = {\n  'troupes': int(C.POURCENTAGE_SOLDATS_ESCARMOUCHE * kingdom.soldiers / 100),\n  'combattants': affected,\n  'population': kingdom.population,\n  'prestige': kingdom.prestige,\n}\n\ndefenseur = {\n  'troupes': int(C.POURCENTAGE_SOLDATS_ESCARMOUCHE * target.soldiers / 100),\n  'combattants': target.get_team('ligne_defense')['affected'][0:3],\n  'population': target.population,\n  'prestige': target.prestige,\n}\n\n# Calculer ce qu'il se passe sans appliquer\ngagnant, perdant, bataille = f(\"determiner_vainqueur_combat\", attaquant=attaquant, defenseur=defenseur)\nis_victory = gagnant == attaquant\n\n# D\u00e9terminer le delta (pas encore appliqu\u00e9)\ndelta = f(\"determiner_modifications_combat\", gagnant=gagnant, perdant=perdant, marge=bataille['marge'], attaquant_est_gagnant=is_victory)\n\n# Appliquer le delta\nif is_victory:\n  pe = kingdom.create_pending_event(\"escarmouche_victoire\")\n  kingdom.soldiers -= attaquant['troupes'] + delta['gagnant']['pertes_troupe']\n  param.set_value('retour_troupes', gagnant['troupes'] - delta['gagnant']['pertes_troupe'])\n  gagnant_kingdom = kingdom\n  perdant_kingdom = target\nelse:\n  pe = kingdom.create_pending_event(\"escarmouche_defaite\")\n  param.set_value('retour_troupes', perdant['troupes'] - delta['perdant']['pertes_troupe'])\n  kingdom.soldiers -= attaquant['troupes'] + delta['perdant']['pertes_troupe']\n  gagnant_kingdom = target\n  perdant_kingdom = kingdom\n\ncommandement = {\n  'gagnant': f(\"leader_de_mission\", royaume=gagnant_kingdom, list_folk=affected),\n  'perdant': f(\"leader_de_mission\", royaume=perdant_kingdom, list_folk=defenseur['combattants']),\n}\n\ngagnant_kingdom.prestige += delta['gagnant']['prestige']\ngagnant_kingdom.money += delta['gagnant']['thune']\ngagnant_kingdom.soldiers -= delta['gagnant']['pertes_troupe']\nperdant_kingdom.prestige += delta['perdant']['prestige']\nperdant_kingdom.soldiers -= delta['perdant']['pertes_troupe']\nperdant_kingdom.population -= delta['perdant']['population']\n\ngagnant_kingdom.save()  \nperdant_kingdom.save()\n\n# Mettre \u00e0 jour \"total_soldats\"\ngagnant_kingdom.set_value('total_soldats', gagnant_kingdom.get_value('total_soldats') - delta['gagnant']['pertes_troupe'])\nperdant_kingdom.set_value('total_soldats', perdant_kingdom.get_value('total_soldats') - delta['perdant']['pertes_troupe'])\n\n# Passage d'arguments pour l'affichage de l'event\npe.set_value(\"is_victory\", is_victory)\npe.set_value(\"attaquant\", True)\npe.set_value(\"gagnant\", gagnant)\npe.set_value(\"perdant\", perdant)\npe.set_value(\"liste_perdant\", f(\"liste_nom_avec_specialite\", commandants=perdant['combattants']))\npe.set_value(\"liste_gagnant\", f(\"liste_nom_avec_specialite\", commandants=gagnant['combattants']))\npe.set_value(\"delta\", delta)\npe.set_value(\"bataille\", bataille)\npe.set_value(\"commandement\", commandement)\npe.set_value(\"target_dynasty\", target.user.username) \npe.start()\n\n# Appliquer les blessures et morts\nfor mort in delta['A_tuer']:\n  mort.die()\nfor blesse in delta['A_blesser']:\n  blesse.add_quality(\"blesse\")\n", 
    "has_target": true, 
    "is_team": false, 
    "title": null, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "escarmouche", 
    "on_init": "\n"
  }
},
{
  "pk": 3, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "chercheurs de noises", 
    "mission": 3, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "chercheurs_noises", 
    "condition": "if folk.age() >= C.MAJORITE:\n  stop(\"Laisse les grands jouer \u00e0 ce jeu\")"
  }
},
{
  "pk": 7, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "taxecour", 
    "mission": 9, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "taxecour", 
    "condition": "\n"
  }
},
{
  "pk": 8, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Collecteur", 
    "mission": 8, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "collecteur", 
    "condition": "\n"
  }
},
{
  "pk": 10, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Banni", 
    "mission": 14, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "banni", 
    "condition": "\n"
  }
},
{
  "pk": 13, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Le mari", 
    "mission": 17, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "mari", 
    "condition": "if folk.age < C.MAJORITE : \n  stop(S.TOO_YOUNG)\nelif folk.sex == Folk.FEMALE :\n  stop(\"Le mari doit \u00eatre un homme\")\nelif folk.has_quality(\"pretre\") :\n  stop(\"Un pr\u00eatre ne peut pas se marier\")\nelif (kingdom.get_value(\"in_tuto\") == True and folk==folks[0]):\n  stop(\"Il est encore trop tot pour songer \u00e0 marier votre chatelain\")\nelif (kingdom.get_value(\"passage_proposition_mariage\", False) and  folk==folks[1]):\n  stop(\"Il est encore trop tot pour songer \u00e0 marier votre fils\")\nelif folk.spouse != None and folk.spouse.death == None:\n  stop(\"Cette personne est d\u00e9j\u00e0 mari\u00e9e\")\n"
  }
},
{
  "pk": 14, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "La femme", 
    "mission": 17, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "femme", 
    "condition": "if folk.age < C.MAJORITE:\n  stop(S.TOO_YOUNG)\nelif folk.sex == Folk.MALE:\n  stop(\"La mari\u00e9e doit \u00eatre une femme\")\nelif folk.spouse != None and folk.spouse.death == None:\n  stop(\"Cette personne est d\u00e9j\u00e0 mari\u00e9e\")\n"
  }
},
{
  "pk": 16, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Prisonnier", 
    "mission": 20, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "prisonnier", 
    "condition": "\n"
  }
},
{
  "pk": 17, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": true, 
    "name": "Prisonnier", 
    "mission": 21, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "libere", 
    "condition": "if folk.has_quality(\"prisonnier\") is False:\n  stop(\"Cette personne est d\u00e9j\u00e0 libre\")\n"
  }
},
{
  "pk": 19, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Mentor", 
    "mission": 23, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "mentor", 
    "condition": "if folk.age()< C.MAJORITE:\n  stop(S.TOO_YOUNG)\n"
  }
},
{
  "pk": 20, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Enfant", 
    "mission": 23, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "enfant", 
    "condition": "if folk.age() > C.MAJORITE:\n  stop(S.TOO_YOUNG)\n"
  }
},
{
  "pk": 21, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Recruteurs", 
    "mission": 4, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "recruteurs", 
    "condition": "if folk.sex==Folk.FEMALE:\n  stop(\"il faut une homme\")\n"
  }
},
{
  "pk": 22, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Agents", 
    "mission": 6, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "agents", 
    "condition": "\n"
  }
},
{
  "pk": 23, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Espion", 
    "mission": 27, 
    "length": 200, 
    "allow_empty": false, 
    "slug": "espion", 
    "condition": "if PendingMissionAffectation.objects.filter(pending_mission=param.pending_mission, mission_grid=param.mission_grid).count() > kingdom.prestige / 10:\n  stop(\"Vous ne pouvez plus rajouter de personne \u00e0 cette mission\")\nif folk.age < C.MAJORITE:\n  stop(\"Un enfant ne peut pas effectuer cette mission\")\n\n"
  }
},
{
  "pk": 26, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Attaquants", 
    "mission": 26, 
    "length": 4, 
    "allow_empty": false, 
    "slug": "attaquants", 
    "condition": "if folk.age() < C.MAJORITE:\n  stop(\"Vous ne pouvez pas affecter un enfant \u00e0 cette mission.\")\nelif folk.sex == Folk.FEMALE:\n  stop(\"Vous ne pouvez pas affecter de femme \u00e0 cette mission\")\n"
  }
},
{
  "pk": 29, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Organisateurs", 
    "mission": 31, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "organisateurs", 
    "condition": "\n"
  }
},
{
  "pk": 30, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "organisateurs", 
    "mission": 10, 
    "length": 3, 
    "allow_empty": false, 
    "slug": "organisateurs", 
    "condition": "if folk.age() < C.MAJORITE:\n  stop(\"Grandis un peu, gamin, et reviens un peu plus tard !\")\n"
  }
},
{
  "pk": 31, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Ch\u00e2telain", 
    "mission": 32, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "chatelain", 
    "condition": "if folk != kingdom.get_folk_in_title(\"chatelain\"):\n  stop(\"Seul le chatelain peut endosser ce r\u00f4le pour lancer cette mission\")\n"
  }
},
{
  "pk": 32, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Chasseurs", 
    "mission": 32, 
    "length": 10, 
    "allow_empty": false, 
    "slug": "chasseurs", 
    "condition": "if folk.sex == Folk.FEMALE or folk.has_quality(\"pretre\") or folk.age() < C.MAJORITE:\n  stop(\"Le chasseur doit \u00eatre un chevalier adulte\")\n"
  }
},
{
  "pk": 34, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "R\u00e9parateurs", 
    "mission": 11, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "reparateurs", 
    "condition": "\n"
  }
},
{
  "pk": 36, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "D\u00e9fenseurs", 
    "mission": 35, 
    "length": 4, 
    "allow_empty": false, 
    "slug": "defenseurs", 
    "condition": "if folk.sex==Folk.FEMALE:\n  stop(\"Depuis des temps imm\u00e9moriaux les femmes ont persuad\u00e9 les hommes que c'\u00e9taient \u00e0 eux de mourrir. On ne revient pas sur des privil\u00e8ges durement gagn\u00e9s.\")"
  }
},
{
  "pk": 38, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Responsables", 
    "mission": 38, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "responsables", 
    "condition": "\n"
  }
},
{
  "pk": 39, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Enfant", 
    "mission": 39, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "enfant", 
    "condition": "if folk.age() > C.MAJORITE:\n  stop(S.TOO_YOUNG)\n"
  }
},
{
  "pk": 40, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Mentor", 
    "mission": 39, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "mentor", 
    "condition": "if folk.age()< C.MAJORITE:\n  stop(S.TOO_YOUNG)\n"
  }
},
{
  "pk": 41, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Diplomates", 
    "mission": 40, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "diplomates", 
    "condition": "\n"
  }
},
{
  "pk": 42, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Combattants", 
    "mission": 41, 
    "length": 3, 
    "allow_empty": false, 
    "slug": "combattants", 
    "condition": "\n"
  }
},
{
  "pk": 43, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "sneaky bitches", 
    "mission": 42, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "attaquants", 
    "condition": "\n"
  }
},
{
  "pk": 44, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": true, 
    "name": "D\u00e9fenseurs", 
    "mission": 43, 
    "length": 1000, 
    "allow_empty": false, 
    "slug": "defenseurs", 
    "condition": "if folk.age()< C.MAJORITE:\n  stop(S.TOO_YOUNG)\nif folk.sex == Folk.FEMALE:\n  stop(\"Seul un homme peut \u00eatre choisi pour d\u00e9fendre la cit\u00e9.\")\n"
  }
},
{
  "pk": 45, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Espions", 
    "mission": 44, 
    "length": 3, 
    "allow_empty": false, 
    "slug": "espions", 
    "condition": "if folk.age() < C.MAJORITE:\n  stop(S.TOO_YOUNG)\n"
  }
},
{
  "pk": 46, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Espions", 
    "mission": 45, 
    "length": 3, 
    "allow_empty": false, 
    "slug": "espions", 
    "condition": "if folk.age() < C.MAJORITE:\n  stop(S.TOO_YOUNG)\n"
  }
},
{
  "pk": 48, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Recruteurs", 
    "mission": 47, 
    "length": 3, 
    "allow_empty": false, 
    "slug": "recruteurs", 
    "condition": "if folk.age() < C.MAJORITE:\n  stop(S.TOO_YOUNG)\n"
  }
},
{
  "pk": 49, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Recruteurs", 
    "mission": 48, 
    "length": 3, 
    "allow_empty": false, 
    "slug": "recruteurs", 
    "condition": "if folk.age() < C.MAJORITE:\n  stop(S.TOO_YOUNG)\n"
  }
},
{
  "pk": 50, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Recruteurs", 
    "mission": 49, 
    "length": 3, 
    "allow_empty": false, 
    "slug": "recruteurs", 
    "condition": "if folk.age() < C.MAJORITE:\n  stop(S.TOO_YOUNG)\n"
  }
},
{
  "pk": 51, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Responsables d'accueil", 
    "mission": 50, 
    "length": 2, 
    "allow_empty": false, 
    "slug": "accueil", 
    "condition": "if folk.age() < C.MAJORITE:\n  stop(S.TOO_YOUNG)\n"
  }
},
{
  "pk": 52, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Condamn\u00e9", 
    "mission": 22, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "condamne", 
    "condition": "\n"
  }
},
{
  "pk": 53, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Cible", 
    "mission": 51, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "compromis", 
    "condition": "if folk.has_quality(\"deteste\"):\n  status = \"Cette personne est d\u00e9j\u00e0 d\u00e9test\u00e9e\"\n"
  }
},
{
  "pk": 54, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Complices", 
    "mission": 51, 
    "length": 3, 
    "allow_empty": false, 
    "slug": "comprometeurs", 
    "condition": "\n"
  }
},
{
  "pk": 55, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "espions", 
    "mission": 52, 
    "length": 3, 
    "allow_empty": false, 
    "slug": "espions", 
    "condition": null
  }
},
{
  "pk": 56, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Vendeurs de promesses", 
    "mission": 18, 
    "length": 3, 
    "allow_empty": false, 
    "slug": "Vendeurs_de_promesses", 
    "condition": null
  }
},
{
  "pk": 57, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Attaquants", 
    "mission": 54, 
    "length": 3, 
    "allow_empty": false, 
    "slug": "attaquants", 
    "condition": "\n"
  }
},
{
  "pk": 58, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Recruteurs", 
    "mission": 37, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "recruteurs", 
    "condition": "\n"
  }
}
]
