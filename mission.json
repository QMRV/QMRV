[
{
  "pk": 2, 
  "model": "mission.mission", 
  "fields": {
    "name": "Se d\u00e9fendre des brigands", 
    "target_list": "  ", 
    "text": "Alignez vos combattants pour vous d\u00e9fendre !\r\n[Glissez des personnages de votre cour dans la grille, puis lancez la mission.\r\nUne d\u00e9fense perdue fait perdre du prestige et des \u00e9cus. Une bataille gagn\u00e9e fait gagner du prestige. Dans tous les cas, un pourcentage de votre population et les d\u00e9fenseurs jouent leur vie dans cette bataille.]", 
    "has_value": false, 
    "on_resolution": "somme_combat=sum_folks(grids['defenseurs'], \"fight\")\n\npeuple_immobilise=param.get_value(\"population_immobilisee\")\n  \nif somme_combat>15:\n  type_glorieux=random_in(grids['defenseurs'])\n  param.set_value(\"type_glorieux\", type_glorieux)\n  #param.next_event(\"tuto_bandits_gagne\").start()\nelif somme_combat>9:\n  pass #param.next_event(\"tuto_bandits_bofgagne\").start()\nelse:\n  pass #param.next_event(\"tuto_bandits_perdu\").start()\n", 
    "value_description": "Valeur :", 
    "on_start": "peuple_immobilise=kingdom.population*0.1\nkingdom.population-=peuple_immobilise\nkingdom.save()\nparam.set_value(\"population_immobilisee\", peuple_immobilise)\n#d\u00e9clencher un \u00e9v\u00e8nement au d\u00e9part des troupes : ", 
    "has_target": false, 
    "is_team": false, 
    "title": 2, 
    "target_description": "Cible", 
    "timeout": 1440, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "dummy_tuto_brigand_defense", 
    "on_init": "  "
  }
},
{
  "pk": 3, 
  "model": "mission.mission", 
  "fields": {
    "name": "Chercher des noises", 
    "target_list": "param = Kingdom.objects.filter(offended_set__offender=kingdom)", 
    "text": "Aller chercher des noises \u00e0 votre voisin.\r\n\r\n\r\n[co\u00fbt 25 ecus pour lancer la mission]", 
    "has_value": false, 
    "on_resolution": "a = 0\nfor folk in grids['chercheurs_noises']:\n  a += folk.diplomacy\nd = 0\ntry :\n  d += target.get_folk_in_title(\"diplomate\").diplomacy * 3\nexcept:\n  pass\nd += sum_folks(folks.filter(mission=None, birth__gte=datetime.now() - timedelta(days=C.MAJORITE)), \"diplomacy\")\nd *= 0.3\n\n\nif a>d:\n  kingdom.add_claim(target, Claim.REACHABLE)\n  pe = PendingEvent(event=Event.objects.get(slug=\"getaffront_diplomatie_kingdomsuccess\"),kingdom=kingdom,started=None)\n  pe.save()\n  pe.set_value(\"defenseur\", target)\n  pe.start()\n  pe = PendingEvent(event=Event.objects.get(slug=\"getaffront_diplomatie_targetsuccess\"),kingdom=target,started=None)\n  pe.save()\n  pe.set_value(\"attaquant\", kingdom)\n  pe.start()\n  #evenement attaquer\n  kingdom.create_pending_mission(\"escarmouche\")\n\n  \n   \nelse:\n  pe = PendingEvent(Event.objects.get(slug=\"getaffront_diplomatie_kingdomfailure\"),kingdom=kingdom,started=None)\n  pe.save()\n  pe.set_value(\"attaquant\", kingdom)\n  pe.start()\n  pe = PendingEvent(Event.objects.get(slug=\"getaffront_diplomatie_targetfailure\"),kingdom=target,started=None)\n  pe.save()\n  pe.set_value(\"attaquant\", kingdom)\n  pe.start()\nkingdom.money-=25  ", 
    "value_description": "Valeur :", 
    "on_start": " ", 
    "has_target": true, 
    "is_team": false, 
    "title": 6, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 1440, 
    "on_cancel": "\n", 
    "slug": "getaffront_diplomatie", 
    "on_init": " "
  }
},
{
  "pk": 4, 
  "model": "mission.mission", 
  "fields": {
    "name": "Recruter des hommes d'arme", 
    "target_list": "   ", 
    "text": "Il faut recruter une arm\u00e9e", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "Valeur :", 
    "on_start": "kingdom.start_pending_event(\"tuto_recrutement\")   ", 
    "has_target": false, 
    "is_team": false, 
    "title": 2, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "status=\"gofuck\"\n", 
    "slug": "tuto_recrutement", 
    "on_init": "  "
  }
},
{
  "pk": 5, 
  "model": "mission.mission", 
  "fields": {
    "name": "Escarmouche", 
    "target_list": "param = Kingdom.objects.filter(offender_set__offended=kingdom)\n", 
    "text": "Une escarmouche est une petite bataille entre deux seigneurs. C'est le cas classique de bataille pour l'honneur et un peu de butin. Les lois de l'honneur vous permettent d'envoyer une partie de votre population et jusqu'\u00e0 4 hommes de votre cour pour les commander. Les frais pour le voyage, les vivres et la remise en \u00e9tat du mat\u00e9riel s'\u00e9l\u00e8vent \u00e0 30 \u00e9cus.\r\n[Pour chaque joueur : \r\n**score=[somme des combats des commandeurs+population_envoy\u00e9e+bonus_cavalerie+bonus_strat\u00e8ge]+/- 10%**\r\n**population envoy\u00e9e**=10% de population max\r\n**bonus_cavalerie** : +1 pour chacun de vos cavaliers\r\n**bonus_strat\u00e8ge** :\r\npour chacun de vos archer : +3 (1 fois/piquer adverse max)\r\npour chacun de vos piquier : +4 (1 fois/cavalier adverse max)\r\npour chacun de vos cavalier : +2 (1 fois/archer adverse max)\r\n\r\nLe joueur ayant le meilleur score de combat gagne du prestige, l'autre joueur en perds. Le joueur qui attaque a besoin d'un affront contre l'autre joueur pour effectuer la mission, s'il gagne il gagne de l'or mais ne peux pas en perdre. Aucun combattant n'est \u00e0 l'abri de se faire blesser ou tuer au cours d'une escarmouche...\r\n\r\n***exemple de calcul de bonus** : si vous avez 2 piquiers et un archer et votre adversaire un [\u00e9p\u00e9iste ou sans sp\u00e9cialisation], un cavalier et un lancier.\r\n-Votre adversaire gagne +1 parce qu'il a un cavalier, +2 suppl\u00e9mentaires parce qu'il a un cavalier et que vous avez un archer. Son piquier aurait pu lui donner +4 si vous aviez un cavalier mais vous n'en avez pas donc +0 et son dernier personnage ne lui donne pas de bonus. Il a au total un +3.\r\n-Avec vos piquiers vous auriez pu gagner deux fois +4 si votre adversaire avait 2 cavaliers mais il n'en a qu'un, donc vous \u00eates limit\u00e9 \u00e0 un seul +4. Votre archer a un bonus de +3 contre le piquier adverse. Vous totalisez un bonus de +7.*]", 
    "has_value": false, 
    "on_resolution": "grille_defenseur=param.get_value(\"grille_defenseur\")\nretour_fonction=call_function(\"resolution_combat\",\n                population_envoyee_attaquant=param.get_value(\"population_envoyee_attaquant\"),\n                population_envoyee_defenseur=param.get_value(\"population_envoyee_defenseur\"),\n                grille_attaquant=grids['combattants'],\n                grille_defenseur=grille_defenseur,\n                royaume_attaquant=kingdom,\n                royaume_defenseur=target,\n                pourcent_mort=30,\n                pourcent_blesse=80,\n                pourcentage_pop_meurt_base=30,\n                pourcentage_population=8,\n                gain_maxi_prestige=30,\n                limit_difference_prestige=100)\n              \n\n#si chatelain est dans la grille alors chatelain, sinon si connetable est dans la mission alors connetable, sinon le mec qui la le plus gros combat\ntest=0\n\nchatelain_gagnant=False\nchatelain_perdant=False\nconnetable_gagnant=False\nconnetable_perdant=False\n\n#on part du principe de le gagnant est le vainqueur\n\nif kingdom.get_folk_in_title(\"chatelain\") in grids['combattants']:\n  test=1\n  general_attaquant=personnage\n  chatelain_gagnant=True\n\nif test==0:\n    if kingdom.get_folk_in_title(\"connetable\") in grids['combattants']:\n      connetable_gagnant=True\n      test=1\n      general_attaquant=personnage\n\nif test==0:\n  combat_min=0\n  for personnage in grids['combattants']:\n    if personnage.fight>combat_min:\n      combat_min=personnage.fight\n      general_attaquant=personnage\n\ntest=0      \nif target.get_folk_in_title(\"chatelain\") in grille_defenseur:\n    test=1\n    chatelain_perdant=True\n    general_defenseur=personnage\n\nif test==0:\n  if target.get_folk_in_title(\"conn\u00e9table\") in grille_defenseur:\n    test=1\n    connetable_perdant=True\n    general_defenseur=personnage\n\nif test==0:\n  combat_min=0\n  for personnage in grille_defenseur:\n    if personnage.fight>combat_min:\n      combat_min=personnage.fight\n      general_defenseur=personnage\n\n#si ce n'est pas le cas on inverse      \nif retour_fonction[\"attaquant_egal_vainqueur\"]==False:\n  connetable_attaquant=connetable_perdant\n  connetable_perdant=connetable_gagnant\n  connetable_gagnant=connetable_attaquant\n  connetable_defenseur=connetable_gagnant\n  chatelain_attaquant=chatelain_perdant\n  chatelain_perdant=chatelain_gagnant\n  chatelain_gagnant=chatelain_attaquant\n  chatelain_defenseur=chatelain_gagnant\n  general_attaquant=general_perdant\n  general_perdant=general_vainqueur\n  general_vainqueur=general_attaquant\n  general_defenseur=general_vainqueur\nelse:\n  connetable_attaquant=connetable_gagnant\n  connetable_defenseur=connetable_perdant\n  chatelain_attaquant=chatelain_gagnant\n  chatelain_defenseur=chatelain_perdant\n  general_attaquant=general_vainqueur\n  general_defenseur=general_perdant   \n\npe=PendingEvent(event=Event.objects.get(slug=\"escarmouche_attaque\"),kingdom=kingdom,started=None)\npe.save()\npe.set_value(\"vainqueur\",retour_fonction[\"vainqueur\"])\npe.set_value(\"perdant\",retour_fonction[\"perdant\"])\npe.set_value(\"chatelain_defenseur\",target.get_folk_in_title(\"chatelain\"))\npe.set_value(\"vainqueur_est_attaquant\",retour_fonction[\"attaquant_egal_vainqueur\"])\nif retour_fonction[\"attaquant_egal_vainqueur\"]:\n  pe.set_value(\"pop_envoyee_gagnant\",retour_fonction[\"population_envoyee_attaquant\"])\n  pe.set_value(\"pop_envoyee_perdant\",retour_fonction[\"population_envoyee_defenseur\"])\nelse:\n  pe.set_value(\"pop_envoyee_gagnant\",retour_fonction[\"population_envoyee_defenseur\"])\n  pe.set_value(\"pop_envoyee_perdant\",retour_fonction[\"population_envoyee_attaquant\"]) \npe.set_value(\"pop_pertes_vainqueur\",retour_fonction[\"perte_population_vainqueur\"])\npe.set_value(\"pop_pertes_perdant\",retour_fonction[\"perte_population_perdant\"])\npe.set_value(\"chatelain_in_mission_vainqueur\",chatelain_gagnant)\npe.set_value(\"connetable_in_mission_vainqueur\",connetable_gagnant)\npe.set_value(\"chatelain_in_mission_perdant\",chatelain_perdant)\npe.set_value(\"connetable_in_mission_perdant\",connetable_perdant)\npe.set_value(\"chatelain_in_mission_attaquant\",chatelain_attaquant)\npe.set_value(\"connetable_in_mission_attaquant\",connetable_attaquant)\n#pe.set_value(\"chatelain_in_mission_defenseur\",chatelain_defenseur)\n#pe.set_value(\"connetable_in_mission_defenseur\",connetable_defenseur)\npe.set_value(\"general_attaquant\",general_attaquant)\npe.set_value(\"general_vainqueur\",general_vainqueur)\npe.set_value(\"general_perdant\",general_perdant)\npe.set_value(\"morts_gagnant\",retour_fonction[\"morts_gagnant\"])\npe.set_value(\"blesses_gagnant\",retour_fonction[\"blesses_gagnant\"])\npe.set_value(\"morts_perdants\",retour_fonction[\"morts_perdant\"])\npe.set_value(\"blesses_perdants\",retour_fonction[\"blesses_perdant\"])\npe.set_value(\"gain_monnaie_attaquant\",retour_fonction[\"gain_monnaie_attaquant\"])\npe.set_value(\"gain_prestige_vainqueur\",retour_fonction[\"gain_prestige_vainqueur\"])\npe.set_value(\"perte_prestige_perdant\",retour_fonction[\"perte_prestige_perdant\"])\npe.start()\n#declencher affichage pour la defense\n\npe=PendingEvent(event=Event.objects.get(slug=\"escarmouche_defense\"),kingdom=target,started=None)\npe.save()\npe.set_value(\"vainqueur\",retour_fonction[\"vainqueur\"])\npe.set_value(\"perdant\",retour_fonction[\"perdant\"])\npe.set_value(\"vainqueur_est_attaquant\",retour_fonction[\"attaquant_egal_vainqueur\"])\nif retour_fonction[\"attaquant_egal_vainqueur\"]:\n  pe.set_value(\"pop_envoyee_gagnant\",retour_fonction[\"population_envoyee_attaquant\"])\n  pe.set_value(\"pop_envoyee_perdant\",retour_fonction[\"population_envoyee_defenseur\"])\nelse:\n  pe.set_value(\"pop_envoyee_gagnant\",retour_fonction[\"population_envoyee_defenseur\"])\n  pe.set_value(\"pop_envoyee_perdant\",retour_fonction[\"population_envoyee_attaquant\"])\npe.set_value(\"pop_pertes_vainqueur\",retour_fonction[\"perte_population_vainqueur\"])\npe.set_value(\"pop_pertes_perdant\",retour_fonction[\"perte_population_perdant\"])\npe.set_value(\"chatelain_in_mission_vainqueur\",chatelain_gagnant)\npe.set_value(\"connetable_in_mission_gagnant\",connetable_gagnant)\npe.set_value(\"chatelain_in_mission_perdant\",chatelain_perdant)\npe.set_value(\"connetable_in_mission_perdant\",connetable_perdant)\n#pe.set_value(\"chatelain_in_mission_attaquant\",chatelain_attaquant)\n#pe.set_value(\"connetable_in_mission_attaquant\",connetable_attaquant)\npe.set_value(\"chatelain_in_mission_defenseur\",chatelain_defenseur)\npe.set_value(\"connetable_in_mission_defenseur\",connetable_defenseur)\npe.set_value(\"general_defenseur\",general_defenseur)\npe.set_value(\"general_vainqueur\",general_vainqueur)\npe.set_value(\"general_perdant\",general_perdant)\npe.set_value(\"morts_gagnant\",retour_fonction[\"morts_gagnant\"])\npe.set_value(\"blesses_gagnant\",retour_fonction[\"blesses_gagnant\"])\npe.set_value(\"morts_perdants\",retour_fonction[\"morts_perdant\"])\npe.set_value(\"blesses_perdants\",retour_fonction[\"blesses_perdant\"])\npe.set_value(\"gain_monnaie_attaquant\",retour_fonction[\"gain_monnaie_attaquant\"])\npe.set_value(\"gain_prestige_vainqueur\",retour_fonction[\"gain_prestige_vainqueur\"])\npe.set_value(\"perte_prestige_perdant\",retour_fonction[\"perte_prestige_perdant\"])\npe.start()\n", 
    "value_description": " ", 
    "on_start": "if Claim.objects.filter(offended=kingdom,level__gte=Claim.CLAIM,offender=target).count()==0:\n  status=\"Ce voisin l\u00e0 m\u00e9riterait surement qu'on lui d\u00e9clare la guerre, mais seulement une fois que j'aurais un affront \u00e0 laver. Quitte \u00e0 aller chercher cet affront s'il le faut.\"\nelse:\n  population_envoyee_attaquant=kingdom.population*0.1\n  kingdom.population-=population_envoyee_attaquant\n  param.set_value(\"population_envoyee_attaquant\",population_envoyee_attaquant)\n  kingdom.money-=30\n  kingdom.save()\n  pe=PendingEvent(event=Event.objects.get(slug=\"escarmouche_warning\"),kingdom=target,started=None)\n  pe.save()\n  pe.set_value(\"kingdom_attaquant\",kingdom)\n  pe.set_value(\"mission_attaque\",param)\n  pe.start()\n", 
    "has_target": true, 
    "is_team": false, 
    "title": 2, 
    "target_description": "Le seigneur que vous vous d\u00e9cidez \u00e0 affronter", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 1440, 
    "on_cancel": "\n", 
    "slug": "escarmouche", 
    "on_init": "if Claim.objects.filter(offended=kingdom).count()==0:\n  status=\"il vous faut un affront pour d\u00e9clencher une escarmouche\"\n"
  }
},
{
  "pk": 6, 
  "model": "mission.mission", 
  "fields": {
    "name": "S'acheter des amis", 
    "target_list": " ", 
    "text": "Il faut acheter sa confiance aupr\u00e8s du peuple", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "Valeur :", 
    "on_start": "kingdom.start_pending_event(\"tuto_potsdevin\")", 
    "has_target": false, 
    "is_team": false, 
    "title": 5, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "tuto_potsdevin", 
    "on_init": " "
  }
},
{
  "pk": 7, 
  "model": "mission.mission", 
  "fields": {
    "name": "Emprunt", 
    "target_list": " ", 
    "text": "Charger le tr\u00e9sorier de trouver des cr\u00e9anciers dispos\u00e9s \u00e0 nous pr\u00eater de l'argent.", 
    "has_value": false, 
    "on_resolution": " ", 
    "value_description": "Valeur :", 
    "on_start": " ", 
    "has_target": false, 
    "is_team": false, 
    "title": 7, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "emprunt", 
    "on_init": " "
  }
},
{
  "pk": 8, 
  "model": "mission.mission", 
  "fields": {
    "name": "Lever un imp\u00f4t sp\u00e9cial", 
    "target_list": " ", 
    "text": "Une taxe sur l'ensemble de mes serfs. ", 
    "has_value": true, 
    "on_resolution": "pe = PendingEvent(event=Event.objects.get(slug=\"taxepaysanne\"), kingdom=kingdom, started=None)\npe.save()\npe.set_value(\"somme_taxe\", value)\npe.start()\n", 
    "value_description": "Somme totale \u00e0 taxer", 
    "on_start": "\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 7, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "taxepaysanne", 
    "on_init": " "
  }
},
{
  "pk": 9, 
  "model": "mission.mission", 
  "fields": {
    "name": "Couper les vivres", 
    "target_list": " ", 
    "text": "Forcer les courtisans \u00e0 payer une partie des d\u00e9penses du ch\u00e2teau.", 
    "has_value": false, 
    "on_resolution": "PendingEvent(event=Event.objects.get(slug=\"taxecour\"), kingdom=kingdom).start()\n", 
    "value_description": "Valeur :", 
    "on_start": " ", 
    "has_target": false, 
    "is_team": false, 
    "title": 7, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "taxecour", 
    "on_init": " "
  }
},
{
  "pk": 10, 
  "model": "mission.mission", 
  "fields": {
    "name": "Banquet", 
    "target_list": " ", 
    "text": " ", 
    "has_value": false, 
    "on_resolution": "  \n", 
    "value_description": "Valeur :", 
    "on_start": "pe = PendingEvent(kingdom=kingdom, event=Event.objects.get(slug=\"tuto_banquet\"))\npe.save()", 
    "has_target": false, 
    "is_team": false, 
    "title": 4, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "tuto_banquet", 
    "on_init": "\n"
  }
},
{
  "pk": 11, 
  "model": "mission.mission", 
  "fields": {
    "name": "R\u00e9parer l'\u00e9glise", 
    "target_list": " ", 
    "text": "  ", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "Valeur :", 
    "on_start": "kingdom.money -= 15\nkingdom.save()\n\npe = PendingEvent(kingdom=kingdom, event=Event.objects.get(slug=\"tuto_eglise\"))\npe.save()                                                      \n", 
    "has_target": false, 
    "is_team": false, 
    "title": 3, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 1, 
    "on_cancel": "\n", 
    "slug": "tuto_eglise", 
    "on_init": " "
  }
},
{
  "pk": 13, 
  "model": "mission.mission", 
  "fields": {
    "name": "Nommer les d\u00e9fenseurs", 
    "target_list": " ", 
    "text": "Une escarmouche est une petite bataille entre deux seigneurs. C'est le cas classique de bataille pour l'honneur et un peu de butin. Les lois de l'honneur vous permettent d'envoyer une partie de votre population et jusqu'\u00e0 4 hommes de votre cour pour les commander. Vous avez peu de temps pour pr\u00e9parer la d\u00e9fense.\r\n[Pour chaque joueur : \r\n**score=[somme des combats des commandeurs+population_envoy\u00e9e+bonus_cavalerie+bonus_strat\u00e8ge]+/- 10%**\r\n**population envoy\u00e9e**=10% de population max\r\n**bonus_cavalerie** : +1 pour chacun de vos cavaliers\r\n**bonus_strat\u00e8ge** :\r\npour chacun de vos archer : +3 (1 fois/piquer adverse max)\r\npour chacun de vos piquier : +4 (1 fois/cavalier adverse max)\r\npour chacun de vos cavalier : +2 (1 fois/archer adverse max)\r\n\r\nLe joueur ayant le meilleur score de combat gagne du prestige, l'autre joueur en perds. Le joueur qui attaque a besoin d'un affront contre l'autre joueur pour effectuer la mission, s'il gagne il gagne de l'or mais ne peux pas en perdre. Aucun combattant n'est \u00e0 l'abri de se faire blesser ou tuer au cours d'une escarmouche...\r\n\r\n***exemple de calcul de bonus** : si vous avez 2 piquiers et un archer et votre adversaire un [\u00e9p\u00e9iste ou sans sp\u00e9cialisation], un cavalier et un lancier.\r\n-Votre adversaire gagne +1 parce qu'il a un cavalier, +2 suppl\u00e9mentaires parce qu'il a un cavalier et que vous avez un archer. Son piquier aurait pu lui donner +4 si vous aviez un cavalier mais vous n'en avez pas donc +0 et son dernier personnage ne lui donne pas de bonus. Il a au total un +3.\r\n-Avec vos piquiers vous auriez pu gagner deux fois +4 si votre adversaire avait 2 cavaliers mais il n'en a qu'un, donc vous \u00eates limit\u00e9 \u00e0 un seul +4. Votre archer a un bonus de +3 contre le piquier adverse. Vous totalisez un bonus de +7.*]", 
    "has_value": false, 
    "on_resolution": " #gerer le tiemout\n", 
    "value_description": "Valeur :", 
    "on_start": "param.get_value(\"mission_attaque\").set_value(\"grille_defenseur\",grids['defenseurs'])\npopulation_envoyee_defenseur=kingdom.population*0.1\nkingdom.population-=population_envoyee_defenseur\nparam.get_value(\"mission_attaque\").set_value(\"population_envoyee_defenseur\",population_envoyee_defenseur)\nkingdom.save()\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 2, 
    "target_description": "Cible", 
    "timeout": 1440, 
    "is_cancellable": true, 
    "duration": 60, 
    "on_cancel": "\n", 
    "slug": "escarmouche_defense", 
    "on_init": " "
  }
},
{
  "pk": 14, 
  "model": "mission.mission", 
  "fields": {
    "name": "Bannir un membre de ta cour", 
    "target_list": " ", 
    "text": "Je souhaite bannir un m\u00e9cr\u00e9ant", 
    "has_value": false, 
    "on_resolution": "banni = grids['banni'][0]\nbanni.kingdom = None\nbanni.save()\n\npe = PendingEvent(event=Event.objects.get(slug=\"bannissement\"), kingdom=kingdom, started=datetime.now() + timedelta(hours=6))\npe.save()\npe.set_value(\"banni\", banni)\n", 
    "value_description": "Valeur :", 
    "on_start": " ", 
    "has_target": false, 
    "is_team": false, 
    "title": 4, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 0, 
    "on_cancel": "\n", 
    "slug": "bannir_folk", 
    "on_init": " "
  }
},
{
  "pk": 15, 
  "model": "mission.mission", 
  "fields": {
    "name": "Trouver des pr\u00eatres", 
    "target_list": " ", 
    "text": "Nous sommes en manque d'homme d'Eglise ! Allons en chercher dans les bois", 
    "has_value": false, 
    "on_resolution": "pretre = call_function(\"creer_folk\", kingdom=kingdom, plot_min=2, fight_min=2, scholarship_min=8, diplomacy_min=6, max_carac =32, sex=Folk.MALE, loyalty=60, birth=(datetime.now() - timedelta(days=35)), trait=\"pretre\")\n", 
    "value_description": "Valeur :", 
    "on_start": " ", 
    "has_target": false, 
    "is_team": false, 
    "title": 3, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 120, 
    "on_cancel": "\n", 
    "slug": "trouver_pretre", 
    "on_init": " "
  }
},
{
  "pk": 16, 
  "model": "mission.mission", 
  "fields": {
    "name": "entr\u00e9e dans les ordres", 
    "target_list": " ", 
    "text": "J'envoie un de mes hommes se former dans les ordres", 
    "has_value": false, 
    "on_resolution": "call_function(\"unlock_cure\", kingdom=kingdom)\nfolks[0].add_quality(\"pretre\")\nfolks[0].save()\n", 
    "value_description": "Valeur :", 
    "on_start": " ", 
    "has_target": false, 
    "is_team": false, 
    "title": 3, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 1440, 
    "on_cancel": "\n", 
    "slug": "entree_ordre", 
    "on_init": " "
  }
},
{
  "pk": 17, 
  "model": "mission.mission", 
  "fields": {
    "name": "Marier", 
    "target_list": "\n", 
    "text": "Si une personne de votre dynastie est mari\u00e9e, le banquet qui s'ensuit est \u00e0 votre charge et coute 5 \u00e9cus par personne pr\u00e9sente dans votre cour au moment o\u00f9 le mariage est c\u00e9l\u00e9br\u00e9.", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "Valeur :", 
    "on_start": "if (grids['mari'][0].last_name == kingdom.user.username or grids['femme'][0].last_name == kingdom.user.username):\n  prix = 5*folks.filter(mission__isnull=True).count()\n  if kingdom.money < prix:\n    status=\"Vous n'avez pas assez d'argent pour payer le banquet\"\n    stop()\n  else:\n    kingdom.money -= prix\n    kingdom.save()\ngrids['mari'][0].spouse = grids['femme'][0]\ngrids['femme'][0].spouse = grids['mari'][0]\ngrids['mari'][0].save()\ngrids['femme'][0].save()\nif grids['mari'][0]==folks[3] and grids['femme'][0]==folks[2]:\n  kingdom.set_value(\"tuto_mariage_fait\",True)\n  pe=kingdom.create_pending_event(\"banquet\")\n  pe.set_value(\"banquet_mariage_tuto\",True)\n  pe.start()\n  \n", 
    "has_target": false, 
    "is_team": false, 
    "title": 3, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 0, 
    "on_cancel": "\n", 
    "slug": "marier", 
    "on_init": " "
  }
},
{
  "pk": 18, 
  "model": "mission.mission", 
  "fields": {
    "name": "Charit\u00e9", 
    "target_list": " ", 
    "text": "Je fais une offrande aux paysans pour qu'ils reviennent sur mes terres. Mais \u00e7a va me co\u00fbter 10 \u00e9cus.\r\n\r\n```+10 population```", 
    "has_value": false, 
    "on_resolution": "kingdom.population+=10\nkingdom.save()\n", 
    "value_description": "Valeur :", 
    "on_start": "if kingdom.money < 10 :\n  status = \"Vous n'avez pas assez d'argent pour lancer cette mission\"\nelse:\n  kingdom.money-=10\n  kingdom.save()\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 3, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": null, 
    "slug": "charite", 
    "on_init": "\n"
  }
},
{
  "pk": 19, 
  "model": "mission.mission", 
  "fields": {
    "name": "Soigner un bless\u00e9", 
    "target_list": " ", 
    "text": "Je veux vider mon h\u00f4pital", 
    "has_value": false, 
    "on_resolution": "grids['blesse'][0].remove_quality(\"blesse\")\nif random_value(1,10) == 1:\n  grids['blesse'][0].add_quality(\"estropie\")\nparam.started = datetime.now() - timedelta(minutes=60*random_value(0,1))\n", 
    "value_description": "Valeur :", 
    "on_start": "\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 3, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 120, 
    "on_cancel": "\n", 
    "slug": "soigner_blesse", 
    "on_init": " "
  }
},
{
  "pk": 20, 
  "model": "mission.mission", 
  "fields": {
    "name": "Emprisonner un membre de la cour", 
    "target_list": " ", 
    "text": "Un membre de ma cour m'a fortement d\u00e9plu. Et comme je suis la loi et qu'il me sied de le faire dispara\u00eetre de ma vue, j'ai pris la d\u00e9cision de le jeter en prison.", 
    "has_value": false, 
    "on_resolution": "grid['prisonnier'][0].add_quality(\"prisonnier\")\ngrid['prisonnier'][0].save()\nif grid['prisonnier'][0].has_quality(\"scelerat\"):\n  call_function(\"perte_loyaute_general\", perte_min=8, perte_max=12)\nelse :\n  call_function(\"perte_loyaute_general\", perte_min=18, perte_max=22)\n", 
    "value_description": "Valeur :", 
    "on_start": " ", 
    "has_target": false, 
    "is_team": false, 
    "title": null, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "emprisonner", 
    "on_init": " "
  }
},
{
  "pk": 21, 
  "model": "mission.mission", 
  "fields": {
    "name": "Lib\u00e9rer un prisonnier", 
    "target_list": " ", 
    "text": "Le prisonnier a plus que payer pour son tord. Il est temps de le lib\u00e9rer.", 
    "has_value": false, 
    "on_resolution": "folk.remove_quality(\"prisonnier\")\n", 
    "value_description": "Valeur :", 
    "on_start": " ", 
    "has_target": false, 
    "is_team": false, 
    "title": null, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "liberer", 
    "on_init": " "
  }
},
{
  "pk": 22, 
  "model": "mission.mission", 
  "fields": {
    "name": "Ex\u00e9cuter un membre de la cour", 
    "target_list": " ", 
    "text": "L'affront est trop grand. Il me faudra l'ex\u00e9cuter pour l'exemple.", 
    "has_value": false, 
    "on_resolution": "grids['victime'][0].die()\n\n#Baisse de loyaut\u00e9 g\u00e9n\u00e9ral\n\nif grids['victime'][0].has_quality(\"scelerat\"):\n  call_function(\"perte_loyaute_general\", kingdom=kingdom, perte_min=8, perte_max=12)\nelse :\n  call_function(\"perte_loyaute_general\", kingdom=kingdom, perte_min=18, perte_max=22)\n", 
    "value_description": "Valeur :", 
    "on_start": " ", 
    "has_target": false, 
    "is_team": false, 
    "title": null, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "executer", 
    "on_init": " "
  }
},
{
  "pk": 23, 
  "model": "mission.mission", 
  "fields": {
    "name": "Nommer un mentor pour un enfant", 
    "target_list": " ", 
    "text": "Je veux qu'un enfant ait la meilleure \u00e9ducation possible", 
    "has_value": false, 
    "on_resolution": " ", 
    "value_description": "Valeur :", 
    "on_start": "grids['enfant'][0].mentor= grids['mentor'][0]\ngrids['enfant'][0].save()\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 4, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 0, 
    "on_cancel": "\n", 
    "slug": "nommer_mentor", 
    "on_init": " "
  }
},
{
  "pk": 24, 
  "model": "mission.mission", 
  "fields": {
    "name": "Investir", 
    "target_list": " ", 
    "text": "Je veux faire fructifier mon argent.", 
    "has_value": true, 
    "on_resolution": "pe = PendingEvent(event=Event.objects.get(slug=\"retour_investissement\"), kingdom=kingdom, started=None)\npe.started = datetime.now() + timedelta(hours=2)\npe.save()\npe.set_value(\"monnaie_investie\", param.get_value(\"monnaie_investie\"))\n", 
    "value_description": "Valeur :", 
    "on_start": "if kingom.money < param.get_value(\"value\"):\n  status = \"Vous ne pouvez pas investir cette somme\"\nelse: \n  param.set_value(\"monnaie_investie\", param.get_value(\"value\"))\n  param.set_value(\"mensualit\u00e9s\", kingdom.money / 100)\n  param.set_value(\"nb_mois\", 12)\n  kingdom.money *= 0.9\n  kingdom.save()\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 7, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 0, 
    "on_cancel": "\n", 
    "slug": "investir", 
    "on_init": "\n"
  }
},
{
  "pk": 25, 
  "model": "mission.mission", 
  "fields": {
    "name": "Chercher une cible", 
    "target_list": " ", 
    "text": "Qui veut la paix pr\u00e9pare la guerre. Il me faut conna\u00eetre mes ennemis.", 
    "has_value": false, 
    "on_resolution": "# Similar prestige\nks = Kingdom.objects.filter(prestige__gte=kingdom.prestige*0.9, prestige__lte=kingdom.prestige*1.1)\n\n# Exclude myself\nks = ks.exclude(id=kingdom.id)\n\n# Exclude people i already have Claim\nks = ks.exclude(offended_set__offender=kingdom)\n\nfor k in ks:\n  kingdom.add_claim(k, Claim.REACHABLE)\n\n#Appel de l'\u00e9v\u00e8nement pour afficher le r\u00e9sultat\npe = kingdom.create_pending_event(\"resultat_recherche_claim\")\npe.set_value(\"results\", ks)\npe.start()\n", 
    "value_description": "Valeur :", 
    "on_start": " ", 
    "has_target": false, 
    "is_team": false, 
    "title": 6, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "chercher_cibles", 
    "on_init": " "
  }
},
{
  "pk": 26, 
  "model": "mission.mission", 
  "fields": {
    "name": "Faire un raid", 
    "target_list": "param = Kingdom.objects.all()\n", 
    "text": "Allons attaquer !", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "Valeur :", 
    "on_start": "# tester la possibilit\u00e9 pour l'attaquant d'attaquer (assez d'argent ?)\nif kingdom.money >= 10:\n  kingdom.money-=10\n  # Retrieve the claim\n  try:\n    claim = Claim.objects.get(offender=kingdom, offended=target)\n    kingdom.prestige-=30\n    kingdom.save()\n  except:\n    #add claim lvl 1 Claim.objects.set(offender=kingdom, offended=target)\n    #claim.save()\n    pass\n\n  \n  # chute de population\n  capa2 = sum_folks(grids['attaquants'], 'fight')\n  # f('somme_stats_folks,folks = grids['combattants'],stat='filght')\n  capacite_combat=0\n  for personnage in grids['attaquants']:\n    capacite_combat += personnage.fight**1/2\n\n  capacite_combat = capacite_combat**3/capa2\n  \n  target.population-=max(0.05*target.population,capacite_combat)\n  target.save()\n  kingdom.money+=0\n  target.money-=0\n  target.save()\n  kingdom.save()\n\nelse:\n  status=\"vous n'avez pas suffisamment d'argent pour lancer cette mission.\"  \n", 
    "has_target": true, 
    "is_team": false, 
    "title": null, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 360, 
    "on_cancel": "\n", 
    "slug": "organiser_raid", 
    "on_init": " "
  }
},
{
  "pk": 27, 
  "model": "mission.mission", 
  "fields": {
    "name": "Espionner", 
    "target_list": "param = Kingdom.objects.filter(offended_set__offender=kingdom)", 
    "text": "Je suis quelqu'un de suspicieux. Je veux les espionner", 
    "has_value": false, 
    "on_resolution": "a = 0\nfor folk in grids['espion']:\n  a += folk.plot\nd = 0\ntry :\n  d += target.get_folk_in_title(\"maitre_espion\").plot *3\nexcept:\n  pass \nd += sum_folks(folks.filter(mission = None, birth__gte= datetime.now() - timedelta(days=C.MAJORITE\"))), \"plot\nd *= 0.7\n\nmarge = min(100, 100 * 4/float(3) * 1/float(2) * ( 1 + ( (a-d) / float((a+d)) ) ) )\n\nmoney = target.money + max(-target.money, target.money * random_value(-(100-marge)*(100-marge)/float(100), (100-marge)*(100-marge)/float(100)))\n\nincertitude = (100 + random_value(-(100-marge)*(100-marge)/float(100), (100-marge)*(100-marge)/float(100))) / float(100)\nfolk = max(5, min(target.folk_set.count() * incertitude, target.prestige/10))\n\nincertitude = (100 + random_value(-(100-marge)*(100-marge)/float(100), (100-marge)*(100-marge)/float(100))) / float(100)\npopulation =  max(5, min(target.population * incertitude, call_function(\"population_max\",kingdom=target)))\n\nincertitude = (100 + random_value(-(100-marge)*(100-marge)/float(100), (100-marge)*(100-marge)/float(100))) / float(100)\narchers = max(0, min(Folk.objects.filter(kingdom=target, quality_set__name=\"archer\").count() * incertitude, folk * 2/3))\n\nincertitude = (100 + random_value(-(100-marge)*(100-marge)/float(100), (100-marge)*(100-marge)/float(100))) / float(100)\npiquiers = max(0, min(Folk.objects.filter(kingdom=target, quality_set__name=\"piquier\").count() * incertitude, folk * 2/3))\n\nincertitude = (100 + random_value(-(100-marge)*(100-marge)/float(100), (100-marge)*(100-marge)/float(100))) / float(100)\ncavaliers = max(0, min(Folk.objects.filter(kingdom=target, quality_set__name=\"cavalier\").count() * incertitude, folk * 2/3))\n\npe = PendingEvent(event = Event.objects.get(slug=\"rapport_espionnage\"), kingdom=kingdom, started=None)\npe.save()\npe.set_value(\"money\", money)\npe.set_value(\"folk\", folk)\npe.set_value(\"population\", population)\npe.set_value(\"piquiers\", piquiers)\npe.set_value(\"cavaliers\", cavaliers)\npe.set_value(\"archers\", archers)\npe.set_value(\"target\", target)\npe.start()\n", 
    "value_description": " ", 
    "on_start": "\n", 
    "has_target": true, 
    "is_team": false, 
    "title": null, 
    "target_description": "Chateau \u00e0 observer", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 60, 
    "on_cancel": "\n", 
    "slug": "espionner", 
    "on_init": "\n"
  }
},
{
  "pk": 28, 
  "model": "mission.mission", 
  "fields": {
    "name": "Compromettre", 
    "target_list": " ", 
    "text": "Envoyez quelqu'un compromettre un membre de votre cour. Celui ci recevra le trait Notoire.", 
    "has_value": false, 
    "on_resolution": "\"\"\"\n-- commented by Neamar (crashes the cron)\n\nchance = grids['comprometteur'][0].plot  - 1\nchance *= 4\nif grids['comprometteur'][0] == kingdom.get_folk_in_title(\"maitre_espion\"):\n  chance += 8\ntest = random_value(1,100)\nif test<=chance:\n  grids['compromis'][0].add_quality(\"scelerat\")\nelse:\n  call_function(\"perte_loyaute_general\", perte_max=18,perte_min=22)\n\"\"\"\n", 
    "value_description": "Valeur :", 
    "on_start": " ", 
    "has_target": false, 
    "is_team": false, 
    "title": null, 
    "target_description": "Cible", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "compromettre", 
    "on_init": " "
  }
},
{
  "pk": 29, 
  "model": "mission.mission", 
  "fields": {
    "name": "Escarmouche", 
    "target_list": " ", 
    "text": "Une escarmouche est une petite bataille entre deux seigneurs. C'est le cas classique de bataille pour l'honneur et un peu de butin. Les lois de l'honneur vous permettent d'envoyer une partie de votre population et jusqu'\u00e0 4 hommes de votre cour pour les commander. Les frais pour le voyage, les vivres et la remise en \u00e9tat du mat\u00e9riel s'\u00e9l\u00e8vent \u00e0 30 \u00e9cus.\r\n[Pour chaque joueur : \r\n**score=[somme des combats des commandeurs+population_envoy\u00e9e+bonus_cavalerie+bonus_strat\u00e8ge]+/- 10%**\r\n**population envoy\u00e9e**=10% de population max\r\n**bonus_cavalerie** : +1 pour chacun de vos cavaliers\r\n**bonus_strat\u00e8ge** :\r\npour chacun de vos archer : +3 (1 fois/piquer adverse max)\r\npour chacun de vos piquier : +4 (1 fois/cavalier adverse max)\r\npour chacun de vos cavalier : +2 (1 fois/archer adverse max)\r\n\r\nLe joueur ayant le meilleur score de combat gagne du prestige, l'autre joueur en perds. Le joueur qui attaque a besoin d'un affront contre l'autre joueur pour effectuer la mission, s'il gagne il gagne de l'or mais ne peux pas en perdre. Aucun combattant n'est \u00e0 l'abri de se faire blesser ou tuer au cours d'une escarmouche...\r\n\r\n***exemple de calcul de bonus** : si vous avez 2 piquiers et un archer et votre adversaire un [\u00e9p\u00e9iste ou sans sp\u00e9cialisation], un cavalier et un lancier.\r\n-Votre adversaire gagne +1 parce qu'il a un cavalier, +2 suppl\u00e9mentaires parce qu'il a un cavalier et que vous avez un archer. Son piquier aurait pu lui donner +4 si vous aviez un cavalier mais vous n'en avez pas donc +0 et son dernier personnage ne lui donne pas de bonus. Il a au total un +3.\r\n-Avec vos piquiers vous auriez pu gagner deux fois +4 si votre adversaire avait 2 cavaliers mais il n'en a qu'un, donc vous \u00eates limit\u00e9 \u00e0 un seul +4. Votre archer a un bonus de +3 contre le piquier adverse. Vous totalisez un bonus de +7.*]", 
    "has_value": false, 
    "on_resolution": " ", 
    "value_description": "Valeur :", 
    "on_start": "population_envoyee_attaquant=kingdom.population*0.1\nkingdom.population-=population_envoyee_attaquant\nkingdom.money-=30\nkingdom.save()\n\n\ntarget=Kingdom.objects.get(user__username=\"le_pnj_du_jeu\")\ngrille_defenseur=Folk.objects.filter(kingdom=target).order_by('?')[0:3]\npopulation_pnj=kingdom.get_value(\"population_pnj\")*0.1\n#population_pnj=(1+(pop_toi-pop_adverse)/(pop_toi+pop_adversaire))*pop_base_adverse\nretour_fonction=call_function(\"resolution_combat\",\n                population_envoyee_attaquant=population_envoyee_attaquant,\n                population_envoyee_defenseur=population_pnj,\n                grille_attaquant=grids['combattants_tuto'],\n                grille_defenseur=grille_defenseur,\n                royaume_attaquant=kingdom,\n                royaume_defenseur=target,\n                pourcent_mort=10,\n                pourcent_blesse=30,\n                pourcentage_pop_meurt_base=30,\n                pourcentage_population=8,\n                gain_maxi_prestige=30,\n                limit_difference_prestige=100)\n              \n\n#si chatelain est dans la grille alors chatelain, sinon si connetable est dans la mission alors connetable, sinon le mec qui la le plus gros combat\ntest=0\n\nchatelain_gagnant=False\nchatelain_perdant=False\nconnetable_gagnant=False\nconnetable_perdant=False\ngeneral_attaquant= None\ngeneral_perdant=None\n#on part du principe de le gagnant est le vainqueur\n\nif kingdom.get_folk_in_title(\"chatelain\") in grids['combattants_tuto']:\n  test=1\n  general_vainqueur=kingdom.get_folk_in_title(\"chatelain\")\n  chatelain_gagnant=True\n\nif test==0:\n    if kingdom.get_folk_in_title(\"connetable\") in grids['combattants_tuto']:\n      connetable_gagnant=True\n      test=1\n      general_vainqueur=kingdom.get_folk_in_title(\"connetable\")\nif test==0:\n  combat_min=0\n  for personnage in grids['combattants_tuto']:\n    if personnage.fight>combat_min:\n      combat_min=personnage.fight\n      general_vainqueur=personnage\n\n\n#si ce n'est pas le cas on inverse      \nif retour_fonction[\"attaquant_egal_vainqueur\"]==False:\n  connetable_attaquant=connetable_perdant\n  connetable_perdant=connetable_gagnant\n  connetable_gagnant=connetable_attaquant\n  connetable_defenseur=connetable_gagnant\n  chatelain_attaquant=chatelain_perdant\n  chatelain_perdant=chatelain_gagnant\n  chatelain_gagnant=chatelain_attaquant\n  chatelain_defenseur=chatelain_gagnant\n  vainqueur=general_perdant\n  general_attaquant=general_vainqueur\n  general_defenseur=general_perdant\nelse:\n  connetable_attaquant=connetable_gagnant\n  connetable_defenseur=connetable_perdant\n  chatelain_attaquant=chatelain_gagnant\n  chatelain_defenseur=chatelain_perdant\n  general_attaquant=general_perdant\n  general_defenseur=general_vainqueur   \n\n  \nif kingdom.prestige>150:  \n  pe=PendingEvent(event=Event.objects.get(slug=\"raser_chateau_ennemi\"),kingdom=kingdom,started=None)\n  pe.save()\n  pe.set_value(\"vainqueur\",retour_fonction[\"vainqueur\"])\n  pe.set_value(\"perdant\",retour_fonction[\"perdant\"])\n  pe.set_value(\"chatelain_defenseur\",target.get_folk_in_title(\"chatelain\"))\n  pe.set_value(\"vainqueur_est_attaquant\",retour_fonction[\"attaquant_egal_vainqueur\"])\n  if retour_fonction[\"attaquant_egal_vainqueur\"]:\n    pe.set_value(\"pop_envoyee_gagnant\",retour_fonction[\"population_envoyee_attaquant\"])\n    pe.set_value(\"pop_envoyee_perdant\",retour_fonction[\"population_envoyee_defenseur\"])\n  else:\n    pe.set_value(\"pop_envoyee_gagnant\",retour_fonction[\"population_envoyee_defenseur\"])\n    pe.set_value(\"pop_envoyee_perdant\",retour_fonction[\"population_envoyee_attaquant\"])\n  pe.set_value(\"pop_pertes_vainqueur\",retour_fonction[\"perte_population_vainqueur\"])\n  pe.set_value(\"pop_pertes_perdant\",retour_fonction[\"perte_population_perdant\"])\n  pe.set_value(\"chatelain_in_mission_vainqueur\",chatelain_gagnant)\n  pe.set_value(\"connetable_in_mission_vainqueur\",connetable_gagnant)\n  pe.set_value(\"chatelain_in_mission_perdant\",chatelain_perdant)\n  pe.set_value(\"connetable_in_mission_perdant\",connetable_perdant)\n  pe.set_value(\"chatelain_in_mission_attaquant\",chatelain_attaquant)\n  pe.set_value(\"connetable_in_mission_attaquant\",connetable_attaquant)\n  #pe.set_value(\"chatelain_in_mission_defenseur\",chatelain_defenseur)\n  #pe.set_value(\"connetable_in_mission_defenseur\",connetable_defenseur)\n  pe.set_value(\"general_attaquant\",general_attaquant)\n  pe.set_value(\"general_vainqueur\",general_vainqueur)\n  pe.set_value(\"general_perdant\",general_perdant)\n  pe.set_value(\"morts_gagnant\",retour_fonction[\"morts_gagnant\"])\n  pe.set_value(\"blesses_gagnant\",retour_fonction[\"blesses_gagnant\"])\n  pe.set_value(\"morts_perdants\",retour_fonction[\"morts_perdant\"])\n  pe.set_value(\"blesses_perdants\",retour_fonction[\"blesses_perdant\"])\n  pe.set_value(\"gain_monnaie_attaquant\",retour_fonction[\"gain_monnaie_attaquant\"])\n  pe.set_value(\"gain_prestige_vainqueur\",retour_fonction[\"gain_prestige_vainqueur\"])\n  pe.set_value(\"perte_prestige_perdant\",retour_fonction[\"perte_prestige_perdant\"])\n  pe.start()\n  \n  #suppresseion availablemission : tutoriel\n  \nelse:\n  pe=PendingEvent(event=Event.objects.get(slug=\"escarmouche_attaque\"),kingdom=kingdom,started=None)\n  pe.save()\n  pe.set_value(\"vainqueur\",retour_fonction[\"vainqueur\"])\n  pe.set_value(\"perdant\",retour_fonction[\"perdant\"])\n  pe.set_value(\"chatelain_defenseur\",target.get_folk_in_title(\"chatelain\"))\n  pe.set_value(\"vainqueur_est_attaquant\",retour_fonction[\"attaquant_egal_vainqueur\"])\n  if retour_fonction[\"attaquant_egal_vainqueur\"]:\n    pe.set_value(\"pop_envoyee_gagnant\",retour_fonction[\"population_envoyee_attaquant\"])\n    pe.set_value(\"pop_envoyee_perdant\",retour_fonction[\"population_envoyee_defenseur\"])\n  else:\n    pe.set_value(\"pop_envoyee_gagnant\",retour_fonction[\"population_envoyee_defenseur\"])\n    pe.set_value(\"pop_envoyee_perdant\",retour_fonction[\"population_envoyee_attaquant\"])\n  pe.set_value(\"pop_pertes_vainqueur\",retour_fonction[\"perte_population_vainqueur\"])\n  pe.set_value(\"pop_pertes_perdant\",retour_fonction[\"perte_population_perdant\"])\n  pe.set_value(\"chatelain_in_mission_vainqueur\",chatelain_gagnant)\n  pe.set_value(\"connetable_in_mission_vainqueur\",connetable_gagnant)\n  pe.set_value(\"chatelain_in_mission_perdant\",chatelain_perdant)\n  pe.set_value(\"connetable_in_mission_perdant\",connetable_perdant)\n  pe.set_value(\"chatelain_in_mission_attaquant\",chatelain_attaquant)\n  pe.set_value(\"connetable_in_mission_attaquant\",connetable_attaquant)\n  #pe.set_value(\"chatelain_in_mission_defenseur\",chatelain_defenseur)\n  #pe.set_value(\"connetable_in_mission_defenseur\",connetable_defenseur)\n  pe.set_value(\"general_attaquant\",general_attaquant)\n  pe.set_value(\"general_vainqueur\",general_vainqueur)\n  pe.set_value(\"general_perdant\",general_perdant)\n  pe.set_value(\"morts_gagnant\",retour_fonction[\"morts_gagnant\"])\n  pe.set_value(\"blesses_gagnant\",retour_fonction[\"blesses_gagnant\"])\n  pe.set_value(\"morts_perdants\",retour_fonction[\"morts_perdant\"])\n  pe.set_value(\"blesses_perdants\",retour_fonction[\"blesses_perdant\"])\n  pe.set_value(\"gain_monnaie_attaquant\",retour_fonction[\"gain_monnaie_attaquant\"])\n  pe.set_value(\"gain_prestige_vainqueur\",retour_fonction[\"gain_prestige_vainqueur\"])\n  pe.set_value(\"perte_prestige_perdant\",retour_fonction[\"perte_prestige_perdant\"])\n  pe.start()\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 2, 
    "target_description": " ", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 60, 
    "on_cancel": "\n", 
    "slug": "tuto_dummy_escarmouche", 
    "on_init": "\n"
  }
},
{
  "pk": 30, 
  "model": "mission.mission", 
  "fields": {
    "name": "Chercher des noises tuto", 
    "target_list": "\n", 
    "text": "Aller chercher des noises \u00e0 votre voisin.\r\n\r\nTUTO\r\n[co\u00fbt 25 ecus pour lancer la mission]", 
    "has_value": false, 
    "on_resolution": "#a = 0\n#for folk in grids['chercheurs_merde']:\n#  a += folk.diplomacy\n#cible=Kingdom.objects.get(user__username=\"le_pnj_du_jeu\")\n#nb_def=random_value(3,6)\n#d = sum_folks(Folk.objects.filter(kingdom=cible).order_by('?')[0:nb_def], \"diplomacy\")\n#d *= 0.3\n\n\n#if a>d:\n  #kingdom.add_claim(cible, Claim.REACHABLE)\npe = PendingEvent(event=Event.objects.get(slug=\"tuto_getaffront_diplomatie_kingdomsuccess\"),kingdom=kingdom,started=None)\npe.save()\npe.set_value(\"defenseur\",cible)\npe.start()\n  \n\n  \n   \n#else:\n#  pe = PendingEvent(Event.objects.get(slug=\"tuto_getaffront_diplomatie_kingdomfailure\"),kingdom=kingdom,started=None)\n#  pe.save()\n#  pe.set_value(\"attaquant\",kingdom)\n#  pe.start()\n\nkingdom.money-=25\nkingdom.save()\n", 
    "value_description": "Valeur :", 
    "on_start": "\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 6, 
    "target_description": " ", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 15, 
    "on_cancel": "\n", 
    "slug": "tuto_getaffront_diplomatie", 
    "on_init": "\n"
  }
},
{
  "pk": 31, 
  "model": "mission.mission", 
  "fields": {
    "name": "Organiser un banquet", 
    "target_list": "\n", 
    "text": "Organisons un joyeux \u00e9v\u00e9nement !", 
    "has_value": false, 
    "on_resolution": "kingdom.create_pending_event(\"banquet\")\npe.set_value(\"raison\", \"initiative\")\npe.start()\n", 
    "value_description": "Valeur :", 
    "on_start": "nb_convives = folks.filter(mission=None).count()\nif kingdom.money < nb_convives * 2:\n  status = \"Vous n'avez pas les moyens d'organiser un banquet de cette envergure\"\n  if sum_folks(affected, \"diplomacy\") <= 10:\n    status = \"Les convives ne seront pas disponibles, il manquent probablement de motivation\"\nif status != \"ok\":\n  kingdom.money -= nb_convives * 2\n  kingdom.save()\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 4, 
    "target_description": " ", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "organiser_banquet", 
    "on_init": "\n"
  }
},
{
  "pk": 32, 
  "model": "mission.mission", 
  "fields": {
    "name": "Chasse", 
    "target_list": "\n", 
    "text": " ", 
    "has_value": false, 
    "on_resolution": "pe = kingdom.create_pending_event(\"chasse\")\npe.set_value(\"chasseurs\", grids['chasseurs'])\npe.start()\n", 
    "value_description": "Valeur :", 
    "on_start": "\n", 
    "has_target": false, 
    "is_team": false, 
    "title": null, 
    "target_description": " ", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 0, 
    "on_cancel": "\n", 
    "slug": "chasse", 
    "on_init": "\n"
  }
},
{
  "pk": 33, 
  "model": "mission.mission", 
  "fields": {
    "name": "Assassiner", 
    "target_list": "\n", 
    "text": "A faire", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "", 
    "on_start": "\n", 
    "has_target": false, 
    "is_team": false, 
    "title": null, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": null, 
    "slug": "assassiner", 
    "on_init": "\n"
  }
},
{
  "pk": 34, 
  "model": "mission.mission", 
  "fields": {
    "name": "Votre voisin vous attaque !", 
    "target_list": "\n", 
    "text": "Une escarmouche est une petite bataille entre deux seigneurs. C'est le cas classique de bataille pour l'honneur et un peu de butin. Les lois de l'honneur vous permettent d'envoyer une partie de votre population et jusqu'\u00e0 4 hommes de votre cour pour les commander. Vous avez peu de temps pour pr\u00e9parer la d\u00e9fense.\r\n[Pour chaque joueur : \r\n**score=[somme des combats des commandeurs+population_envoy\u00e9e+bonus_cavalerie+bonus_strat\u00e8ge]+/- 10%**\r\n**population envoy\u00e9e**=10% de population max\r\n**bonus_cavalerie** : +1 pour chacun de vos cavaliers\r\n**bonus_strat\u00e8ge** :\r\npour chacun de vos archer : +3 (1 fois/piquer adverse max)\r\npour chacun de vos piquier : +4 (1 fois/cavalier adverse max)\r\npour chacun de vos cavalier : +2 (1 fois/archer adverse max)\r\n\r\nLe joueur ayant le meilleur score de combat gagne du prestige, l'autre joueur en perds. Le joueur qui attaque a besoin d'un affront contre l'autre joueur pour effectuer la mission, s'il gagne il gagne de l'or mais ne peux pas en perdre. Aucun combattant n'est \u00e0 l'abri de se faire blesser ou tuer au cours d'une escarmouche...\r\n\r\n***exemple de calcul de bonus** : si vous avez 2 piquiers et un archer et votre adversaire un [\u00e9p\u00e9iste ou sans sp\u00e9cialisation], un cavalier et un lancier.\r\n-Votre adversaire gagne +1 parce qu'il a un cavalier, +2 suppl\u00e9mentaires parce qu'il a un cavalier et que vous avez un archer. Son piquier aurait pu lui donner +4 si vous aviez un cavalier mais vous n'en avez pas donc +0 et son dernier personnage ne lui donne pas de bonus. Il a au total un +3.\r\n-Avec vos piquiers vous auriez pu gagner deux fois +4 si votre adversaire avait 2 cavaliers mais il n'en a qu'un, donc vous \u00eates limit\u00e9 \u00e0 un seul +4. Votre archer a un bonus de +3 contre le piquier adverse. Vous totalisez un bonus de +7.*]", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "", 
    "on_start": "population_envoyee_attaquant=kingdom.population*0.1\nkingdom.population-=population_envoyee_attaquant\nkingdom.save()\n\n\ntarget=Kingdom.objects.get(user__username=\"le_pnj_du_jeu\")\ngrille_defenseur=Folk.objects.filter(kingdom=target).order_by('?')[0:3]\npopulation_pnj=kingdom.get_value(\"population_pnj\")*0.1\n#population_pnj=(1+(pop_toi-pop_adverse)/(pop_toi+pop_adversaire))*pop_base_adverse\nretour_fonction=call_function(\"resolution_combat\",\n                population_envoyee_attaquant=population_envoyee_attaquant,\n                population_envoyee_defenseur=population_pnj,\n                grille_attaquant=grids['defenseurs_tuto'],\n                grille_defenseur=grille_defenseur,\n                royaume_attaquant=kingdom,\n                royaume_defenseur=target,\n                pourcent_mort=10,\n                pourcent_blesse=30,\n                pourcentage_pop_meurt_base=30,\n                pourcentage_population=8,\n                gain_maxi_prestige=30,\n                limit_difference_prestige=100)\n              \n\n#si chatelain est dans la grille alors chatelain, sinon si connetable est dans la mission alors connetable, sinon le mec qui la le plus gros combat\ntest=0\n\nchatelain_gagnant=False\nchatelain_perdant=False\nconnetable_gagnant=False\nconnetable_perdant=False\ngeneral_attaquant= None\ngeneral_perdant=None\n#on part du principe de le gagnant est le vainqueur\n\nif kingdom.get_folk_in_title(\"chatelain\") in grids['defenseurs_tuto']:\n  test=1\n  general_vainqueur=kingdom.get_folk_in_title(\"chatelain\")\n  chatelain_gagnant=True\n\nif test==0:\n    if kingdom.get_folk_in_title(\"connetable\") in grids['defenseurs_tuto']:\n      connetable_gagnant=True\n      test=1\n      general_vainqueur=kingdom.get_folk_in_title(\"connetable\")\nif test==0:\n  combat_min=0\n  for personnage in grids['defenseurs_tuto']:\n    if personnage.fight>combat_min:\n      combat_min=personnage.fight\n      general_vainqueur=personnage\n\n\n#si ce n'est pas le cas on inverse      \nif retour_fonction[\"attaquant_egal_vainqueur\"]:\n  connetable_attaquant=connetable_perdant\n  connetable_perdant=connetable_gagnant\n  connetable_gagnant=connetable_attaquant\n  connetable_defenseur=connetable_gagnant\n  chatelain_attaquant=chatelain_perdant\n  chatelain_perdant=chatelain_gagnant\n  chatelain_gagnant=chatelain_attaquant\n  chatelain_defenseur=chatelain_gagnant\n  vainqueur=general_perdant\n  general_attaquant=general_vainqueur\n  general_defenseur=general_perdant\nelse:\n  connetable_attaquant=connetable_gagnant\n  connetable_defenseur=connetable_perdant\n  chatelain_attaquant=chatelain_gagnant\n  chatelain_defenseur=chatelain_perdant\n  general_attaquant=general_perdant\n  general_defenseur=general_vainqueur   \n\nif not retour_fonction[\"attaquant_egal_vainqueur\"]:\n  kingdom.population-=20\n  kingdom.save()\n  \n\npe=PendingEvent(event=Event.objects.get(slug=\"escarmouche_defense\"),kingdom=kingdom,started=None)\npe.save()\npe.set_value(\"vainqueur\",retour_fonction[\"vainqueur\"])\npe.set_value(\"perdant\",retour_fonction[\"perdant\"])\npe.set_value(\"chatelain_defenseur\",kingdom.get_folk_in_title(\"chatelain\"))\npe.set_value(\"chatelain_attaquant\",target.get_folk_in_title(\"chatelain\"))\npe.set_value(\"vainqueur_est_attaquant\",not retour_fonction[\"attaquant_egal_vainqueur\"])\nif not retour_fonction[\"attaquant_egal_vainqueur\"]:\n  pe.set_value(\"pop_envoyee_gagnant\",retour_fonction[\"population_envoyee_attaquant\"])\n  pe.set_value(\"pop_envoyee_perdant\",retour_fonction[\"population_envoyee_defenseur\"])\nelse:\n  pe.set_value(\"pop_envoyee_gagnant\",retour_fonction[\"population_envoyee_defenseur\"])\n  pe.set_value(\"pop_envoyee_perdant\",retour_fonction[\"population_envoyee_attaquant\"])\npe.set_value(\"pop_pertes_vainqueur\",retour_fonction[\"perte_population_vainqueur\"])\npe.set_value(\"pop_pertes_perdant\",retour_fonction[\"perte_population_perdant\"])\npe.set_value(\"chatelain_in_mission_vainqueur\",chatelain_gagnant)\npe.set_value(\"connetable_in_mission_vainqueur\",connetable_gagnant)\npe.set_value(\"chatelain_in_mission_perdant\",chatelain_perdant)\npe.set_value(\"connetable_in_mission_perdant\",connetable_perdant)\npe.set_value(\"chatelain_in_mission_attaquant\",chatelain_attaquant)\npe.set_value(\"connetable_in_mission_attaquant\",connetable_attaquant)\npe.set_value(\"chatelain_in_mission_defenseur\",chatelain_defenseur)\npe.set_value(\"connetable_in_mission_defenseur\",connetable_defenseur)\npe.set_value(\"general_defenseur\",general_defenseur)\npe.set_value(\"general_attaquant\",general_attaquant)\npe.set_value(\"general_vainqueur\",general_vainqueur)\npe.set_value(\"general_perdant\",general_perdant)\npe.set_value(\"morts_gagnant\",retour_fonction[\"morts_gagnant\"])\npe.set_value(\"blesses_gagnant\",retour_fonction[\"blesses_gagnant\"])\npe.set_value(\"morts_perdants\",retour_fonction[\"morts_perdant\"])\npe.set_value(\"blesses_perdants\",retour_fonction[\"blesses_perdant\"])\npe.set_value(\"gain_prestige_vainqueur\",retour_fonction[\"gain_prestige_vainqueur\"])\npe.set_value(\"perte_prestige_perdant\",retour_fonction[\"perte_prestige_perdant\"])\npe.start()\n\n\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 2, 
    "target_description": "", 
    "timeout": 1440, 
    "is_cancellable": true, 
    "duration": 60, 
    "on_cancel": "\n", 
    "slug": "tuto_contre_attaque_PNJ", 
    "on_init": "\n"
  }
},
{
  "pk": 35, 
  "model": "mission.mission", 
  "fields": {
    "name": "Attaquons ces bandits !", 
    "target_list": "\n", 
    "text": "Envoyez tous vos hommes valides pour optimiser vos chances. Vos gens ne bougeront m\u00eame pas le petit doigt si vous et votre conn\u00e9table ne partez pas en combat.", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "", 
    "on_start": "if kingdom.get_folk_in_title(\"chatelain\") not in grids['defenseurs'] or kingdom.get_folk_in_title(\"connetable\") not in grids['defenseurs']:\n  status = \"Le ch\u00e2telain et le conn\u00e9table se doivent de participer \u00e0 cette mission\"\n  \ncombattants = grids['defenseurs'][0:]\ncombattants.remove(folks[0])\ncombattant=random_in(combattants)\nif combattant.fight>8:\n  intrepide=True\n  fleche=False\nelse:\n  intrepide=False  \n  fleche=True\n\npe=PendingEvent(event=Event.objects.get(slug=\"tuto_bandits_bataille\"),kingdom=kingdom,started=None)\npe.save()\npe.set_value(\"somme_fight\",sum_folks(grids['defenseurs'],\"fight\"))\npe.set_value(\"combattant\",combattant)\npe.set_value(\"intrepide\",intrepide)\npe.set_value(\"fleche\",fleche)\npe.start()\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 2, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 7, 
    "on_cancel": "\n", 
    "slug": "tuto_bandits_attaque", 
    "on_init": "\n"
  }
},
{
  "pk": 37, 
  "model": "mission.mission", 
  "fields": {
    "name": "Recruter des troupes", 
    "target_list": "\n", 
    "text": "Recruter des soldats (fait perdre des paysans)", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "", 
    "on_start": "POURCENTAGE_MAX_MISSION_RECRUTEMENT = 5\ndelta = sum_folks(affected, 'fight') / 3\n\n# On ne peut pas d\u00e9passer le max de troupes possible\nmax_troupes = call_function('get_max_soldats', kingdom=kingdom)\ndelta = min(delta, max_troupes - kingdom.soldiers)\n\n# On ne peut pas gagner plus de 5% de la population maximale en une fois\nmax_population = call_function('get_max_population', kingdom=kingdom)\nmax_gain_soldats = max_population * POURCENTAGE_MAX_MISSION_RECRUTEMENT / 100\ndelta = min(delta, max_gain_soldats)\n\n# On ne peut pas avoir un nombre n\u00e9gatif de paysans !\ndelta = min(delta, kingdom.population)\n\n# On ne peut perdre plus d'argents que notre tr\u00e9sorerie actuelle\ndelta = min(delta, kingdom.money)\n\nkingdom.money -= delta\nkingdom.soldiers += delta\nkingdom.population -= delta\nkingdom.save()\n\nkingdom.message_set.add(Message(\n  content=\"%s soldats ont rejoint votre cour. Vous \u00eates maintenant \u00e0 la t\u00eate d'une arm\u00e9e de %s soldats.\" % (delta, kingdom.soldiers)\n))\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 2, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 360, 
    "on_cancel": "\n", 
    "slug": "recruter", 
    "on_init": "\n"
  }
},
{
  "pk": 38, 
  "model": "mission.mission", 
  "fields": {
    "name": "Renvoyer des soldats", 
    "target_list": "\n", 
    "text": "Renvoyer des soldats. Ils deviendront paysans.", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "", 
    "on_start": "POURCENTAGE_MAX_MISSION_RECRUTEMENT = 5\ndelta = sum_folks(affected, 'scholarship') / 3\n\n# On ne peut pas avoir un nombre n\u00e9gatif de soldats !\ndelta = min(delta, kingdom.soldiers)\n\nkingdom.soldiers -= delta\nkingdom.population += delta\nkingdom.save()\n\nkingdom.message(\"%s soldats ont l\u00e2ch\u00e9s leurs armes pour se reconvertir en paysans. Vous \u00eates maintenant \u00e0 la t\u00eate d'une arm\u00e9e de %s soldats.\" % (delta, kingdom.soldiers))\n\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 2, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 20, 
    "on_cancel": "\n", 
    "slug": "renvoyer", 
    "on_init": "\n"
  }
},
{
  "pk": 39, 
  "model": "mission.mission", 
  "fields": {
    "name": "Nommer un mentor pour un enfant", 
    "target_list": "\n", 
    "text": "Donner \u00e0 votre filleul un mentor pour l'\u00e9duquer.", 
    "has_value": false, 
    "on_resolution": "kingdom.unlock_mission(\"nommer_mentor\")\n", 
    "value_description": "", 
    "on_start": "grids['enfant'][0].mentor = grids['mentor'][0]\ngrids['enfant'][0].save()\ncall_function(\"tuto_moteur\", kingdom=kingdom, slug_event=\"tuto_soeurette\")\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 4, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 1, 
    "on_cancel": "\n", 
    "slug": "tuto_nommer_mentor", 
    "on_init": "\n"
  }
},
{
  "pk": 40, 
  "model": "mission.mission", 
  "fields": {
    "name": "R\u00e9cup\u00e9rer un casus belli", 
    "target_list": "\n", 
    "text": "R\u00e9cup\u00e9rer un casus belli sur mon adversaire.", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "", 
    "on_start": "if sum_folks(affected, \"diplomacy\") < 20:\n  status=\"Il va falloir \u00eatre un peu plus diplomate\"\n  stop()\n\nkingdom.set_value(\"tuto_has_claim\", True)\nkingdom.create_pending_event(\"tuto_casusbelli_success\").start()\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 6, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": false, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "tuto_claim", 
    "on_init": "\n"
  }
},
{
  "pk": 41, 
  "model": "mission.mission", 
  "fields": {
    "name": "Lancer le combat contre le PNJ", 
    "target_list": "\n", 
    "text": "Cocorico.\r\nTabasser mon PNJ \u00e0 la batte.", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "", 
    "on_start": "\nattaquant = {\n  'troupes': C.POURCENTAGE_SOLDATS_ESCARMOUCHE * kingdom.soldiers / 100,\n  'combattants': affected,\n  'population': kingdom.population,\n  'prestige': kingdom.prestige,\n  'dynastie_adverse':kingdom.get_value('tuto_dynasty_PNJ')\n}\n\n# R\u00e9cuperer les cinq meilleurs combattants de l'attaquant\ndate_majorite = datetime.now() - timedelta(days=C.MAJORITE)\ncinq_meilleurs = kingdom.folk_set.filter(sex=Folk.MALE, disabled=False, birth__lte=date_majorite).order_by('fight')[0:5]\nmoyenne_meilleurs_fight = avg_folks(cinq_meilleurs, 'fight')\n\ncombattants = [Folk(fight=moyenne_meilleurs_fight), Folk(fight=moyenne_meilleurs_fight), Folk(fight=moyenne_meilleurs_fight)]\nmap(lambda f: f.save(), combattants)\ncombattants[0].add_quality('piquier')\ncombattants[1].add_quality('piquier')\ncombattants[2].add_quality('archer')\n\ndefenseur = {\n  # Dans le cadre du tuto,\n  # Les troupes du d\u00e9fenseur correspondent \u00e0 80% des troupes maximales disponibles pour ce Kingdom\n  'troupes': C.POURCENTAGE_SOLDATS_ESCARMOUCHE * 0.8 * C.POURCENTAGE_MAX_SOLDATS_PASSIF * call_function(\"get_max_population\", kingdom=kingdom) / (100 * 100),\n  'combattants': combattants,\n  'population': 200,\n  'prestige': kingdom.prestige,\n  'dynastie_adverse':\"dynastie advserse\",\n}\n\ngagnant, perdant, marge = f(\"determiner_vainqueur_combat\", attaquant=attaquant, defenseur=defenseur)\nis_victory = gagnant == attaquant\n\nprint \"GP\", gagnant, perdant, marge\ndelta = f(\"determiner_modifications_combat\", gagnant=gagnant, perdant=perdant, marge=marge, attaquant_est_gagnant=is_victory)\nprint \"DELTA\", delta\n\nif is_victory:\n  kingdom.prestige += 20\nelse:\n  kingdom.prestige -= 20\nkingdom.save()\n\nif kingdom.get_value(\"tuto_firstbattle_attack\", False) == False:\n  pe = kingdom.create_pending_event(\"tuto_firstbattle_attack\")\nelif is_victory:\n  pe = kingdom.create_pending_event(\"tuto_escarmouche_victoire\")\nelse:\n  pe = kingdom.create_pending_event(\"tuto_escarmouche_defaite\")\n  \n  pe.set_value(\"is_victory\", is_victory)\n  pe.set_value(\"attaquant\", True)\n  pe.start()\n  \nmap(lambda f: f.delete(), combattants)", 
    "has_target": false, 
    "is_team": false, 
    "title": null, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": false, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "tuto_escarmouche", 
    "on_init": "\n"
  }
},
{
  "pk": 42, 
  "model": "mission.mission", 
  "fields": {
    "name": "Achever votre adversaire", 
    "target_list": "\n", 
    "text": "On a localis\u00e9 les toilettes favorites du seigneur adverse !\r\nOn se cache derri\u00e8re la porte avec une hache....\r\n\r\n\r\n\r\n... ET BIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIM", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "", 
    "on_start": "#ne part pas si pas le chatelain dans la mission\nkingdom.create_pending_event(\"tuto_fin_tuto\").start()\n", 
    "has_target": false, 
    "is_team": false, 
    "title": null, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "tuto_achever_voisin", 
    "on_init": "\n"
  }
},
{
  "pk": 43, 
  "model": "mission.mission", 
  "fields": {
    "name": "D\u00e9finir sa d\u00e9fense", 
    "target_list": "\n", 
    "text": "D\u00e9finir les personnes qui prendront la d\u00e9fense de mon ch\u00e2teau en cas de besoin", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "", 
    "on_start": "\n", 
    "has_target": false, 
    "is_team": true, 
    "title": 2, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": false, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "ligne_defense", 
    "on_init": "\n"
  }
},
{
  "pk": 44, 
  "model": "mission.mission", 
  "fields": {
    "name": "Espionnage des troupes", 
    "target_list": "\n", 
    "text": "Aller qu\u00e9rir des informations sur la force de bataille !", 
    "has_value": false, 
    "on_resolution": "def randomize_stat(value, marge, maximum=20):\n  min_error = C.POURCENTAGE_ERREUR_MIN_ESPIONNAGE\n  max_error = C.POURCENTAGE_ERREUR_MAX_ESPIONNAGE\n  stat = int(min(maximum,value*(100+random_value(-max(min_error,(100-marge)*(100-marge)*max_error/10000), max(min_error,(100-marge)*(100-marge)*max_error/10000)))/100))\n  return stat\n\ndef randomize_number(value, marge):\n  min_error = C.POURCENTAGE_ERREUR_MIN_ESPIONNAGE\n  max_error = C.POURCENTAGE_ERREUR_MAX_ESPIONNAGE\n  number = int(value*(100+random_value(-max(min_error,(100-marge)*(100-marge)*max_error/10000), max(min_error,(100-marge)*(100-marge)*max_error/10000)))/100)\n  return number\n\n# Notre valeur d'intrigue\nattack = sum_folks(grids['espions'], 'plot')\nattack /= 3\n\n# Carac du maitre espion adverse\nintrigue_maitre_espion=0\ntry :\n  intrigue_maitre_espion = target.get_folk_in_title(\"maitre_espion\").plot\nexcept:\n  pass\n\n# Carac du chatelain adverse\nintrigue_chatelain = 0\ntry :\n  intrigue_chatelain = target.get_folk_in_title(\"chatelain\").plot\nexcept:\n  pass\n\n# R\u00e9cup\u00e9rer la moyenne de l'intrigue des personnes majeures dans la cour adverse qui ne sont pas en mission\ndef_folks = target.folk_set.filter(mission = None, birth__gte= datetime.now() - timedelta(days=C.MAJORITE))\nmoyenne_cour = avg_folks(def_folks, \"plot\")\n\n# Calcul final.\ndefense = 0.3 * (4 * intrigue_maitre_espion + intrigue_chatelain) / 5 + 0.7 * moyenne_cour\n\nif defense > attack * 2:\n  pe = kingdom.create_pending_event(\"resultat_espionnage_echec\")\n  pe.set_value(\"target\", target)\n  pe.start()\nelse:\n  marge = min(100, 100 * 4/float(3) * 1/float(2) * ( 1 + ( (attack-defense) / float((attack+defense)) ) ) )\n  soldiers = randomize_number(target.soldiers, marge)\n  cavaliers = randomize_number(Folk.objects.filter(kingdom=target, quality_set__name=\"cavalier\").count(), marge)\n  archers= randomize_number(Folk.objects.filter(kingdom=target, quality_set__name=\"archers\").count(), marge)\n  piquiers = randomize_number(Folk.objects.filter(kingdom=target, quality_set__name=\"piquiers \").count(), marge)\n  choice_folks = random_value(1,10)\n  defenseurs = []\n  tab_defenseurs= []\n  if False:\n  #if choice_folks < 7 :\n    defenseurs = target.get_team(\"ligne_defense\")[\"affected\"]\n    import random\n    random.shuffle(defenseurs)\n    defenseurs = defenseurs[0:1]\n  else:\n  #elif choice_folks < 9:\n    defenseurs = target.get_team(\"ligne_defense\")[\"affected\"]\n    import random\n    random.shuffle(defenseurs)\n    defenseurs = defenseurs[0:2] \n  \n  for folk in defenseurs:\n    title = False\n    try:\n      title = folk.title.title.name\n    except:\n      pass\n    tab_defenseurs.append([folk.first_name + \" \" + folk.last_name, title , randomize_stat(folk.fight, marge), randomize_stat(folk.plot, marge), randomize_stat(folk.diplomacy, marge), randomize_stat(folk.scholarship, marge),randomize_stat(folk.loyalty, marge, 100), folk.quality_set.all()])\n    \n  pe = kingdom.create_pending_event(\"resultat_espionnage_troupes\")\n  \n  pe.set_value(\"soldiers\",soldiers)\n  pe.set_value(\"archers\",archers)\n  pe.set_value(\"piquiers\",piquiers)\n  pe.set_value(\"cavaliers\",cavaliers)\n  pe.set_value(\"defenseurs\",tab_defenseurs)\n  pe.start()\n", 
    "value_description": "", 
    "on_start": "\n", 
    "has_target": true, 
    "is_team": false, 
    "title": 5, 
    "target_description": "Chateau \u00e0 observer", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 120, 
    "on_cancel": "\n", 
    "slug": "espionner_troupes", 
    "on_init": "\n"
  }
},
{
  "pk": 45, 
  "model": "mission.mission", 
  "fields": {
    "name": "Espionnage un chateau", 
    "target_list": "\n", 
    "text": "Aller qu\u00e9rir des information sur les ressources du chateau", 
    "has_value": false, 
    "on_resolution": "def randomize_stat(value, marge, maximum=20):\n  min_error = C.POURCENTAGE_ERREUR_MIN_ESPIONNAGE\n  max_error = C.POURCENTAGE_ERREUR_MAX_ESPIONNAGE\n  return int(min(maximum,value*(100+random_value(-max(min_error,(100-marge)*(100-marge)*max_error/10000), max(min_error,(100-marge)*(100-marge)*max_error/10000)))/100))\ndef randomize_number(value, marge):\n  min_error = C.POURCENTAGE_ERREUR_MIN_ESPIONNAGE\n  max_error = C.POURCENTAGE_ERREUR_MAX_ESPIONNAGE\n  return int(value*(100+random_value(-max(min_error,(100-marge)*(100-marge)*max_error/10000), max(min_error,(100-marge)*(100-marge)*max_error/10000)))/100)\n\n# Notre valeur d'intrigue\nattack = sum_folks(grids['espions'], 'plot')\nattack /= 3\n\n# Carac du maitre espion adverse\nintrigue_maitre_espion=0\ntry :\n  intrigue_maitre_espion = target.get_folk_in_title(\"maitre_espion\").plot\nexcept:\n  pass\n\n# Carac du chatelain adverse\nintrigue_chatelain = 0\ntry :\n  intrigue_chatelain = target.get_folk_in_title(\"chatelain\").plot\nexcept:\n  pass\n\n# R\u00e9cup\u00e9rer la moyenne de l'intrigue des personnes majeures dans la cour adverse qui ne sont pas en mission\ndef_folks = target.folk_set.filter(mission = None, birth__gte= datetime.now() - timedelta(days=C.MAJORITE))\nmoyenne_cour = avg_folks(def_folks, \"plot\")\n\n# Calcul final.\ndefense = 0.3 * (4 * intrigue_maitre_espion + intrigue_chatelain) / 5 + 0.7 * moyenne_cour\n\n\nif defense > attack * 2:\n  pe = kingdom.create_pending_event(\"resultat_espionnage_echec\")\n  pe.set_value(\"target\", target)\n  pe.start()\nelse:\n  marge = min(100, 100 * 4 / 3 / 2 * ( 1 + (attack-defense) / (attack+defense)))\n  money = randomize_number(target.money, marge)\n  population = randomize_number(target.population, marge)\n  \n  folks_titled = []\n  titles = {\n    'ambassadeur': 'diplomacy',\n    'connetable': 'fight',\n    'maitre_espion': 'plot',\n  }\n\n  for title in titles.keys():\n    values = []\n    folk = target.get_folk_in_title(title)\n    if folk is not None:\n      values.append(folk)\n      values.append(Title.objects.get(slug=title).name)\n      values.append(randomize_stat(getattr(folk, titles[title]), marge))\n      folks_titled.append(values)\n  \n  pe = kingdom.create_pending_event(\"resultat_espionnage_chateau\")\n  pe.set_value(\"folks_titled\", folks_titled)\n  pe.set_value(\"gold\", money)\n  pe.set_value(\"population\", population)\n  pe.start()\n", 
    "value_description": "", 
    "on_start": "\n", 
    "has_target": true, 
    "is_team": false, 
    "title": 5, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 120, 
    "on_cancel": "\n", 
    "slug": "espionner_chateau", 
    "on_init": "\n"
  }
},
{
  "pk": 46, 
  "model": "mission.mission", 
  "fields": {
    "name": "Nommer les soigneurs", 
    "target_list": "\n", 
    "text": "Nommer les personnes qui seront charg\u00e9 de soigner les bless\u00e9s.", 
    "has_value": false, 
    "on_resolution": "\n", 
    "value_description": "", 
    "on_start": "\n", 
    "has_target": false, 
    "is_team": true, 
    "title": 3, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": false, 
    "duration": 5, 
    "on_cancel": "\n", 
    "slug": "team_soigneurs", 
    "on_init": "\n"
  }
},
{
  "pk": 47, 
  "model": "mission.mission", 
  "fields": {
    "name": "Recruter un chevalier", 
    "target_list": "\n", 
    "text": "Envoyer des missionnaire recruter un chevalier", 
    "has_value": false, 
    "on_resolution": "#age = f(\"random_gauss\", min=16, max=40)\nage = random_value(16,40)\nmax_carac = 32+int((age-16)/5)\n#liste des traits qu'il poss\u00e8de (en plus des traits random)\nqualities = []\nqualities.append(random_in([\"archer\", \"cavalier\", \"piquier\"]))\n#liste des traits qu'il ne peut pas avoir\nno_qualities = []\n\nloyalty = 50 + 30 * int((sum_folks(affected, \"loyalty\")-23)/37) + random_value(-10, 10)\nchevalier = f(\"creer_folk\", kingdom=None, fight_min=7, plot_min=1, diplomacy_min=1, scholarship_min=1, loyalty=loyalty, max_carac=max_carac, sex=Folk.MALE, birth=datetime.now() - timedelta(days=age), traits=qualities, notraits = no_qualities)\npe = kingdom.create_pending_event(\"recrutement_chevalier\")\npe.set_value(\"chevalier\", chevalier)\npe.start()\n", 
    "value_description": "", 
    "on_start": "cout = 15 + 10 * len(affected)\nif kingdom.money < cout :\n  statut = \"Vous n'avez pas les moyen de lancer cette mission.\"\n  stop()\n\nbonus = 0\nif kingdom.get_folk_in_title(\"ambassadeur\") in affected:\n  bonus += 4\nif sum_folks(affected, \"diplomacy\") + bonus < 24:\n  status = \"Il vous faudra une plus grande force de persuasion pour recruter un chevalier.\"\n", 
    "has_target": false, 
    "is_team": false, 
    "title": 6, 
    "target_description": "", 
    "timeout": null, 
    "is_cancellable": true, 
    "duration": 360, 
    "on_cancel": "\n", 
    "slug": "recruter_chevalier", 
    "on_init": "\n"
  }
},
{
  "pk": 2, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "D\u00e9fenseurs", 
    "mission": 2, 
    "length": 3, 
    "allow_empty": false, 
    "slug": "defenseurs", 
    "condition": "if folk.sex==Folk.FEMALE:\n  status=\"Depuis des temps imm\u00e9moriaux, les femmes ont persuad\u00e9 les hommes que c'\u00e9tait \u00e0 eux de se battre. Les choses n'ont pas chang\u00e9 depuis...\"\n  \nif folk.age()<=C.MAJORITE:\n  status=\"La guerre, c'est une histoire d'adultes !\"\n"
  }
},
{
  "pk": 3, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "chercheurs de noises", 
    "mission": 3, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "chercheurs_noises", 
    "condition": "if folk.age() >= C.MAJORITE:\n  status=\"Laisse les grands jouer \u00e0 ce jeu\""
  }
},
{
  "pk": 4, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "combattants", 
    "mission": 5, 
    "length": 4, 
    "allow_empty": false, 
    "slug": "combattants", 
    "condition": "if folk.sex==Folk.FEMALE:\n  status=\"Depuis des temps imm\u00e9moriaux, les femmes ont persuad\u00e9 les hommes que c'\u00e9tait \u00e0 eux de se battre. Les choses n'ont pas chang\u00e9 depuis...\"\n  \nif folk.age()<=C.MAJORITE:\n  status=\"La guerre, c'est une histoire d'adultes !\"\n"
  }
},
{
  "pk": 6, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Missionnaire d'emprunt", 
    "mission": 7, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "missionnaire_emprunt", 
    "condition": "\n"
  }
},
{
  "pk": 7, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "taxecour", 
    "mission": 9, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "taxecour", 
    "condition": "\n"
  }
},
{
  "pk": 8, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Collecteur", 
    "mission": 8, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "collecteur", 
    "condition": "\n"
  }
},
{
  "pk": 9, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Defenseurs", 
    "mission": 13, 
    "length": 4, 
    "allow_empty": false, 
    "slug": "defenseurs", 
    "condition": "if folk.sex==Folk.FEMALE:\n  status=\"Depuis des temps imm\u00e9moriaux, les femmes ont persuad\u00e9 les hommes que c'\u00e9tait \u00e0 eux de se battre. Les choses n'ont pas chang\u00e9 depuis...\"\n  \nif folk.age()>=C.MAJORITE:\n  status=\"La guerre, c'est une histoire d'adultes !\""
  }
},
{
  "pk": 10, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Banni", 
    "mission": 14, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "banni", 
    "condition": "\n"
  }
},
{
  "pk": 11, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Recruteur", 
    "mission": 15, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "recruteur", 
    "condition": "if folk.age() < C.MAJORITE or folk.has_quality(\"pretre\"):\n  status = \"Cette personne ne peut pas effectuer cette mission\"\n"
  }
},
{
  "pk": 12, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "L'envoy\u00e9 dans les ordres", 
    "mission": 16, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "envoye_dans_ordres", 
    "condition": "if folk.sex == Folk.FEMALE:\n  Status = \"Seul un homme peut \u00eatre pr\u00eatre\"\n"
  }
},
{
  "pk": 13, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Le mari", 
    "mission": 17, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "mari", 
    "condition": "if folk.age < C.MAJORITE : \n  status = S.TOO_YOUNG\nelif folk.sex == Folk.FEMALE :\n  status = \"Le mari doit \u00eatre un homme\"\nelif folk.has_quality(\"pretre\") :\n  status = \"Un pr\u00eatre ne peut pas se marier\"\nelif (kingdom.get_value(\"in_tuto\") == True and folk==folks[0]):\n  status = \"Il est encore trop tot pour songer \u00e0 marier votre chatelain\"\nelif (kingdom.get_value(\"passage_proposition_mariage\", False) and  folk==folks[1]):\n  status = \"Il est encore trop tot pour songer \u00e0 marier votre fils\"\nelif folk.spouse != None and folk.spouse.death == None:\n  status = \"Cette personne est d\u00e9j\u00e0 mari\u00e9e\"\n"
  }
},
{
  "pk": 14, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "La femme", 
    "mission": 17, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "femme", 
    "condition": "if folk.age < C.MAJORITE:\n  status = S.TOO_YOUNG\nelif folk.sex == Folk.MALE:\n  status = \"La femme doit \u00eatre une femme\"\nelif folk.spouse != None and folk.spouse.death == None:\n  status = \"Cette personne est d\u00e9j\u00e0 mari\u00e9e\"\n"
  }
},
{
  "pk": 15, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Bl\u00e9ss\u00e9", 
    "mission": 19, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "blesse", 
    "condition": "if folk.has_quality(\"blesse\") == False:\n  status = \"Cette personne n'a pas besoin d'\u00eatre soign\u00e9e\"\n"
  }
},
{
  "pk": 16, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Prisonnier", 
    "mission": 20, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "prisonnier", 
    "condition": "\n"
  }
},
{
  "pk": 17, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Lib\u00e9r\u00e9", 
    "mission": 21, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "libere", 
    "condition": "if Folk.objects.filter(kingdom=kingdom,quality__name=\"prisonnier\").count()==0:\n  status=\"Aucun prisonnier a liberer\"\n"
  }
},
{
  "pk": 18, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Victime", 
    "mission": 22, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "victime", 
    "condition": "\n"
  }
},
{
  "pk": 19, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Mentor", 
    "mission": 23, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "mentor", 
    "condition": "if folk.age()< C.MAJORITE:\n  status = S.TOO_YOUNG\n"
  }
},
{
  "pk": 20, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Enfant", 
    "mission": 23, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "enfant", 
    "condition": "if folk.age() > C.MAJORITE:\n  status = S.TOO_YOUNG\n"
  }
},
{
  "pk": 21, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Recruteurs", 
    "mission": 4, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "recruteurs", 
    "condition": "if folk.sex==Folk.FEMALE:\n  status=\"il faut une homme\"\n"
  }
},
{
  "pk": 22, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Agents", 
    "mission": 6, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "agents", 
    "condition": "\n"
  }
},
{
  "pk": 23, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Espion", 
    "mission": 27, 
    "length": 200, 
    "allow_empty": false, 
    "slug": "espion", 
    "condition": "if PendingMissionAffectation.objects.filter(pending_mission=param.pending_mission, mission_grid=param.mission_grid).count() > kingdom.prestige / 10:\n  status = \"Vous ne pouvez plus rajouter de personne \u00e0 cette mission\"\nif folk.age < C.MAJORITE:\n  status = \"Un enfant ne peut pas effectuer cette mission\"\n\n"
  }
},
{
  "pk": 24, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Comprometteur", 
    "mission": 28, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "comprometteur", 
    "condition": "\n"
  }
},
{
  "pk": 25, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Compromis", 
    "mission": 28, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "compromis", 
    "condition": "\n"
  }
},
{
  "pk": 26, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Attaquants", 
    "mission": 26, 
    "length": 4, 
    "allow_empty": false, 
    "slug": "attaquants", 
    "condition": "if folk.age() < C.MAJORITE:\n  status = \"Vous ne pouvez pas affecter un enfant \u00e0 cette mission.\"\nelif folk.sex == Folk.FEMALE:\n  status = \"Vous ne pouvez pas affecter de femme \u00e0 cette mission\"\n"
  }
},
{
  "pk": 27, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "combattants_tuto", 
    "mission": 29, 
    "length": 4, 
    "allow_empty": false, 
    "slug": "combattants_tuto", 
    "condition": "if folk.sex==Folk.FEMALE:\n  status=\"Depuis des temps imm\u00e9moriaux, les femmes ont persuad\u00e9 les hommes que c'\u00e9tait \u00e0 eux de se battre. Les choses n'ont pas chang\u00e9 depuis...\"\n  \nif folk.age()>=C.MAJORITE:\n  status=\"La guerre, c'est une histoire d'adultes !\""
  }
},
{
  "pk": 28, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "chercheurs de merde", 
    "mission": 30, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "chercheurs_merde", 
    "condition": "if folk.age()>=C.MAJORITE:\n  status=\"Laisse les grands jouer \u00e0 ce jeu\"\nelif folk.sex==Folk.FEMALE:\n  status = \"Une femme ne peut pas aller se battre\"\n"
  }
},
{
  "pk": 29, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Organisateurs", 
    "mission": 31, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "organisateurs", 
    "condition": "\n"
  }
},
{
  "pk": 30, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "organisateurs", 
    "mission": 10, 
    "length": 3, 
    "allow_empty": false, 
    "slug": "organisateurs", 
    "condition": "if folk.age() < C.MAJORITE:\n  status=\"Grandis un peu, gamin, et reviens un peu plus tard !\"\n"
  }
},
{
  "pk": 31, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Ch\u00e2telain", 
    "mission": 32, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "chatelain", 
    "condition": "if folk != kingdom.get_folk_in_title(\"chatelain\"):\n  status = \"Seul le chatelain peut endosser ce role pour lancer cette mission\"\n"
  }
},
{
  "pk": 32, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Chasseurs", 
    "mission": 32, 
    "length": 10, 
    "allow_empty": false, 
    "slug": "chasseurs", 
    "condition": "if folk.sex==Folk.FEMALE or folk.has_quality(\"pretre\") or folk.age()<C.MAJORITE:\n  status = \"Le chasseur doit etre un chevalier adulte\"\n"
  }
},
{
  "pk": 33, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "chercheur", 
    "mission": 25, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "chercheur", 
    "condition": "if folk.age() < C.MAJORITE: \n  status = S.TOO_YOUNG\n"
  }
},
{
  "pk": 34, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "R\u00e9parateurs", 
    "mission": 11, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "reparateurs", 
    "condition": "\n"
  }
},
{
  "pk": 35, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Defenseurs_tuto", 
    "mission": 34, 
    "length": 4, 
    "allow_empty": false, 
    "slug": "defenseurs_tuto", 
    "condition": "if folk.sex==Folk.FEMALE:\n  status=\"Depuis des temps imm\u00e9moriaux, les femmes ont persuad\u00e9 les hommes que c'\u00e9tait \u00e0 eux de se battre. Les choses n'ont pas chang\u00e9 depuis...\"\n  \nif folk.age()<=C.MAJORITE:\n  status=\"La guerre, c'est une histoire d'adultes !\"\n"
  }
},
{
  "pk": 36, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "D\u00e9fenseurs", 
    "mission": 35, 
    "length": 4, 
    "allow_empty": false, 
    "slug": "defenseurs", 
    "condition": "if folk.sex==Folk.FEMALE:\n  status=\"Depuis des temps imm\u00e9moriaux les femmes ont persuad\u00e9 les hommes que c'\u00e9taient \u00e0 eux de mourrir. On ne revient pas sur des privil\u00e8ges durement gagn\u00e9s.\""
  }
},
{
  "pk": 37, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Recruteurs", 
    "mission": 37, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "recruteurs", 
    "condition": "\n"
  }
},
{
  "pk": 38, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Responsables", 
    "mission": 38, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "responsables", 
    "condition": "\n"
  }
},
{
  "pk": 39, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Enfant", 
    "mission": 39, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "enfant", 
    "condition": "if folk.age() > C.MAJORITE:\n  status = S.TOO_YOUNG\n"
  }
},
{
  "pk": 40, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Mentor", 
    "mission": 39, 
    "length": 1, 
    "allow_empty": false, 
    "slug": "mentor", 
    "condition": "if folk.age()< C.MAJORITE:\n  status = S.TOO_YOUNG\n"
  }
},
{
  "pk": 41, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Diplomates", 
    "mission": 40, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "diplomates", 
    "condition": "\n"
  }
},
{
  "pk": 42, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Combattants", 
    "mission": 41, 
    "length": 3, 
    "allow_empty": false, 
    "slug": "combattants", 
    "condition": "\n"
  }
},
{
  "pk": 43, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "sneaky bitches", 
    "mission": 42, 
    "length": 20, 
    "allow_empty": false, 
    "slug": "attaquants", 
    "condition": "\n"
  }
},
{
  "pk": 44, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": true, 
    "name": "D\u00e9fenseurs", 
    "mission": 43, 
    "length": 1000, 
    "allow_empty": false, 
    "slug": "defenseurs", 
    "condition": "if folk.age()< C.MAJORITE:\n  status = S.TOO_YOUNG\nif folk.sex == Folk.FEMALE:\n  status = \"Seul un homme peut \u00eatre choisi pour d\u00e9fendre la cit\u00e9.\"\n"
  }
},
{
  "pk": 45, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Espions", 
    "mission": 44, 
    "length": 3, 
    "allow_empty": false, 
    "slug": "espions", 
    "condition": "if folk.age() < C.MAJORITE:\n  status = S.TOO_YOUNG\n"
  }
},
{
  "pk": 46, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Espions", 
    "mission": 45, 
    "length": 3, 
    "allow_empty": false, 
    "slug": "espions", 
    "condition": "if folk.age() < C.MAJORITE:\n  status = S.TOO_YOUNG\n"
  }
},
{
  "pk": 47, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": true, 
    "name": "Soigneurs", 
    "mission": 46, 
    "length": 2000, 
    "allow_empty": false, 
    "slug": "soigneurs", 
    "condition": "if folk.sex == Folk.MALE and not folk.has_quality(\"pretre\"):\n  status = \"Seul les femmes et les pr\u00eatres peuvent soigner les bl\u00e9ss\u00e9s\"\n"
  }
},
{
  "pk": 48, 
  "model": "mission.missiongrid", 
  "fields": {
    "allow_disabled": false, 
    "name": "Recruteurs", 
    "mission": 47, 
    "length": 3, 
    "allow_empty": false, 
    "slug": "recruteurs", 
    "condition": "if folk.age() < C.MAJORITE:\n  status = S.TOO_YOUNG\n"
  }
}
]
